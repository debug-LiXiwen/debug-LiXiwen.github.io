<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>golang单元测试攻略</title>
      <link href="/2021/07/21/golang-dan-yuan-ce-shi/"/>
      <url>/2021/07/21/golang-dan-yuan-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Go测试的分类"><a href="#1-Go测试的分类" class="headerlink" title="1 Go测试的分类"></a>1 Go测试的分类</h1><ol><li><p>单元测试</p></li><li><p>基准测试（性能测试）</p></li><li><p>子测试与子基准测试</p></li></ol><h1 id="2-测试模式"><a href="#2-测试模式" class="headerlink" title="2 测试模式"></a>2 测试模式</h1><p>包列表模式：<code>go test .</code> 测试在命令上列出的每个包。正则匹配方式。</p><p>当前目录模式：<code>go test</code></p><h1 id="3-常用参数和示例"><a href="#3-常用参数和示例" class="headerlink" title="3 常用参数和示例"></a>3 常用参数和示例</h1><p>这里介绍几个常用的参数：</p><ul><li>-bench regexp 执行相应的 benchmarks，例如 -bench=.</li><li>-cover 开启测试覆盖率；</li><li>-run regexp 只运行 regexp 匹配的函数<ul><li>例如 -run=TestAdd（-run TestAdd） 那么就执行包含有 <code>TestAdd 开头</code>的函数，<code>&#39;TestAdd$&#39;</code>代表只执行Array名字的函数</li><li>参数支持通配符 <code>*</code>，和部分正则表达式，例如 <code>^</code>、<code>$</code>。</li><li>-run=none，代表要执行这个名字的函数，如果没有就不执行，也就代表不执行单元测试</li></ul></li><li>-v 显示测试的详细命令。<ul><li><code>go test -v</code>，<code>-v</code> 参数会显示每个用例的测试结果</li></ul></li><li><code>-benchtime</code> ：可以自定义测试时间</li></ul><p><code>go test</code>，该 package 下所有的文件的所有测试用例都会被执行。</p><p><code>go test calc_test.go</code>，运行该 package 下的<code>calc_test.go</code>文件的所有测试用例。</p><p><code>go test calc_test.go -run=TestAdd</code>，运行该 package 下的<code>calc_test.go</code>文件的以TestAdd开头的所有用例。</p><p><code>go test calc_test.go -run=&#39;TestAdd$&#39;</code>，运行该 package 下的<code>calc_test.go</code>文件的TestAdd用例。</p><h1 id="4-测试代码规范"><a href="#4-测试代码规范" class="headerlink" title="4 测试代码规范"></a>4 测试代码规范</h1><p>执行 <code>go test</code> 命令，它会在 <code>*_test.go</code> 中寻找 <code>test 测试</code>、<code>benchmark 基准</code> 和 <code>examples 示例</code> 函数。测试函数必须以 <code>TestXXX</code> 的函数名出现（XXX 为以非小写字母开头），基准函数必须以 <code>BenchmarkXXX</code> 的函数名出现，示例函数必须以 <code>ExampleXXX</code> 的形式。三种函数类似下面的签名形式：</p><pre class="line-numbers language-golang"><code class="language-golang">// test 测试函数func TestXXX(t *testing.T) &#123; ... &#125;// benchmark 基准函数func BenchmarkXXX(b *testing.B) &#123; ... &#125;// examples 示例函数，其相关命名方式可以查看第一篇文章func ExamplePrintln() &#123;    Println("The output of\nthis example.")    // Output: The output of    // this example.&#125;或func ExamplePerm() &#123;    for _, value := range Perm(4) &#123;        fmt.Println(value)    &#125;    // Unordered output: 4    // 2    // 1    // 3    // 0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Go 语言推荐测试文件和源代码文件放在一块，测试文件以 <code>_test.go</code> 结尾。比如，当前 package 有 <code>calc.go</code> 一个文件，我们想测试 <code>calc.go</code> 中的 <code>Add</code> 和 <code>Mul</code> 函数，那么应该新建 <code>calc_test.go</code> 作为测试文件。</p><pre class="line-numbers language-text"><code class="language-text">example/   |--calc.go   |--calc_test.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假如 <code>calc.go</code> 的代码如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">Mul</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么 <code>calc_test.go</code> 中的测试用例可以这么写：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"testing"</span><span class="token keyword">func</span> <span class="token function">TestAdd</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> ans <span class="token operator">:=</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ans <span class="token operator">!=</span> <span class="token number">3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"1 + 2 expected be 3, but %d got"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> ans <span class="token operator">:=</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ans <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">30</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"-10 + -20 expected be -30, but %d got"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试用例名称一般命名为 <code>Test</code> 加上待测试的方法名。</li><li>测试用的参数有且只有一个，在这里是 <code>t *testing.T</code>。</li></ul><h1 id="5-单元测试日志级别"><a href="#5-单元测试日志级别" class="headerlink" title="5 单元测试日志级别"></a>5 单元测试日志级别</h1><p>每个测试用例可能并发执行，使用 testing.T 提供的日志输出可以保证日志跟随这个测试上下文一起打印输出。testing.T 提供了几种日志输出方法，详见下表所示。</p><table><thead><tr><th align="center">方  法</th><th>备  注</th></tr></thead><tbody><tr><td align="center">Log</td><td>打印日志，同时结束测试</td></tr><tr><td align="center">Logf</td><td>格式化打印日志，同时结束测试</td></tr><tr><td align="center">Error</td><td>打印错误日志，同时结束测试</td></tr><tr><td align="center">Errorf</td><td>格式化打印错误日志，同时结束测试</td></tr><tr><td align="center">Fatal</td><td>打印致命日志，同时结束测试</td></tr><tr><td align="center">Fatalf</td><td>格式化打印致命日志，同时结束测试</td></tr></tbody></table><h1 id="6-单元测试"><a href="#6-单元测试" class="headerlink" title="6 单元测试"></a>6 单元测试</h1><ul><li>测试用例名称一般命名为 <code>Test</code> 加上待测试的方法名。</li><li>测试用的参数有且只有一个，在这里是 <code>t *testing.T</code>。</li></ul><h1 id="7-基准测试"><a href="#7-基准测试" class="headerlink" title="7 基准测试"></a>7 基准测试</h1><p>基准测试(benchmark)的参数是 <code>*testing.B</code>，TestMain 的参数是 <code>*testing.M</code> 类型。</p><p>代码结构</p><pre class="line-numbers language-text"><code class="language-text">example/   |--calc.go   |--calc_test.go   |--benchmark_test.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-1-代码运行和解释"><a href="#7-1-代码运行和解释" class="headerlink" title="7.1 代码运行和解释"></a>7.1 代码运行和解释</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"testing"</span><span class="token keyword">func</span> <span class="token function">BenchmarkAdd</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> n <span class="token builtin">int</span>   <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      n<span class="token operator">++</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">BenchmarkMul</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> n <span class="token builtin">int</span>   <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      n<span class="token operator">++</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">⋊<span class="token operator">></span> ~/g/s/b/testing go <span class="token function">test</span> -v -bench<span class="token operator">=</span>. benchmark_test.go                                                                                                           goos: darwingoarch: amd64BenchmarkAddBenchmarkAdd-12         1000000000               0.263 ns/opBenchmarkMulBenchmarkMul-12         1000000000               0.255 ns/opPASSok      command-line-arguments  0.665s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>-bench=.</code>表示运行 benchmark_test.go 文件里的所有基准测试，和单元测试中的<code>-run</code>类似。</li><li>第5行解释<ol><li>BenchmarkAdd-12 ：显示基准测试名称</li><li>1000000000 ：表示测试的次数，也就是 testing.B 结构中提供给程序使用的 N。</li><li>“0.263 ns/op”表示每一个操作耗费多少时间（纳秒）。</li></ol></li><li><code>-benchtime</code>参数可以自定义测试时间</li></ol><p><strong>1</strong> 秒 = <strong>1000000000</strong> 纳秒</p><p>1秒(s) ＝1000毫秒(ms)<br>1毫秒(ms)＝1000微秒 (us)<br>1微秒(us)＝1000纳秒 (ns)</p><p>基准测试报告每一列值对应的含义如下：</p><pre><code>type BenchmarkResult struct &#123;    N         int           // 迭代次数    T         time.Duration // 基准测试花费的时间    Bytes     int64         // 一次迭代处理的字节数    MemAllocs uint64        // 总的分配内存的次数    MemBytes  uint64        // 总的分配内存的字节数&#125;</code></pre><p>如果基准测试需要在并行设置中测试性能，则可以使用 <code>RunParallel</code> 辅助函数 ; 这样的基准测试一般与 <code>go test -cpu</code> 标志一起使用：</p><p>通过 <code>RunParallel</code> 方法能够并行地执行给定的基准测试。<code>RunParallel</code>会创建出多个 goroutine，并将 b.N 分配给这些 goroutine 执行，其中 goroutine 数量的默认值为 GOMAXPROCS。用户如果想要增加非 CPU 受限（non-CPU-bound）基准测试的并行性，那么可以在 <code>RunParallel</code> 之前调用 <code>SetParallelism</code>（如 <code>SetParallelism(2)</code>，则 goroutine 数量为 2*GOMAXPROCS）。<code>RunParallel</code> 通常会与 <code>-cpu</code> 标志一同使用。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">BenchmarkTemplateParallel</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    templ <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"Hello, &amp;#123;&amp;#123;.&amp;#125;&amp;#125;!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span><span class="token function">RunParallel</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>pb <span class="token operator">*</span>testing<span class="token punctuation">.</span>PB<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每个 goroutine 有属于自己的 bytes.Buffer.</span>        <span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Buffer        <span class="token keyword">for</span> pb<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 循环体在所有 goroutine 中总共执行 b.N 次</span>            buf<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            templ<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">⋊<span class="token operator">></span> ~/g/s/b/testing go <span class="token function">test</span> -v -bench<span class="token operator">=</span>BenchmarkTemplateParallel benchmark_test.go                                                                                   goos: darwingoarch: amd64BenchmarkTemplateParallelBenchmarkTemplateParallel-12             5213426               236 ns/opPASSok      command-line-arguments  2.687s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>-benchtime</code>参数可以自定义测试时间</p><pre class="line-numbers language-bash"><code class="language-bash">⋊<span class="token operator">></span> ~/g/s/b/testing go <span class="token function">test</span> -v -bench<span class="token operator">=</span>. -benchtime<span class="token operator">=</span>5s benchmark_test.go                                                                                             goos: darwingoarch: amd64BenchmarkAddBenchmarkAdd-12                         1000000000               0.257 ns/opBenchmarkMulBenchmarkMul-12                         1000000000               0.258 ns/opBenchmarkTemplateParallelBenchmarkTemplateParallel-12            27029740               228 ns/opPASSok      command-line-arguments  8.157s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">⋊<span class="token operator">></span> ~/g/s/b/testing go <span class="token function">test</span> -v -bench<span class="token operator">=</span>.  benchmark_test.go                                                                                                          goos: darwingoarch: amd64BenchmarkAddBenchmarkAdd-12                         1000000000               0.246 ns/opBenchmarkMulBenchmarkMul-12                         1000000000               0.255 ns/opBenchmarkTemplateParallelBenchmarkTemplateParallel-12             4983981               232 ns/opBenchmarkFib1BenchmarkFib1-12                        731937631                1.66 ns/opBenchmarkFib2BenchmarkFib2-12                        262092915                4.45 ns/opBenchmarkFib3BenchmarkFib3-12                        157617190                7.47 ns/opBenchmarkFib10BenchmarkFib10-12                        4234692               297 ns/opBenchmarkFib20BenchmarkFib20-12                          34222             35516 ns/opBenchmarkFib40BenchmarkFib40-12                              2         529998057 ns/opPASSok      command-line-arguments  12.166s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">⋊> ~/g/s/b/testing go test -bench=. -run=none -benchmem                                                                                                            15:19:06BenchmarkXXXgoos: darwingoarch: amd64pkg: basic_go/testingBenchmarkXXX-12                         BenchmarkXXXBenchmarkXXXBenchmarkXXXBenchmarkXXXBenchmarkXXX1000000000               0.000023 ns/op        0 B/op          0 allocs/opBenchmarkAdd-12                         1000000000               0.260 ns/op           0 B/op          0 allocs/opBenchmarkMul-12                         1000000000               0.259 ns/op           0 B/op          0 allocs/opBenchmarkTemplateParallel-12             5424362               236 ns/op             272 B/op          8 allocs/opBenchmarkFib1-12                        695810144                1.65 ns/op            0 B/op          0 allocs/opBenchmarkFib2-12                        262647230                4.62 ns/op            0 B/op          0 allocs/opBenchmarkFib3-12                        153866595                7.74 ns/op            0 B/op          0 allocs/opBenchmarkFib10-12                        4036820               315 ns/op               0 B/op          0 allocs/opBenchmarkFib20-12                          32605             36246 ns/op               0 B/op          0 allocs/opBenchmarkFib40-12                              2         543972525 ns/op               0 B/op          0 allocs/opPASSok      basic_go/testing        13.141s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-2-分析基准测试数据"><a href="#7-2-分析基准测试数据" class="headerlink" title="7.2 分析基准测试数据"></a>7.2 分析基准测试数据</h2><ul><li>cpu 使用分析：-cpuprofile=cpu.pprof</li><li>内存使用分析：-benchmem -memprofile=mem.pprof</li><li>block分析：-blockprofile=block.pprof</li></ul><p>在配合 pprof 就可以进行分析。</p><p>运行命令采样数据：</p><pre class="line-numbers language-sh"><code class="language-sh">go test -bench=. -run=none -benchmem -memprofile=mem.pprofgo test -bench=. -run=none -blockprofile=block.pprofgo test -bench=. -run=none -benchmem -memprofile=mem.pprof -cpuprofile=cpu.pprof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-3-基准测试原理"><a href="#7-3-基准测试原理" class="headerlink" title="7.3 基准测试原理"></a>7.3 基准测试原理</h2><p>基准测试框架对一个测试用例的默认测试时间是 1 秒。开始测试时，当以 Benchmark 开头的基准测试用例函数返回时还不到 1 秒，那么 testing.B 中的 N 值将按 1、2、5、10、20、50……递增，同时以递增后的值重新调用基准测试用例函数。</p><h1 id="8-参考"><a href="#8-参考" class="headerlink" title="8 参考"></a>8 参考</h1><p><a href="https://books.studygolang.com/The-Golang-Standard-Library-by-Example/chapter09/09.0.html">https://books.studygolang.com/The-Golang-Standard-Library-by-Example/chapter09/09.0.html</a></p><p><a href="http://c.biancheng.net/view/124.html">http://c.biancheng.net/view/124.html</a></p><p><a href="https://geektutu.com/post/quick-go-test.html#4-%E5%B8%AE%E5%8A%A9%E5%87%BD%E6%95%B0-helpers">https://geektutu.com/post/quick-go-test.html#4-%E5%B8%AE%E5%8A%A9%E5%87%BD%E6%95%B0-helpers</a></p><p><a href="https://www.cnblogs.com/jiujuan/p/14604609.html">https://www.cnblogs.com/jiujuan/p/14604609.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 单元测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单元测试 </tag>
            
            <tag> golfing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang的pprof与火焰图实战</title>
      <link href="/2021/07/18/shi-zhan/"/>
      <url>/2021/07/18/shi-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p><strong>声明：</strong>本文参考这篇文章，自己跟着做了一遍，记录一下，然后补充了火焰图的使用。</p><p><a href="https://blog.wolfogre.com/posts/go-ppof-practice/">https://blog.wolfogre.com/posts/go-ppof-practice/</a></p><p><a href="https://www.liwenzhou.com/posts/Go/performance_optimisation/#autoid-1-5-2">https://www.liwenzhou.com/posts/Go/performance_optimisation/#autoid-1-5-2</a></p><p><a href="https://blog.wolfogre.com/posts/go-ppof-practice/">https://blog.wolfogre.com/posts/go-ppof-practice/</a></p><p><a href="https://github.com/wolfogre/blog-utterances/issues/39">https://github.com/wolfogre/blog-utterances/issues/39</a></p><p><a href="https://golang2.eddycjy.com/posts/ch6/01-pprof-1/">https://golang2.eddycjy.com/posts/ch6/01-pprof-1/</a></p><p><a href="https://github.com/eddycjy/blog">https://github.com/eddycjy/blog</a></p><p><a href="https://github.com/brendangregg/FlameGraph/blob/master/README.md">https://github.com/brendangregg/FlameGraph/blob/master/README.md</a></p><p><a href="https://colobu.com/2017/03/02/a-short-survey-of-golang-pprof/">[鸟窝]-[译] Go 可视化性能分析工具</a></p><p><a href="https://www.cnblogs.com/jiujuan/p/14604609.html">https://www.cnblogs.com/jiujuan/p/14604609.html</a></p><p>代码开发上线步骤</p><ol><li><p>上线前</p><p>a. 压测：我们通过压测可以获知系统的性能，例如每秒能处理的请求数，平均响应时间，错误率等指标。这样，我们对自己服务的性能算是有个底。</p><p>b. 问题：但是压测是线下的模拟流量，如果到了线上呢？会遇到高并发、大流量，不靠谱的上下游，突发的尖峰流量等等场景，这些都是不可预知的。</p></li><li><p>上线后</p><ol><li>线上突然大量报警，接口超时，错误数增加</li><li>终极解决方案：<code>看日志</code>、<code>看监控</code>；<code>使用性能分析工具</code>分析程序的性能，找到瓶颈</li><li>临时解决方案：首先要<code>降级、限流、回滚</code>，先止损</li></ol></li><li><p>总结</p><ol><li>性能分析很重要，尤其是要统计好性能数据，出问题了，可以随时拿出来看。</li></ol></li></ol><p>根据上面内容引出了性能分析，性能分析主要关注 <code>CPU、内存、磁盘 IO、网络</code>这些指标。</p><p>在软件工程中，性能分析（performance analysis，也称为 profiling），是以收集程序运行时信息为手段研究程序行为的分析方法，是一种动态程序分析的方法。</p><p><code>profiling</code> 是指在程序执行过程中，收集能够反映程序执行状态的数据。</p><p><code>一般常规分析内容：</code></p><ol><li><strong>cpu</strong>：程序对cpu的使用情况 - 使用时长，占比等</li><li><strong>内存</strong>：程序对cpu的使用情况 - 使用时长，占比，内存泄露等。如果在往里分，程序堆、栈使用情况</li><li><strong>I/O</strong>：IO的使用情况 - 哪个程序IO占用时间比较长</li></ol><p><code>golang 程序中分析内容：</code></p><ol><li><strong>goroutine</strong>：go的协程使用情况，调用链的情况</li><li><strong>goroutine leak</strong>：goroutine泄露检查</li><li><strong>go dead lock</strong>：死锁的检测分析</li><li><strong>data race detector</strong>：数据竞争分析，其实也与死锁分析有关</li></ol><h2 id="1-2-golang-性能调试优化方法"><a href="#1-2-golang-性能调试优化方法" class="headerlink" title="1.2 golang 性能调试优化方法"></a>1.2 golang 性能调试优化方法</h2><p>比如 linux 中 cpu 性能调试，工具有 top，dstat，perf 等。</p><p>那么在 golang 中，有哪些分析方法？</p><p><strong>golang 性能调试优化方法：</strong></p><ul><li><strong>Benchmark</strong>：<strong>基准测试</strong>，对特定代码的运行时间和内存信息等进行测试</li><li><strong>Profiling</strong>：<strong>程序分析</strong>，程序的运行画像，在程序执行期间，通过采样收集的数据对程序进行分析</li><li><strong>Trace</strong>：<strong>跟踪</strong>，在程序执行期间，通过采集发生的事件数据对程序进行分析</li></ul><blockquote><p>profiling 和 trace 有啥区别？<br>profiling 分析没有时间线，trace 分析有时间线。</p></blockquote><p>在 golang 中，<code>应用方法的工具</code>呢？</p><p>这里介绍 pprof 这个 golang 工具，它可以帮助我们调试优化程序。</p><blockquote><p>它的最原始程序是 <a href="https://github.com/gperftools/gperftools">gperftools</a> - <a href="https://github.com/gperftools/gperftools，golang">https://github.com/gperftools/gperftools，golang</a> 的 pprof 是从它而来的。</p></blockquote><h1 id="2-pprof-是什么"><a href="#2-pprof-是什么" class="headerlink" title="2 pprof 是什么"></a>2 pprof 是什么</h1><p>在 Go 语言中，pprof 是用于可视化和分析性能分析数据的工具，pprof 以 profile.proto 读取分析样本的集合，并生成报告以可视化并帮助分析数据（支持文本和图形报告）。</p><p>而刚刚提到的 profile.proto 是一个 Protobuf v3 的描述文件，它描述了一组 callstack 和 symbolization 信息， 作用是统计分析的一组采样的调用栈，是很常见的 stacktrace 配置文件格式。</p><blockquote><p><strong>一句话描述</strong>：Golang<strong>自带</strong>的一款开箱即用的<strong>性能监控</strong>和<strong>分析</strong>工具。</p></blockquote><h1 id="3-pprof-作用"><a href="#3-pprof-作用" class="headerlink" title="3 pprof 作用"></a>3 pprof 作用</h1><p><img src="/2021/07/18/shi-zhan/image-20210725221402477.png" alt="pprof 作用"></p><h2 id="3-1-pprof指标采样的维度"><a href="#3-1-pprof指标采样的维度" class="headerlink" title="3.1 pprof指标采样的维度"></a>3.1 pprof指标采样的维度</h2><ol><li>CPU（profile）<ol><li>CPU Profiling：CPU 分析，按照一定的频率采集所监听的应用程序 CPU（含寄存器）的使用情况，可确定应用程序在主动消耗 CPU 周期时花费时间的位置。</li><li>报告CPU的使用情况，定位到热点（消耗CPU周期最多的）代码。默认情况下Go以100HZ的频率进行CPU采样</li></ol></li><li>Goroutine<ol><li>Goroutine Profiling： Goroutine 分析，可以对当前应用程序正在运行的 Goroutine 进行堆栈跟踪和分析。这项功能在实际排查中会经常用到，因为很多问题出现时的表象就是 Goroutine 暴增，而这时候我们要做的事情之一就是查看应用程序中的 Goroutine 正在做什么事情，因为什么阻塞了，然后再进行下一步。</li></ol></li><li>系统线程<ol><li>获取导致创建 OS 线程的 goroutine 堆栈</li></ol></li><li>堆内存/内存剖析（heap）<ol><li>Memory Profiling：内存分析，在应用程序进行堆分配时记录堆栈跟踪，用于监视当前和历史内存使用情况，以及检查内存泄漏。</li><li>包含每个 goroutine 分配大小，分配堆栈等。</li><li>每分配 runtime.MemProfileRate(默认为512K) 个字节进行一次数据采样。</li></ol></li><li>内存剖析（allocs）：报告所有内存分配历史</li><li>阻塞操作<ol><li>Block Profiling：阻塞分析，记录 Goroutine 阻塞等待同步（包括定时器通道）的位置，默认不开启，需要调用 <code>runtime.SetBlockProfileRate</code> 进行设置。</li><li>获取导致阻塞的 goroutine 堆栈(如 channel, mutex 等)，使用前需要先调用 <code>runtime.SetBlockProfileRate</code></li></ol></li><li>锁竞争<ol><li>Mutex Profiling：互斥锁分析，报告互斥锁的竞争情况，默认不开启，需要调用 <code>runtime.SetMutexProfileFraction</code> 进行设置。</li></ol></li><li>执行追踪（trace）：追踪当前应用程序的执行栈</li></ol><h3 id="CPU采样"><a href="#CPU采样" class="headerlink" title="CPU采样"></a>CPU采样</h3><p>采样对象：函数调用和它们的占用时间</p><p>采样率：100次/秒</p><p>固定值采样时间：从手动启动到手动结束</p><ul><li>操作系统：每10ms向进程发送一次SIGPROF信号</li><li>进程：每次接收到SIGPROF会记录调用栈</li><li>写缓冲：每100ms读取一次已经记录的调用栈并写入输出流</li></ul><img src="/2021/07/18/shi-zhan/image-20210801222450112.png" alt="image-20210801222450112" style="zoom:50%;"><img src="/2021/07/18/shi-zhan/image-20210801222823463.png" alt="image-20210801222823463" style="zoom: 33%;"><h3 id="Goroutine-amp-ThreadCreate采样"><a href="#Goroutine-amp-ThreadCreate采样" class="headerlink" title="Goroutine &amp; ThreadCreate采样"></a>Goroutine &amp; ThreadCreate采样</h3><p>Goroutine：记录所有用户发起且在运行中的goroutine（即入口非runtime开头的）和runtime.main的调用栈信息</p><p>ThreadCreate：记录程序创建的所有系统线程的信息</p><img src="/2021/07/18/shi-zhan/goroutine&tc.png"><h3 id="Heap（堆内存）采样"><a href="#Heap（堆内存）采样" class="headerlink" title="Heap（堆内存）采样"></a>Heap（堆内存）采样</h3><p>采样程序通过内存分配器在<code>堆上</code>分配和释放的内存，记录分配/释放的<code>大小和数量</code></p><p>采样率：每分配512KB记录一次，可在运行开头修改，1为每次分配均记录</p><p>采样时间：从程序运行开始到采样时</p><p>采样指标：alloc_space, alloc_objects, inuse_space, inuse_objects</p><p>计算方式：inuse=alloc-free</p><h3 id="Block-阻塞-amp-Mutex-锁竞争-采样"><a href="#Block-阻塞-amp-Mutex-锁竞争-采样" class="headerlink" title="Block(阻塞) &amp; Mutex(锁竞争)采样"></a>Block(阻塞) &amp; Mutex(锁竞争)采样</h3><p>阻塞操作</p><p>采样阻塞操作的次数和耗时</p><p>采样率：阻塞耗时超过阈值的才会被记录，1为每次阻塞均记录</p><p>锁竞争</p><p>采样争抢锁的次数和耗时</p><p>采样率：只记录固定比例的锁操作，1为每次加锁均记录</p><p><img src="/2021/07/18/shi-zhan/image-20210801224628156.png" alt></p><h1 id="4-pprof-使用模式"><a href="#4-pprof-使用模式" class="headerlink" title="4 pprof 使用模式"></a>4 pprof 使用模式</h1><ul><li>Report generation：报告生成</li><li>Interactive terminal use：交互式终端</li><li>Web interface：Web 界面</li></ul><h1 id="5-采样方式"><a href="#5-采样方式" class="headerlink" title="5 采样方式"></a>5 采样方式</h1><table><thead><tr><th align="center">方式名称</th><th>如何使用</th><th>优点</th><th>缺点</th><th>使用场景</th></tr></thead><tbody><tr><td align="center">runtime/pprof</td><td>手动调用【runtime.StartCPUProfile、runtime.StopCPUProfile】等<strong>API</strong>来进行数据的采集。采集程序（非 Server）的指定区块的运行数据进行分析。</td><td><strong>灵活性高</strong>、按需采集。</td><td></td><td><strong>工具型应用</strong>（比如说定制化的分析小工具、集成到公司监控系统）。这种应用运行一段时间就结束。</td></tr><tr><td align="center">net/http/pprof</td><td>通过<strong>http</strong>服务来获取Profile采样文件。 <code>import _ &quot;net/http/pprof&quot;</code>。基于 HTTP Server 运行，并且可以采集运行时数据进行分析。<code>net/http/pprof中只是使用runtime/pprof包来进行封装了一下，并在http端口上暴露出来</code></td><td><strong>简单易用</strong></td><td></td><td>在线服务（一直运行着的程序）</td></tr><tr><td align="center">go test</td><td>通过命令<code>go test -bench . -cpuprofile cpu.prof</code>来进行采集数据。</td><td><strong>针对性强</strong>、细化到函数</td><td></td><td>进行某函数的性能测试</td></tr></tbody></table><p>上面的 pprof 开启后，每隔一段时间就会采集当前程序的堆栈信息，获取函数的 cpu、内存等使用情况。通过对采样的数据进行分析，形成一个数据分析报告。</p><p>pprof 以 <a href="https://github.com/google/pprof/blob/master/proto/profile.proto">profile.proto</a> 的格式保存数据，然后根据这个数据可以生成可视化的分析报告，支持文本形式和图形形式报告。<br>profile.proto 里具体的数据格式是 <a href="https://developers.google.com/protocol-buffers">protocol buffers</a>。</p><p>那用什么方法来对数据进行分析，从而形成文本或图形报告？</p><p>用一个命令行工具 <code>go tool pprof</code> 。</p><h2 id="5-1-go-test"><a href="#5-1-go-test" class="headerlink" title="5.1 go test"></a>5.1 go test</h2><ul><li>cpu 使用分析：-cpuprofile=cpu.pprof</li><li>内存使用分析：-benchmem -memprofile=mem.pprof</li><li>block分析：-blockprofile=block.pprof</li></ul><p>运行命令采样数据：</p><pre class="line-numbers language-sh"><code class="language-sh">go test -bench=. -run=none -benchmem -memprofile=mem.pprofgo test -bench=. -run=none -blockprofile=block.pprofgo test -bench=. -run=none -benchmem -memprofile=mem.pprof -cpuprofile=cpu.pprofgo test -bench=. -run=none -benchmem -memprofile=mem.pprof -cpuprofile=cpu.pprof -blockprofile=block.pprof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-runtime-pprof"><a href="#5-2-runtime-pprof" class="headerlink" title="5.2 runtime/pprof"></a>5.2 runtime/pprof</h2><p>除了注入 http handler 和 go test 以外，我们还可以在程序中通过 pprof 所提供的 Lookup 方法来进行相关内容的采集和调用，其一共支持六种类型，分别是：goroutine、threadcreate、heap、block、mutex，代码如下：</p><p>除了注入 http handler 和 go test 以外，我们还可以在程序中通过 pprof 所提供的 Lookup 方法来进行相关内容的采集和调用，其一共支持六种类型，分别是：goroutine、threadcreate、heap、block、mutex，代码如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> LookupType <span class="token builtin">int8</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    LookupGoroutine LookupType <span class="token operator">=</span> <span class="token boolean">iota</span>    LookupThreadcreate    LookupHeap    LookupAllocs    LookupBlock    LookupMutex<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">pprofLookup</span><span class="token punctuation">(</span>lookupType LookupType<span class="token punctuation">,</span> w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> err <span class="token builtin">error</span>    <span class="token keyword">switch</span> lookupType <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> LookupGoroutine<span class="token punctuation">:</span>        p <span class="token operator">:=</span> pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"goroutine"</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> LookupThreadcreate<span class="token punctuation">:</span>        p <span class="token operator">:=</span> pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"threadcreate"</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> LookupHeap<span class="token punctuation">:</span>        p <span class="token operator">:=</span> pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"heap"</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> LookupAllocs<span class="token punctuation">:</span>        p <span class="token operator">:=</span> pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"allocs"</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> LookupBlock<span class="token punctuation">:</span>        p <span class="token operator">:=</span> pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"block"</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> LookupMutex<span class="token punctuation">:</span>        p <span class="token operator">:=</span> pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"mutex"</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> err<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们只需要对该方法进行调用就好了，其提供了 <code>io.Writer</code> 接口，也就是只要实现了对应的 Write 方法，我们可以将其写到任何支持地方去，如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token operator">...</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    runtime<span class="token punctuation">.</span><span class="token function">SetMutexProfileFraction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    runtime<span class="token punctuation">.</span><span class="token function">SetBlockProfileRate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/lookup/heap"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">pprofLookup</span><span class="token punctuation">(</span>LookupHeap<span class="token punctuation">,</span> os<span class="token punctuation">.</span>Stdout<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/lookup/threadcreate"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">pprofLookup</span><span class="token punctuation">(</span>LookupThreadcreate<span class="token punctuation">,</span> os<span class="token punctuation">.</span>Stdout<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/lookup/block"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">pprofLookup</span><span class="token punctuation">(</span>LookupBlock<span class="token punctuation">,</span> os<span class="token punctuation">.</span>Stdout<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/lookup/goroutine"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">pprofLookup</span><span class="token punctuation">(</span>LookupGoroutine<span class="token punctuation">,</span> os<span class="token punctuation">.</span>Stdout<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token boolean">_</span> <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0:6060"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，我们将采集结果写入到了控制台上，我们可以进行一下验证，调用 <code>http://127.0.0.1:6060/lookup/heap</code>，控制台输出结果如下：</p><pre class="line-numbers language-shell"><code class="language-shell">$ go run main.goheap profile: 0: 0 [0: 0] @ heap/1048576# runtime.MemStats# Alloc = 180632# TotalAlloc = 180632# Sys = 69928960# Lookups = 0...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本章节所有测试都是使用的runtime_method.go文件，子章节只会展示我的测试代码，统一用一个入口main函数。</p><p>mian函数如下</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"log"</span>    <span class="token string">"os"</span>    <span class="token string">"runtime"</span>    <span class="token string">"runtime/pprof"</span>    <span class="token string">"sync"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置最大的可同时使用的 CPU 核数。只有一个操作系统线程可供用户的Go代码使用</span>    runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">CollectCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// CollectMutex()</span>    <span class="token comment" spellcheck="true">// CollectBlock()</span>    <span class="token comment" spellcheck="true">// CollectHeap()</span>    <span class="token comment" spellcheck="true">// CollectAllocs()</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行函数方法：执行命令,runtime_method.go是我的文件名</p><pre class="line-numbers language-shell"><code class="language-shell">go run runtime_method.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果分析方式也是一样的，如下。</p><pre><code>go tool pprof cpu.prof执行命令行两件套toplist 函数名生成web页面查看web</code></pre><p>或者通过暴露http端口的方式，可以查看更多类型的图。</p><pre class="line-numbers language-shell"><code class="language-shell">go tool pprof -http=:6060 cpu.prof<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2021/07/18/shi-zhan/image-20210801183047601.png" alt="profile已经存在的文件" style="zoom:50%;"><h3 id="5-2-1-采集CPU-CPU-占用过高"><a href="#5-2-1-采集CPU-CPU-占用过高" class="headerlink" title="5.2.1 采集CPU(CPU 占用过高)"></a>5.2.1 采集CPU(CPU 占用过高)</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">CollectCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建分析文件，在当前目录下</span>    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"./cpu.prof"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"创建采集文件失败, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进行cpu数据的获取</span>    pprof<span class="token punctuation">.</span><span class="token function">StartCPUProfile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>    <span class="token keyword">defer</span> pprof<span class="token punctuation">.</span><span class="token function">StopCPUProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 执行一段有问题的代码</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">go</span> <span class="token function">do1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-2-采集内存-heap-内存占用过高"><a href="#5-2-2-采集内存-heap-内存占用过高" class="headerlink" title="5.2.2 采集内存(heap-内存占用过高)"></a>5.2.2 采集内存(heap-内存占用过高)</h3><p><code>作用：看哪些方法分配了最多的内存</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    Ki <span class="token operator">=</span> <span class="token number">1024</span>    Mi <span class="token operator">=</span> Ki <span class="token operator">*</span> Ki    Gi <span class="token operator">=</span> Ki <span class="token operator">*</span> Mi    Ti <span class="token operator">=</span> Ki <span class="token operator">*</span> Gi    Pi <span class="token operator">=</span> Ki <span class="token operator">*</span> Ti<span class="token punctuation">)</span><span class="token keyword">type</span> Mouse <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    buffer <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Mi<span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Mouse<span class="token punctuation">)</span><span class="token function">StealMem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    max <span class="token operator">:=</span> Gi    <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span> <span class="token operator">*</span> Mi <span class="token operator">&lt;</span> max <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span>buffer <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>buffer<span class="token punctuation">,</span> <span class="token punctuation">[</span>Mi<span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">CollectHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置采样率，默认每分配512*1024字节采样一次。如果设置为0则禁止采样，只能设置一次</span>    runtime<span class="token punctuation">.</span>MemProfileRate <span class="token operator">=</span> <span class="token number">512</span> <span class="token operator">*</span> <span class="token number">1024</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"./heap.prof"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"could not create heap profile: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 高的内存占用 : 有个循环会一直向 m.buffer 里追加长度为 1 MiB 的数组，直到总容量到达 1 GiB 为止，且一直不释放这些内存，这就难怪会有这么高的内存占用了。</span>    m <span class="token operator">:=</span> <span class="token operator">&amp;</span>Mouse<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">StealMem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// runtime.GC() // 执行GC，避免垃圾对象干扰</span>    <span class="token comment" spellcheck="true">// 将剖析概要信息记录到文件</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> pprof<span class="token punctuation">.</span><span class="token function">WriteHeapProfile</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"could not write heap profile: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-3-采集内存-allocs-频繁内存回收"><a href="#5-2-3-采集内存-allocs-频繁内存回收" class="headerlink" title="5.2.3 采集内存(allocs-频繁内存回收)"></a>5.2.3 采集内存(allocs-频繁内存回收)</h3><p>获取程序运行依赖，所有内存分配的历史</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ApplyMemDoNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在 golang 里，对象是使用堆内存还是栈内存，由编译器进行逃逸分析并决定，如果对象不会逃逸，便可在使用栈内存，</span>    <span class="token comment" spellcheck="true">// 但总有意外，就是对象的尺寸过大时，便不得不使用堆内存。所以这里设置申请 16 MiB 的内存就是为了避免编译器直接在栈上分配，如果那样得话就不会涉及到 GC 了。</span>    <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token operator">*</span> Mi<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">CollectAllocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置采样率，默认每分配512*1024字节采样一次。如果设置为0则禁止采样，只能设置一次</span>    runtime<span class="token punctuation">.</span>MemProfileRate <span class="token operator">=</span> <span class="token number">512</span> <span class="token operator">*</span> <span class="token number">1024</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"./allocs.prof"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"could not create memory profile: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 频繁内存回收</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        <span class="token function">ApplyMemDoNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// runtime.GC() // 执行GC，避免垃圾对象干扰</span>    <span class="token comment" spellcheck="true">// 将剖析概要信息记录到文件</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"allocs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"could not write allocs profile: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了获取程序运行过程中 GC 日志，我们需要先退出炸弹程序，再在重新启动前赋予一个环境变量，同时为了避免其他日志的干扰，使用 grep 筛选出 GC 日志查看：</p><p>由于内存的申请与释放频度是需要一段时间来统计的，所有我们保证炸弹程序已经运行了几分钟之后，再结束：</p><pre class="line-numbers language-bash"><code class="language-bash">go build runtime_method.goGODEBUG<span class="token operator">=</span>gctrace<span class="token operator">=</span>1 ./runtime_method <span class="token operator">|</span> <span class="token function">grep</span> gc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/18/shi-zhan/image-20210801181024454.png" alt="allocs执行结果"></p><p>可以看到，GC 差不多每 3 秒就发生一次，且每次 GC 都会从 16MB 清理到几乎 0MB，说明程序在不断的申请内存再释放，这是高性能 golang 程序所不允许的。</p><p>如果你希望进一步了解 golang 的 GC 日志可以查看<a href="https://blog.wolfogre.com/redirect/v3/A9DNc05mRFLA-ZPsjfPhLuZDu-oKbuLF_wQyMDE2xf8CMDfF_wIwMcUtHy8qzDsGiVTMOxzFMRIDAzwK_jrFxVoWBjtuQQYW3Dsh_cU8Bk0KxTsGzDw8Bcw8ghxKiMU">《如何监控 golang 程序的垃圾回收》</a>,为保证实验节奏，这里不做展开。</p><p>所以接下来使用 pprof 排查时，我们在乎的不是什么地方在占用大量内存，而是什么地方在不停地申请内存，这两者是有区别的。</p><img src="/2021/07/18/shi-zhan/image-20210801182209809.png" alt="image-20210801182209809" style="zoom:33%;"><h3 id="5-2-4-采集goroutine-协程泄露"><a href="#5-2-4-采集goroutine-协程泄露" class="headerlink" title="5.2.4 采集goroutine(协程泄露)"></a>5.2.4 采集goroutine(协程泄露)</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">CollectGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"./goroutine.prof"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"could not create goroutine profile: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 函数每次释放 10 个协程出去，每个协程会睡眠 30 秒再退出，而 Drink 函数又会被反复调用</span>    <span class="token comment" spellcheck="true">// 这才导致大量协程泄露，试想一下，如果释放出的协程会永久阻塞，那么泄露的协程数便会持续增加，</span>    <span class="token comment" spellcheck="true">// 内存的占用也会持续增加，那迟早是会被操作系统杀死的。</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待所有协程运行结束</span>    <span class="token comment" spellcheck="true">//time.Sleep(100 * time.Second)</span>    <span class="token keyword">if</span> err <span class="token operator">=</span> pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"goroutine"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"Can not write %s: %s"</span><span class="token punctuation">,</span> <span class="token string">"./goroutine.prof"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置最大的可同时使用的 CPU 核数。只有一个操作系统线程可供用户的Go代码使用</span>    runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// CollectCpu()</span>    <span class="token comment" spellcheck="true">// CollectMutex()</span>    <span class="token comment" spellcheck="true">// CollectBlock()</span>    <span class="token comment" spellcheck="true">// CollectHeap()</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":6060"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">CollectGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/18/shi-zhan/image-20210801190007741.png" alt="goroutine执行结果"></p><p>在调用栈上来讲，其展示顺序是自下而上的，也就是 <code>runtime.main</code> 方法调用了 <code>main.main</code> 方法，<code>main.main</code> 方法又调用了 <code>net/http.ListenAndServe</code> 方法，这里对应的也就是我们所使用的示例代码了，排查起来会非常方便。</p><p>每个调用堆栈信息用 <code>-----------</code> 分割，函数方法前的就是指标数据，像 Goroutine Profiling 展示是就是该方法占用的 goroutine 的数量。而 Heap Profiling 展示的就是占用的内存大小，如下：</p><img src="/2021/07/18/shi-zhan/image-20210801190856360.png" alt="traces使用" style="zoom: 33%;"><h3 id="5-2-5-采集mutex-锁的争用"><a href="#5-2-5-采集mutex-锁的争用" class="headerlink" title="5.2.5 采集mutex(锁的争用)"></a>5.2.5 采集mutex(锁的争用)</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">CollectMutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进行采集量的设置，否则默认关闭，若设置的值小于等于 0 也会认为是关闭。</span>    <span class="token comment" spellcheck="true">// 一般有如下方式：调用 chan（通道）、调用 sync.Mutex （同步锁）、调用 time.Sleep() 等等。</span>    runtime<span class="token punctuation">.</span><span class="token function">SetMutexProfileFraction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"./mutex.prof"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"could not create memory profile: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 这个锁由主协程 Lock，并启动子协程去 Unlock，主协程会阻塞在第二次 Lock 这儿等待子协程完成任务，</span>    <span class="token comment" spellcheck="true">// 但由于子协程足足睡眠了3秒，导致主协程等待这个锁释放足足等了一秒钟。</span>    m <span class="token operator">:=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Mutex<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将阻塞剖析概要信息记录到文件</span>    <span class="token keyword">if</span> err <span class="token operator">=</span> pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"mutex"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"Can not write %s: %s"</span><span class="token punctuation">,</span> <span class="token string">"./mutex.prof"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-6-采集block-阻塞操作"><a href="#5-2-6-采集block-阻塞操作" class="headerlink" title="5.2.6 采集block(阻塞操作)"></a>5.2.6 采集block(阻塞操作)</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">CollectBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 参数5表示，每发生1次Goroutine阻塞事件则采样一次。默认值1。</span>    runtime<span class="token punctuation">.</span><span class="token function">SetBlockProfileRate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"./block.prof"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"could not create block profile: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 不同于睡眠一秒，这里是从一个 channel 里读数据时，发生了阻塞，直到这个 channel 在一秒后才有数据读出，这就导致程序阻塞了一秒而非睡眠了一秒。</span>    <span class="token operator">&lt;-</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将阻塞剖析概要信息记录到文件</span>    <span class="token keyword">if</span> err <span class="token operator">=</span> pprof<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"block"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"Can not write %s: %s"</span><span class="token punctuation">,</span> <span class="token string">"./block.prof"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3-net-http-pprof"><a href="#5-3-net-http-pprof" class="headerlink" title="5.3 net/http/pprof"></a>5.3 net/http/pprof</h2><p>上代码</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"net/http"</span>    <span class="token boolean">_</span> <span class="token string">"net/http/pprof"</span>  <span class="token comment" spellcheck="true">// 第一步～</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 一段有问题的代码</span><span class="token keyword">func</span> <span class="token function">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> c <span class="token keyword">chan</span> <span class="token builtin">int</span>    <span class="token keyword">for</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">select</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> v <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c<span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"我是有问题的那一行，因为收不到值：%v"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行一段有问题的代码</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">go</span> <span class="token function">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1:9090"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过代码中的关键两步，执行起来就可以通过 <a href="http://127.0.0.1:9090/debug/pprof/看到对应的数据啦～">http://127.0.0.1:9090/debug/pprof/看到对应的数据啦～</a></p><p><img src="/2021/07/18/shi-zhan/image-20210726102116085.png" alt="http方式的结果"></p><h1 id="6-采样的数据内容"><a href="#6-采样的数据内容" class="headerlink" title="6 采样的数据内容"></a>6 采样的数据内容</h1><p>不管是前文哪种方式获取，都可以进行分析。这里http的方式把可以看到的信息全部都列出来了。</p><table><thead><tr><th>类型</th><th>描述</th><th>url</th></tr></thead><tbody><tr><td>allocs</td><td><strong>内</strong>存分配情况的采样信息，过去所有内存抽样情况</td><td>$host/debug/pprof/allocs?debug=1</td></tr><tr><td>blocks</td><td><strong>阻塞</strong>操作情况的采样信息，同步阻塞时程序栈跟踪的一些情况</td><td>$host/debug/pprof/block?debug=1</td></tr><tr><td>cmdline</td><td>显示程序启动<strong>命令参数</strong>及其参数</td><td></td></tr><tr><td>goroutine</td><td>显示当前所有<strong>协程</strong>的堆栈信息</td><td></td></tr><tr><td>heap</td><td><strong>堆</strong>上的内存分配情况的采样信息，活动对象的内存分配情况</td><td>$host/debug/pprof/heap?debug=1</td></tr><tr><td>mutex</td><td><strong>锁</strong>竞争情况的采样信息，互斥锁持有者的栈帧情况</td><td>$host/debug/pprof/mutex?debug=1</td></tr><tr><td>profile</td><td><strong>cpu</strong>占用情况的采样信息，点击会下载文件，cpu profile，点击时会得到一个文件，然后可以用 go tool pprof 命令进行分析</td><td>$host/debug/pprof/profile</td></tr><tr><td>threadcreate</td><td>系统<strong>线程</strong>创建情况的采样信息，创建新 OS 线程的堆栈跟踪情况</td><td>$host/debug/pprof/threadcreate?debug=1</td></tr><tr><td>trace</td><td>程序<strong>运行跟踪</strong>信息，当前程序执行的追踪情况，点击时会得到一个文件，可以用 go tool trace 命令来分析这个文件</td><td>$host/debug/pprof/trace</td></tr></tbody></table><p>通过加粗的关键字，很直观可以看到能分析到的数据。</p><p>（后文将重点根据cpu的采样信息展开命令行和图形化页面的讨论，其余项将在实战中应用）</p><h1 id="7-数据分析方式"><a href="#7-数据分析方式" class="headerlink" title="7 数据分析方式"></a>7 数据分析方式</h1><h2 id="7-1-命令行"><a href="#7-1-命令行" class="headerlink" title="7.1 命令行"></a>7.1 命令行</h2><p>核心命令：<code>go tool pprof &lt;binary&gt; &lt;source&gt;</code></p><p>binary：是应用的二进制文件，用来解析各种符号；</p><p>source：代表生成的分析数据来源，可以是<strong>本地文件</strong>（前文生成的cpu.prof），也可以是<strong>http地址</strong>（比如：<code>go tool pprof http://127.0.0.1:9090/debug/pprof/profile</code>）</p><blockquote><p>需要注意的是：较大负载的情况下（要不就故意写故障代码，或者就模拟访问压力）获取的有效数据更有意义，如果处于空闲状态，得到的结果可能意义不大</p></blockquote><p>例子如下</p><pre class="line-numbers language-bash"><code class="language-bash">go build -o havlak1 havlak1.go go tool pprof havlak1 havlak1.prof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过工具go tool pprof打开URL或文件后，会显示一个 (pprof)提示符，你可以使用以下命令：</p><table><thead><tr><th>命令</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>gv</td><td>[focus]</td><td>将当前概要文件以图形化和层次化的形式显示出来。当没有任何参数时，在概要文件中的所有采样都会被显示如果指定了focus参数，则只显示调用栈中有名称与此参数相匹配的函数或方法的采样。 focus参数应该是一个正则表达式需要dot、gv命令，执行下面的命令安装：Shell12sudo apt-<strong>get</strong> install graphvizsudo apt-<strong>get</strong> install gv</td></tr><tr><td><strong>web</strong></td><td>[focus]</td><td>生成 svg 热点图片，与gv命令类似，web命令也会用图形化的方式来显示概要文件。但不同的是，web命令是在一个Web浏览器中显示它</td></tr><tr><td><strong>list</strong></td><td>[routine_regexp]</td><td>列出名称与参数 routine_regexp代表的正则表达式相匹配的函数或方法的相关源代码</td></tr><tr><td>weblist</td><td>[routine_regexp]</td><td>在Web浏览器中显示与list命令的输出相同的内容。它与list命令相比的优势是，在我们点击某行源码时还可以显示相应的汇编代码</td></tr><tr><td><strong>top[N]</strong></td><td>[–cum]</td><td>top命令可以以本地采样计数为顺序列出函数或方法及相关信息如果存在标记 –cum则以累积采样计数为顺序默认情况下top命令会列出前10项内容。但是如果在top命令后面紧跟一个数字，那么其列出的项数就会与这个数字相同。默认显示 flat 前10的函数调用，可使用 -cum 以 cum 排序</td></tr><tr><td>traces</td><td></td><td>打印所有采集的样本</td></tr><tr><td>disasm</td><td>[routine_regexp]</td><td>显示名称与参数 routine_regexp相匹配的函数或方法的反汇编代码。并且，在显示的内容中还会标注有相应的采样计数</td></tr><tr><td>callgrind</td><td>[filename]</td><td>利用callgrind工具生成统计文件。在这个文件中，说明了程序中函数的调用情况。如果未指定 filename参数，则直接调用kcachegrind工具。kcachegrind可以以可视化的方式查看callgrind工具生成的统计文件</td></tr><tr><td>help</td><td></td><td>显示帮助</td></tr><tr><td>quit</td><td></td><td>退出</td></tr></tbody></table><p>开始分析前文生成的cpu.prof:</p><pre><code>go tool pprof cpu.prof</code></pre><p><img src="/2021/07/18/shi-zhan/image-20210726103631287.png" alt="go tool pprof cpu.prof"></p><table><thead><tr><th>类型</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>flat</td><td>该函数占用CPU的耗时，不包含当前函数调用其它函数并等待返回的时间</td><td>selectnbrecv占用CPU的耗时是12.29s</td></tr><tr><td>flat%</td><td>该函数占用CPU的耗时的百分比</td><td>selectnbrecv耗时：12.29s，cpu总耗时：29.14，12.29/29.14=42.18</td></tr><tr><td>sum%</td><td>top命令中排在它上面的函数以及本函数flat%之和</td><td>chanrecv：42.18%+30.47% = 72.65%</td></tr><tr><td>cum</td><td>当前函数加上该函数调用之前的累计CPU耗时，该指标包含子函数耗时</td><td>chanrecv：8.88+0.54=9.42</td></tr><tr><td>cum%</td><td>当前函数加上该函数调用之前的累计CPU耗时的百分比</td><td>9.42/29.14=32.33%</td></tr><tr><td>最后一列</td><td>当前函数名称</td><td>-</td></tr></tbody></table><p><code>上面的命令解析</code></p><p>发现do函数有点问题。此时通过命令：<strong>list funcName</strong>，来进行查看具体的位置</p><p><img src="/2021/07/18/shi-zhan/image-20210726104115967.png" alt="web"></p><blockquote><p>1.在前文的对话框中继续输入：<strong>web</strong>。即可生成pprof001.svg的页面。</p></blockquote><blockquote><p>2.执行命令：<code>go tool pprof -pdf cpu.prof</code>,会生成profile001.pdf的pdf文件。(参数可选text、pdf、svg)，不管哪种形式，都会得到以下图片：</p></blockquote><p><img src="/2021/07/18/shi-zhan/image-20210726104221828.png" alt="web生成的图片"></p><h2 id="7-2-可视化界面方式"><a href="#7-2-可视化界面方式" class="headerlink" title="7.2 可视化界面方式"></a>7.2 可视化界面方式</h2><p>执行命令：<code>go tool pprof -http=:6060 cpu.prof</code></p><p><img src="/2021/07/18/shi-zhan/image-20210726105437969.png" alt="http方式"></p><img src="/2021/07/18/shi-zhan/image-20210726105651670.png" alt="汇总" style="zoom:33%;"><ul><li>Top （同前文gdb交互页面的top命令）</li></ul><p><img src="/2021/07/18/shi-zhan/image-20210726110036404.png" alt="top"></p><ul><li>Graph（同前文gdb交互页面的web命令）</li></ul><img src="/2021/07/18/shi-zhan/image-20210726105527673.png" style="zoom: 33%;"><ul><li><p>Flame Graph（火焰图）</p><p>这里的颜色是随机分布的，只是看起来像火焰。</p><p>调用顺序<strong>由上到下</strong>，每一块代表一个函数，越大代表占用 CPU 的时间更长。同时它也可以支持点击块深入进行分析。</p></li></ul><p><img src="/2021/07/18/shi-zhan/image-20210726105743023.png" alt="Flame Graph"></p><ul><li>Peek（详细=树结构）</li></ul><p><img src="/2021/07/18/shi-zhan/image-20210726105837331.png" alt="peek"></p><ul><li>Source（同前文gdb交互页面的list FuncName命令）</li></ul><p><img src="/2021/07/18/shi-zhan/image-20210726105919086.png" alt="source"></p><ul><li>Disassemble</li></ul><p><img src="/2021/07/18/shi-zhan/image-20210726105956501.png" alt="image-20210726105956501"></p><h1 id="8-数据分析实战"><a href="#8-数据分析实战" class="headerlink" title="8 数据分析实战"></a>8 数据分析实战</h1><h2 id="8-1-排查套路"><a href="#8-1-排查套路" class="headerlink" title="8.1 排查套路"></a>8.1 排查套路</h2><h3 id="8-1-1-套路1"><a href="#8-1-1-套路1" class="headerlink" title="8.1.1 套路1"></a>8.1.1 套路1</h3><p>这里先说一下排查套路。</p><blockquote><p>第一步：进入排除对应的gdb交互。</p></blockquote><pre><code>go tool pprof http://localhost:6060/debug/pprof/&#123;填上你想查看的内容&#125;</code></pre><p>内容关键字：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>allocs</td><td><strong>内</strong>存分配情况的采样信息</td></tr><tr><td>blocks</td><td><strong>阻塞</strong>操作情况的采样信息</td></tr><tr><td>cmdline</td><td>显示程序启动<strong>命令参数</strong>及其参数</td></tr><tr><td>goroutine</td><td>显示当前所有<strong>协程</strong>的堆栈信息</td></tr><tr><td>heap</td><td><strong>堆</strong>上的内存分配情况的采样信息</td></tr><tr><td>mutex</td><td><strong>锁</strong>竞争情况的采样信息</td></tr><tr><td>profile</td><td><strong>cpu</strong>占用情况的采样信息，点击会下载文件</td></tr><tr><td>threadcreate</td><td>系统<strong>线程</strong>创建情况的采样信息</td></tr><tr><td>trace</td><td>程序<strong>运行跟踪</strong>信息</td></tr></tbody></table><blockquote><p>第二步：三联招，top-&gt;list FuncName-&gt;web</p></blockquote><p>通过占用比分析，查看具体代码行数，看大图确认。</p><blockquote><p>第三步：解决问题。</p></blockquote><p>（细心的同学可能会发现没有对trace进行分析，这个请期待《一看就懂系列之Golang的trace》）</p><h3 id="8-1-2-套路2-推荐"><a href="#8-1-2-套路2-推荐" class="headerlink" title="8.1.2 套路2-推荐"></a>8.1.2 套路2-推荐</h3><p>将其重新运行起来，然后在其它窗口执行下述命令：</p><pre class="line-numbers language-shell"><code class="language-shell">wget http://127.0.0.1:6060/debug/pprof/profile   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认需要等待 30 秒，执行完毕后可在当前目录下发现采集的文件 profile，针对可视化界面我们有两种方式可进行下一步分析：</p><p>该命令将在所指定的端口号运行一个 PProf 的分析用的站点。</p><pre class="line-numbers language-shell"><code class="language-shell">go tool pprof -http=:6001 profile <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-2-背景说明"><a href="#8-2-背景说明" class="headerlink" title="8.2 背景说明"></a>8.2 背景说明</h2><p>本章节使用WOLFOGRE的文章进行实践。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone github.com/wolfogre/go-pprof-practice<span class="token function">cd</span> <span class="token variable">$GOPATH</span>/src/github.com/wolfogre/go-pprof-practicego mod initgo mod tidygo mod downloadgo build./go-pprof-practice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后注意查看一下资源是否吃紧，机器是否还能扛得住，坚持一分钟，如果确认没问题，咱们再进行下一步。</p><p><a href="http://localhost:6060/debug/pprof/"><br>http://localhost:6060/debug/pprof/</a></p><p><img src="file:///Users/bytedance/MyBlog/source/_posts/%E5%AE%9E%E6%88%98/image-20210801203418974.png?lastModify=1627827194" alt="image-20210801203418974"></p><h2 id="8-3-排查-CPU-占用过高"><a href="#8-3-排查-CPU-占用过高" class="headerlink" title="8.3 排查 CPU 占用过高"></a>8.3 排查 CPU 占用过高</h2><p>我们首先通过活动监视器（或任务管理器、top 命令，取决于你的操作系统和你的喜好），查看一下炸弹程序的 CPU 占用：</p><img src="/2021/07/18/shi-zhan/image-20210801204540416.png" alt="image-20210801204540416" style="zoom:50%;"><pre class="line-numbers language-shell"><code class="language-shell">wget http://localhost:6060/debug/pprof/profilego tool pprof -http=:8080 profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/18/shi-zhan/image-20210801213119054.png" alt></p><img src="/2021/07/18/shi-zhan/image-20210801211815133.png" alt="image-20210801211815133" style="zoom: 33%;"><p>很明显，CPU 占用过高是 <code>github.com/wolfogre/go-pprof-practice/animal/felidae/tiger.(*Tiger).Eat</code> 造成的。</p><p>可以看到，是第 24 行那个一百亿次空循环占用了大量 CPU 时间，至此，问题定位成功！</p><img src="/2021/07/18/shi-zhan/image-20210801213511656.png" alt="image-20210801213511656" style="zoom:33%;"><p>接下来有一个扩展操作：图形化显示调用栈信息，这很酷，但是需要你事先在机器上安装 <code>graphviz</code>，大多数系统上可以轻松安装它：</p><pre class="line-numbers language-shell"><code class="language-shell">brew install graphviz # for macosapt install graphviz # for ubuntuyum install graphviz # for centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此，这一小节使用 pprof 定位 CPU 占用的实验就结束了，你需要输入 <code>exit</code> 退出 pprof 的交互式终端。</p><p>为了方便进行后面的实验，我们修复一下这个问题，不用太麻烦，注释掉相关代码即可：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Tiger<span class="token punctuation">)</span> <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"eat"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//loop := 10000000000</span>    <span class="token comment" spellcheck="true">//for i := 0; i &lt; loop; i++ &amp;#123;</span>    <span class="token comment" spellcheck="true">//    // do nothing</span>    <span class="token comment" spellcheck="true">//&amp;#125;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后修复问题的的方法都是注释掉相关的代码，不再赘述。你可能觉得这很粗暴，但要知道，这个实验的重点是如何使用 pprof 定位问题，我们不需要花太多时间在改代码上。</p><h2 id="8-4-排查内存占用过高"><a href="#8-4-排查内存占用过高" class="headerlink" title="8.4 排查内存占用过高"></a>8.4 排查内存占用过高</h2><p>重新编译炸弹程序，再次运行，可以看到 CPU 占用率已经下来了，但是内存的占用率仍然很高：</p><img src="/2021/07/18/shi-zhan/image-20210801213859734.png" alt="image-20210801213859734" style="zoom: 50%;"><p><img src="/2021/07/18/shi-zhan/image-20210801214029301.png" alt="image-20210801214029301"></p><p>可以看到这次出问题的地方在 <code>github.com/wolfogre/go-pprof-practice/animal/muridae/mouse.(*Mouse).Steal</code></p><p>注释代码就可以了</p><table><thead><tr><th>选项名</th><th>作用</th></tr></thead><tbody><tr><td>alloc_objects</td><td>分析应用程序的内存临时分配情况</td></tr><tr><td>alloc_space</td><td>查看每个函数分配的内存空间大小</td></tr><tr><td>inuse_space</td><td>分析应用程序的常驻内存占用情况</td></tr><tr><td>inuse_objects</td><td>查看每个函数所分配的对象数量</td></tr></tbody></table><p>执行该命令后，能够很快的拉取到其结果，因为它不需要像 CPU Profiling 做采样等待，这里需要注意的一点是 <code>Type</code> 这一个选项，你可以看到它默认显示的是 <code>inuse_space</code>，实际上可以针对多种内存概况进行分析，常用的类别如下：</p><ul><li>inuse_space：分析应用程序的常驻内存占用情况。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">⋊> ~/testpprof go tool pprof -inuse_space http://localhost:6060/debug/pprof/heap                                                                                                              Fetching profile over HTTP from http://localhost:6060/debug/pprof/heapSaved profile in /Users/xxx/pprof/pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.003.pb.gzType: inuse_spaceTime: Aug 1, 2021 at 9:41pm (CST)Entering interactive mode (type "help" for commands, "o" for options)(pprof)(pprof)(pprof) topShowing nodes accounting for 1GB, 100% of 1GB total      flat  flat%   sum%        cum   cum%       1GB   100%   100%        1GB   100%  github.com/wolfogre/go-pprof-practice/animal/muridae/mouse.(*Mouse).Steal         0     0%   100%        1GB   100%  github.com/wolfogre/go-pprof-practice/animal/muridae/mouse.(*Mouse).Live         0     0%   100%        1GB   100%  main.main         0     0%   100%        1GB   100%  runtime.main(pprof) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>alloc_objects：分析应用程序的内存临时分配情况。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">⋊> ~/testpprof go tool pprof -alloc_objects http://localhost:6060/debug/pprof/heap                                                                                                            Fetching profile over HTTP from http://localhost:6060/debug/pprof/heapSaved profile in /Users/xxx/pprof/pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.004.pb.gzType: alloc_objectsTime: Aug 1, 2021 at 9:43pm (CST)Entering interactive mode (type "help" for commands, "o" for options)(pprof)(pprof) topShowing nodes accounting for 51, 100% of 51 total      flat  flat%   sum%        cum   cum%        41 80.39% 80.39%         41 80.39%  github.com/wolfogre/go-pprof-practice/animal/canidae/dog.(*Dog).Run (inline)        10 19.61%   100%         10 19.61%  github.com/wolfogre/go-pprof-practice/animal/muridae/mouse.(*Mouse).Steal         0     0%   100%         41 80.39%  github.com/wolfogre/go-pprof-practice/animal/canidae/dog.(*Dog).Live         0     0%   100%         10 19.61%  github.com/wolfogre/go-pprof-practice/animal/muridae/mouse.(*Mouse).Live         0     0%   100%         51   100%  main.main         0     0%   100%         51   100%  runtime.main(pprof)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外还有 inuse_objects 和 alloc_space 类别，分别对应查看每个函数所分别的对象数量和查看分配的内存空间大小，具体可根据情况选用。</p><h2 id="8-5-排查频繁内存回收"><a href="#8-5-排查频繁内存回收" class="headerlink" title="8.5 排查频繁内存回收"></a>8.5 排查频繁内存回收</h2><p>你应该知道，频繁的 GC 对 golang 程序性能的影响也是非常严重的。虽然现在这个炸弹程序内存使用量并不高，但这会不会是频繁 GC 之后的假象呢？</p><p>为了获取程序运行过程中 GC 日志，我们需要先退出炸弹程序，再在重新启动前赋予一个环境变量，同时为了避免其他日志的干扰，使用 grep 筛选出 GC 日志查看：</p><pre class="line-numbers language-bash"><code class="language-bash">GODEBUG<span class="token operator">=</span>gctrace<span class="token operator">=</span>1 ./go-pprof-practice <span class="token operator">|</span> <span class="token function">grep</span> gc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>日志输出如下：</p><img src="/2021/07/18/shi-zhan/4a500684e36566cc74cef1e69b4898c99dfb008f3293f3892ad64990e2c62283.jpg" alt style="zoom:50%;"><p>可以看到，GC 差不多每 3 秒就发生一次，且每次 GC 都会从 16MB 清理到几乎 0MB，说明程序在不断的申请内存再释放，这是高性能 golang 程序所不允许的。</p><p>如果你希望进一步了解 golang 的 GC 日志可以查看<a href="https://blog.wolfogre.com/redirect/v3/A9DNc05mRFLA-ZPsjfPhLuZDu-oKbuLF_wQyMDE2xf8CMDfF_wIwMcUtHy8qzDsGiVTMOxzFMRIDAzwK_jrFxVoWBjtuQQYW3Dsh_cU8Bk0KxTsGzDw8Bcw8ghxKiMU">《如何监控 golang 程序的垃圾回收》</a>,为保证实验节奏，这里不做展开。</p><p>所以接下来使用 pprof 排查时，我们在乎的不是什么地方在占用大量内存，而是什么地方在不停地申请内存，这两者是有区别的。</p><p>由于内存的申请与释放频度是需要一段时间来统计的，所有我们保证炸弹程序已经运行了几分钟之后，再运行命令：</p><pre class="line-numbers language-bash"><code class="language-bash">go tool pprof http://localhost:6060/debug/pprof/allocs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样使用 top、list、web 大法：</p><img src="/2021/07/18/shi-zhan/7c0bc1cc6839e904865d5c20e363a2876aa1d99076bfdce81e439fbbde4cc42f.png" alt="image" style="zoom:50%;"><p><img src="/2021/07/18/shi-zhan/087bc92dffda268e29817ccdfd2f61c94a0a1b7e74298a00c8b568b07db1a3b3.png" alt="image"></p><p>可以看到 <code>github.com/wolfogre/go-pprof-practice/animal/canidae/dog.(*Dog).Run</code> 会进行无意义的内存申请，而这个函数又会被频繁调用，这才导致程序不停地进行 GC:</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Dog<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"run"</span><span class="token punctuation">)</span>    <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token operator">*</span> constant<span class="token punctuation">.</span>Mi<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里有个小插曲，你可尝试一下将 <code>16 * constant.Mi</code> 修改成一个较小的值，重新编译运行，会发现并不会引起频繁 GC，原因是在 golang 里，对象是使用堆内存还是栈内存，由编译器进行逃逸分析并决定，如果对象不会逃逸，便可在使用栈内存，但总有意外，就是对象的尺寸过大时，便不得不使用堆内存。所以这里设置申请 16 MiB 的内存就是为了避免编译器直接在栈上分配，如果那样得话就不会涉及到 GC 了。</p><p>我们同样注释掉问题代码，重新编译执行，可以看到这一次，程序的 GC 频度要低很多，以至于短时间内都看不到 GC 日志了：</p><p><img src="/2021/07/18/shi-zhan/32e5e14a2d2000367e988242fb463d8ae809d44fac7093c5a9b06e39ecb81370.jpg" alt="image"></p><h2 id="8-6-排查协程泄露"><a href="#8-6-排查协程泄露" class="headerlink" title="8.6 排查协程泄露"></a>8.6 排查协程泄露</h2><p>由于 golang 自带内存回收，所以一般不会发生内存泄露。但凡事都有例外，在 golang 中，协程本身是可能泄露的，或者叫协程失控，进而导致内存泄露。</p><p>我们在浏览器里可以看到，此时程序的协程数已经多达 106 条：</p><p><img src="/2021/07/18/shi-zhan/a8e2b63a63274980eecbac63f848356039f719559e4664e8937f271403aa5d75.jpg" alt="image"></p><p>虽然 106 条并不算多，但对于这样一个小程序来说，似乎还是不正常的。为求安心，我们再次是用 pprof 来排查一下：</p><pre class="line-numbers language-bash"><code class="language-bash">go tool pprof http://localhost:6060/debug/pprof/goroutine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样是 top、list、web 大法：</p><p><img src="/2021/07/18/shi-zhan/75512a296f062e71f29251273f8496ea5deedcb9f104b99342f8dccb9bb1277e.png" alt="image"></p><p><img src="/2021/07/18/shi-zhan/6bbba6ec436951c6857ba231dcb14cefce7133d6833ece711230264e2bd9ce9c.png" alt="image"></p><p>可能这次问题藏得比较隐晦，但仔细观察还是不难发现，问题在于 <code>github.com/wolfogre/go-pprof-practice/animal/canidae/wolf.(*Wolf).Drink</code> 在不停地创建没有实际作用的协程：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>Wolf<span class="token punctuation">)</span> <span class="token function">Drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"drink"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，Drink 函数每次回释放 10 个协程出去，每个协程会睡眠 30 秒再退出，而 Drink 函数又会被反复调用，这才导致大量协程泄露，试想一下，如果释放出的协程会永久阻塞，那么泄露的协程数便会持续增加，内存的占用也会持续增加，那迟早是会被操作系统杀死的。</p><p>我们注释掉问题代码，重新编译运行可以看到，协程数已经降到 4 条了：</p><p><img src="/2021/07/18/shi-zhan/cd7e95c42e61bcd16d65ea7892adb09b668b62b9f2c47966982a6e779a3a8917.jpg" alt="image"></p><h2 id="8-7-排查锁的争用"><a href="#8-7-排查锁的争用" class="headerlink" title="8.7 排查锁的争用"></a>8.7 排查锁的争用</h2><p>到目前为止，我们已经解决这个炸弹程序的所有资源占用问题，但是事情还没有完，我们需要进一步排查那些会导致程序运行慢的性能问题，这些问题可能并不会导致资源占用，但会让程序效率低下，这同样是高性能程序所忌讳的。</p><p>我们首先想到的就是程序中是否有不合理的锁的争用，我们倒一倒，回头看看上一张图，虽然协程数已经降到 4 条，但还显示有一个 mutex 存在争用问题。</p><p>相信到这里，你已经触类旁通了，无需多言，开整。</p><pre class="line-numbers language-bash"><code class="language-bash">go tool pprof http://localhost:6060/debug/pprof/mutex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样是 top、list、web 大法：</p><p><img src="/2021/07/18/shi-zhan/7484245a189adcd85181806fe1e380e6c043f0188d0d7949448819b3f55ce20f.jpg" alt="image"></p><p><img src="/2021/07/18/shi-zhan/4413eeb48e86038a581ee76b53476099c026a1e1be5a8dc7f4b8f88a46711d3d.png" alt="image"></p><p>可以看出来这问题出在 <code>github.com/wolfogre/go-pprof-practice/animal/canidae/wolf.(*Wolf).Howl</code>。但要知道，在代码中使用锁是无可非议的，并不是所有的锁都会被标记有问题，我们看看这个有问题的锁那儿触雷了。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>Wolf<span class="token punctuation">)</span> <span class="token function">Howl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"howl"</span><span class="token punctuation">)</span>    m <span class="token operator">:=</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">.</span>Mutex<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这个锁由主协程 Lock，并启动子协程去 Unlock，主协程会阻塞在第二次 Lock 这儿等待子协程完成任务，但由于子协程足足睡眠了一秒，导致主协程等待这个锁释放足足等了一秒钟。虽然这可能是实际的业务需要，逻辑上说得通，并不一定真的是性能瓶颈，但既然它出现在我写的“炸弹”里，就肯定不是什么“业务需要”啦。</p><p>所以，我们注释掉这段问题代码，重新编译执行，继续。</p><h2 id="8-8-排查阻塞操作"><a href="#8-8-排查阻塞操作" class="headerlink" title="8.8 排查阻塞操作"></a>8.8 排查阻塞操作</h2><p>好了，我们开始排查最后一个问题。</p><p>在程序中，除了锁的争用会导致阻塞之外，很多逻辑都会导致阻塞。</p><p><img src="/2021/07/18/shi-zhan/d830dc8a7323e7106d05857e97ceed34541212f47cb30071fe4a67ff8ab15aeb.jpg" alt="image"></p><p>可以看到，这里仍有 2 个阻塞操作，虽然不一定是有问题的，但我们保证程序性能，我们还是要老老实实排查确认一下才对。</p><pre class="line-numbers language-bash"><code class="language-bash">go tool pprof http://localhost:6060/debug/pprof/block<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>top、list、web，你懂得。</p><p><img src="/2021/07/18/shi-zhan/1f2e7e8ecc6f6ee7e0f6f1890a8b3d0293ba2b52be3eb1ac1df15d2d169029f7.jpg" alt="image"></p><p><img src="/2021/07/18/shi-zhan/12ac6115ebdee8b2e1217e3d47442298d714f2e3bd61b2132911ba694dabc615.png" alt="image"></p><p>可以看到，阻塞操作位于 <code>github.com/wolfogre/go-pprof-practice/animal/felidae/cat.(*Cat).Pee</code>：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cat<span class="token punctuation">)</span> <span class="token function">Pee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"pee"</span><span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你应该可以看懂，不同于睡眠一秒，这里是从一个 channel 里读数据时，发生了阻塞，直到这个 channel 在一秒后才有数据读出，这就导致程序阻塞了一秒而非睡眠了一秒。</p><p>这里有个疑点，就是上文中是可以看到有两个阻塞操作的，但这里只排查出了一个，我没有找到其准确原因，但怀疑另一个阻塞操作是程序监听端口提供 porof 查询时，涉及到 IO 操作发生了阻塞，即阻塞在对 HTTP 端口的监听上，但我没有进一步考证。</p><p>不管怎样，恭喜你完整地完成了这个实验。</p><h1 id="9-代码优化建议"><a href="#9-代码优化建议" class="headerlink" title="9 代码优化建议"></a>9 代码优化建议</h1><p>以下是一些从其它项目借鉴或者自己总结的实践经验，它们只是建议，而不是准则，实际项目中应该以性能分析数据来作为优化的参考，避免过早优化。</p><ol><li>对频繁分配的小对象，使用 <a href="https://golang.org/pkg/sync/#Pool">sync.Pool</a> 对象池避免分配</li><li>自动化的 DeepCopy 是非常耗时的，其中涉及到反射，内存分配，容器(如 map)扩展等，大概比手动拷贝慢一个数量级</li><li>用 atomic.Load/StoreXXX，atomic.Value, sync.Map 等代替 Mutex。(优先级递减)</li><li>使用高效的第三方库，如用<a href="https://github.com/valyala/fasthttp">fasthttp</a>替代 net/http</li><li>在开发环境加上<code>-race</code>编译选项进行竞态检查</li><li>在开发环境开启 net/http/pprof，方便实时 pprof</li><li>将所有外部IO(网络IO，磁盘IO)做成异步</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.cn/post/6844904079525675016#heading-14">一看就懂系列之Golang的pprof</a></p><p><a href="https://golang2.eddycjy.com/posts/ch6/01-pprof-1/#611-pprof-%E6%98%AF%E4%BB%80%E4%B9%88">煎鱼-Go 大杀器之性能剖析 PProf（上）</a></p><p><a href="https://blog.gmem.cc/go-program-profiling">Go应用性能剖析</a></p><p><a href="https://blog.wolfogre.com/posts/go-ppof-practice/#%E5%AE%9E%E9%AA%8C%E5%87%86%E5%A4%87">[WOLFOGRE’S BLOG]golang pprof 实战</a></p><p><a href="https://qcrao.com/2019/11/10/dive-into-go-pprof/#runtime-pprof">码农桃花源-深度解密Go语言之pprof</a></p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Goland配置选中变量颜色</title>
      <link href="/2021/07/14/goland-pei-zhi-xuan-zhong-bian-liang-yan-se/"/>
      <url>/2021/07/14/goland-pei-zhi-xuan-zhong-bian-liang-yan-se/</url>
      
        <content type="html"><![CDATA[<h2 id="设置选中变量颜色"><a href="#设置选中变量颜色" class="headerlink" title="设置选中变量颜色"></a>设置选中变量颜色</h2><p>相同名字的也会变颜色</p><p><img src="/2021/07/14/goland-pei-zhi-xuan-zhong-bian-liang-yan-se/identifier_config.png" alt="identifier_config"></p><h2 id="设置选中代码块颜色"><a href="#设置选中代码块颜色" class="headerlink" title="设置选中代码块颜色"></a>设置选中代码块颜色</h2><p><img src="/2021/07/14/goland-pei-zhi-xuan-zhong-bian-liang-yan-se/selection_bk.png" alt="selection_bk"></p>]]></content>
      
      
      <categories>
          
          <category> Goland </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo结合matery主题搭建博客总结</title>
      <link href="/2020/04/24/hexo-jie-he-matery-zhu-ti-da-jian-bo-ke-zong-jie/"/>
      <url>/2020/04/24/hexo-jie-he-matery-zhu-ti-da-jian-bo-ke-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><h2 id="闪烁之狐的博客"><a href="#闪烁之狐的博客" class="headerlink" title="闪烁之狐的博客"></a>闪烁之狐的博客</h2><ul><li><a href="https://blinkfox.github.io/">https://blinkfox.github.io/</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></li><li><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-24">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-24</a></li></ul><h2 id="洪卫博客"><a href="#洪卫博客" class="headerlink" title="洪卫博客"></a>洪卫博客</h2><ul><li><a href="https://sunhwee.com/">https://sunhwee.com/</a></li><li><a href="https://github.com/shw2018/hexo-blog-fly/">https://github.com/shw2018/hexo-blog-fly/</a></li><li><a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-22">https://sunhwee.com/posts/6e8839eb.html#toc-heading-22</a></li></ul><h2 id="Hexo官网"><a href="#Hexo官网" class="headerlink" title="Hexo官网"></a>Hexo官网</h2><ul><li><a href="https://hexo.io/zh-cn/docs/asset-folders">https://hexo.io/zh-cn/docs/asset-folders</a></li></ul><h2 id="Hexo搭建教程"><a href="#Hexo搭建教程" class="headerlink" title="Hexo搭建教程"></a>Hexo搭建教程</h2><ul><li><a href="https://blog.csdn.net/Mculover666/article/details/102871618">https://blog.csdn.net/Mculover666/article/details/102871618</a></li></ul><h1 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h1><h2 id="把主页的中文名换名字"><a href="#把主页的中文名换名字" class="headerlink" title="把主页的中文名换名字"></a>把主页的中文名换名字</h2><p>进入主题目录<code>/themes/hexo-theme-matery/</code>，打开<code>_config.yml</code>文件，修改为</p><img src="/2020/04/24/hexo-jie-he-matery-zhu-ti-da-jian-bo-ke-zong-jie/menu.png" alt="menu" style="zoom: 67%;"><p><code>/MyBlog/themes/hexo-theme-matery-develop/languages/</code>中，可以改变英文和中文的映射。</p><h2 id="添加新菜单并实现新菜单的文章归类"><a href="#添加新菜单并实现新菜单的文章归类" class="headerlink" title="添加新菜单并实现新菜单的文章归类"></a>添加新菜单并实现新菜单的文章归类</h2><p><a href="https://www.cnblogs.com/codebook/p/10312965.html">https://www.cnblogs.com/codebook/p/10312965.html</a></p><p><strong>1.添加收藏夹菜单，新建一个页面，命名为 favorite，命令如下：</strong></p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page favorite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h2><p>然后就可以看到在source下多了一个favorite的文件夹，里面有一个index.md文件</p><p><strong>2.在菜单中添加链接。编辑主题的 <code>_config.yml</code> ，在 <code>menu</code> 中添加如下代码:</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">page</span><span class="token punctuation">:</span> favorite    <span class="token key atrule">directory</span><span class="token punctuation">:</span> favorite/    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>star<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>3. 如果你用的时中文，即你使用的语言是 zh-CN，那么你就需要在themes主题下找到你安装的主题里找到languages文件夹，里面有个zh-CN.yml，</strong></p><p><strong>用编辑器打开这个文件，添加favorite对应的中文翻译</strong></p><pre class="line-numbers language-bash"><code class="language-bash">favorite: 收藏夹<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大功告成！！此时你已经有了一个新的菜单favorite，你可以到source目录下面找到一个favorite文件夹里面有个index.md，你可以按需修改这个index.md文件。</p><p><strong>4.如何将文章归类到这个新建的菜单下面呢？</strong></p><p> 如果你想在这个新建的菜单favorite下面实现文章的归类，而不是只显示单一的index.md中的内容，那么你需要做以下修改：</p><p>4.1 回到第2步，编辑<code>主题下的_config.yml,</code> 找到menu将新添加的菜单favorite修改为：</p><pre class="line-numbers language-yaml"><code class="language-yaml">// 不做文章归类新建菜单 favorite <span class="token punctuation">-</span> <span class="token key atrule">page</span><span class="token punctuation">:</span> favorite    <span class="token key atrule">directory</span><span class="token punctuation">:</span> favorite/    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>star// 做文章归类新建菜单 favorite  <span class="token punctuation">-</span> <span class="token key atrule">page</span><span class="token punctuation">:</span> favorite    <span class="token key atrule">directory</span><span class="token punctuation">:</span> categories/favorite    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>star<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.2 在写文章时，头部增加一个favorite分类就行了。</p><pre class="line-numbers language-bash"><code class="language-bash">// 注意格式，不同的主题书写格式稍有差异---title: abccategories:- favoritetags:---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p><strong>1. post</strong></p><p>当你每一次使用代码</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new XXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><p><code>Hexo</code>有三种默认布局：<code>post</code>、<code>page</code>和<code>draft</code>，</p><p>它们分别对应不同的路径，而您自定义的其他布局和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。</p><p>而new这个命令其实是：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只不过这个<code>layout</code>默认是<code>post</code>罢了。</p><p><strong>2. draft</strong></p><p><code>draft</code>是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new draft newdraft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样会在<code>source/_drafts</code>中新建一个<code>newdraft.md</code>文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><pre class="line-numbers language-bash"><code class="language-bash">hexo server --draft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到<code>post</code>中，</p><pre class="line-numbers language-bash"><code class="language-bash">hexo publish draft newdraft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就会自动把<code>newdraft.md</code>发送到<code>post</code>中。</p><p><strong>3. page</strong></p><p>如果你想另起一页，那么可以使用</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page newpage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>系统会自动给你在<code>source</code>文件夹下创建一个<code>newpage</code>文件夹，以及<code>newpage</code>文件夹中的<code>index.md</code>，这样你访问的<code>newpage</code>对应的链接就是<a href="http://xxx.xxx/newpage">http://xxx.xxx/newpage</a></p><p><strong>4. 相关命令</strong></p><p><code>hexo clean</code>（清除生成文件）</p><p><code>hexo g</code>（生成网页）</p><p><code>hexo s</code>（本地预览）</p><p><code>hexo d</code>（部署）</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo generatehexo deployhexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图片相关"><a href="#图片相关" class="headerlink" title="图片相关"></a>图片相关</h2><p>typora配置如下</p><img src="/2020/04/24/hexo-jie-he-matery-zhu-ti-da-jian-bo-ke-zong-jie/image-20210714135351663.png" alt="typora配置" style="zoom: 67%;"><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&#123;">&amp;#123;</span>% asset_path slug %<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#123;">&amp;#123;</span>% asset_img slug [title] %<span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#123;">&amp;#123;</span>% asset_link slug [title] %<span class="token entity" title="&#125;">&amp;#125;</span>例子：<span class="token entity" title="&#123;">&amp;#123;</span>% asset_img 1.png This is an test image %<span class="token entity" title="&#125;">&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比如说：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](/example.jpg)</code>，它将 不会 出现在首页上。（但是它会在文章中按你期待的方式工作）</p><p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p><p>通过例子这种方式，图片将会同时出现在文章和主页以及归档页中。</p><p>2.安装插件</p><p><code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code></p><pre class="line-numbers language-bash"><code class="language-bash">引用图片,利用标签引用1. <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;% asset_path slug %&amp;#125;</span>2. <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;% asset_img slug [title] %&amp;#125;</span>3. <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;% asset_link slug [title] %&amp;#125;</span>利用makdown<span class="token operator">!</span><span class="token punctuation">[</span>例子<span class="token punctuation">]</span><span class="token punctuation">(</span>例子.png<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>menu.png<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解决代码bug"><a href="#解决代码bug" class="headerlink" title="解决代码bug"></a>解决代码bug</h3><p>如果之前不好使</p><pre class="line-numbers language-bash"><code class="language-bash">1. <span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save2. 打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cheerio'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><span class="token keyword">function</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> m<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_post_render'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> config <span class="token operator">=</span> hexo<span class="token punctuation">.</span>config<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>post_asset_folder<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> link <span class="token operator">=</span> data<span class="token punctuation">.</span>permalink<span class="token punctuation">;</span>    <span class="token keyword">var</span> beginPos <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> appendLink <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span>    <span class="token comment" spellcheck="true">// if not with index.html endpos = link.lastIndexOf('.') + 1 support hexo-abbrlink</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token regex">/.*\/index\.html$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html</span>      <span class="token comment" spellcheck="true">// image in xxtitle/ will go to xxtitle/index/</span>      appendLink <span class="token operator">=</span> <span class="token string">'index/'</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> endPos <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> endPos <span class="token operator">=</span> link<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    link <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>beginPos<span class="token punctuation">,</span> endPos<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> appendLink<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//console.info&amp;&amp;console.info("------->link:-->"+link);</span>    <span class="token keyword">var</span> toprocess <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'excerpt'</span><span class="token punctuation">,</span> <span class="token string">'more'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toprocess<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> key <span class="token operator">=</span> toprocess<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ignoreWhitespace<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        xmlMode<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        lowerCaseTags<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        decodeEntities<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// For windows style path, we replace '\' to '/'.</span>          <span class="token keyword">var</span> src <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//console.info&amp;&amp;console.info("111111----src:-->"+src);</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token regex">/http[s]*.*|\/\/.*/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token regex">/^\s+\//</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token regex">/^\s*\/uploads|images\//</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// For "about" page, the first part of "src" can't be removed.</span>            <span class="token comment" spellcheck="true">// In addition, to support multi-level local directory.</span>            <span class="token keyword">var</span> linkArray <span class="token operator">=</span> link<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> srcArray <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> elem <span class="token operator">!=</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> elem <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// console.info&amp;&amp;console.info("111111----srcArray:-->"+srcArray);</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>srcArray<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>            srcArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// console.info&amp;&amp;console.info("222222----srcArray:-->"+srcArray);</span>            src <span class="token operator">=</span> srcArray<span class="token punctuation">[</span>srcArray<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// console.info&amp;&amp;console.info("config.root:-->"+config.root);</span>            <span class="token comment" spellcheck="true">// console.info&amp;&amp;console.info("link:-->"+link);</span>            <span class="token comment" spellcheck="true">// console.info&amp;&amp;console.info("src:-->"+src);</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"update link as:-->"</span><span class="token operator">+</span>config<span class="token punctuation">.</span>root <span class="token operator">+</span> link <span class="token operator">+</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"no src attr, skipped..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span>info<span class="token operator">&amp;&amp;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考<br><a href="https://blog.csdn.net/xjm850552586/article/details/84101345">https://blog.csdn.net/xjm850552586/article/details/84101345</a><br><a href="https://segmentfault.com/q/1010000019625231">https://segmentfault.com/q/1010000019625231</a></p><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置<strong>阅读验证密码的功能</strong>，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-04-24 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> wish<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="让目录全部展开"><a href="#让目录全部展开" class="headerlink" title="让目录全部展开"></a>让目录全部展开</h2><p>参考如下</p><p><a href="https://github.com/blinkfox/hexo-theme-matery/issues/258">希望能添加控制TOC展开所有层级标题的设置 #258</a></p><p><a href="http://tscanlin.github.io/tocbot/">http://tscanlin.github.io/tocbot/</a></p><pre class="line-numbers language-bash"><code class="language-bash">第一步，更新依赖<span class="token function">npm</span> <span class="token function">install</span> --save tocbot第二步，修改主题配置<span class="token punctuation">(</span>_config.yml<span class="token punctuation">)</span>，collapseDepth大于等于6就可以了toc:  enable: <span class="token boolean">true</span>  heading: h1, h2, h3, h4, h5, h6  collapseDepth: 6 <span class="token comment" spellcheck="true"># 目录默认展开层级</span>  showToggleBtn: <span class="token boolean">true</span> <span class="token comment" spellcheck="true"># 是否显示切换TOC目录展开收缩的按钮</span>  <span class="token comment" spellcheck="true"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span>  expand_all: <span class="token boolean">true</span>  <span class="token comment" spellcheck="true"># Maximum heading depth of generated toc.</span>  max_depth: 6引用位置在MyBlog/themes/hexo-theme-matery-develop/layout/_partial/下的post-detail-toc.ejs文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/04/24/hexo-jie-he-matery-zhu-ti-da-jian-bo-ke-zong-jie/image-20210715140450967.png" alt="让目录全部展开" style="zoom: 50%;">]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试总结</title>
      <link href="/2020/04/24/java-mian-shi-zong-jie/"/>
      <url>/2020/04/24/java-mian-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<!--[TOC]--><h1 id="1-Java基础"><a href="#1-Java基础" class="headerlink" title="1. Java基础"></a>1. Java基础</h1><h2 id="java8新特性"><a href="#java8新特性" class="headerlink" title="java8新特性"></a>java8新特性</h2><ul><li><p><strong>1、Lambda表达式</strong> ： lambda表达式允许把函数作为一个方法的参数（函数作为参数传递到方法中）。行为参数化，就是一个方法接受多个不同的行为作为参数，这个行为对应一个函数式接口，意思差不多匿名类，顶多就是把实现的代码传递过去了。为了参数化某个方法的行为而创建的泛型函数式接口。</p><ul><li>函数式接口就是只定义一个抽象方法的接口。可以拥有若干个默认方法。</li><li>传递的行为：函数式接口一个具体实现的实例</li><li>(parameters) -&gt; expression</li><li>(parameters) -&gt; { statements }</li><li>引用外部变量时必须是不可变的，意义上是final的。在匿名类或 Lambda 表达式中访问的局部变量，如果不是final类型的话，编译器自动加上final修饰符。<strong>实际上是一个拷贝，完成后，lambda外部原先的能引用会发生变化，变为lambda拷贝的那个</strong></li><li>方法引用</li><li>默认方法：目的是为了解决接口的修改与现有的实现不兼容的问题。分为 默认方法 和 静态默认方法。</li></ul></li><li><p><strong>2、Date Time API</strong> 加强了对日期和时间的处理</p></li><li><p><strong>3、Optional类</strong> - 用来解决空指针异常</p></li><li><p><strong>Stream API</strong> - 新添加的StreamAPI把真正的函数式编程风格引入到java中</p></li><li><p><strong>JavaScript 引擎</strong> 允许我们在JVM上面运行特定的js应用。</p></li><li><p><strong>并发包里面的</strong> - 类和接口已经添加到juc包中。已将java.util.concurrent.ConcurrentHashMap类添加到类中以支持基于新添加的流工具和lambda表达式的聚合操作。</p></li><li><p><strong>CompletableFuture  异步化任务处理</strong>。CompletableFuture实现了Future和CompletionStage两个接口，CompletionStage可以看做是一个异步任务执行过程的抽象，构成链式的阶段型的操作。我们可以基于CompletableFuture方便的创建任务和链式处理多个任务。JDK1.8中则新增了lambda表达式和CompletableFuture。 不论Future.get()方法还是CompletableFuture.get()方法都是阻塞的，为了获取任务的结果同时不阻塞当前线程的执行，我们可以使用CompletionStage提供的方法结合callback来实现任务的异步处理。</p></li><li><p><strong>StampedLock:乐观的读锁</strong>，在使用乐观的读锁的时候不会阻塞写锁。在保证数据一致性上需要拷贝一份要操作的变量到方法栈，并且在操作数据时候可能其他写线程已经修改了数据， 而我们操作的是方法栈里面的数据，也就是一个快照，所以最多返回的不是最新的数据，但是一致性还是得到保障的。，是的我们在写数据时，不会因为使用读锁而长时间的阻塞写，从而提高效率。ReentrantLocks是可重入的（StampedLocks不是）</p></li></ul><ul><li><strong>LongAdder 原子计数器</strong>：适合在高并发统计计数，是个大体上的值，不能用来同步和做自增id生成。低并发下和AtomicLong差不多。<ul><li>Cell类使用@sun.misc.Contended注解，说明是要避免伪共享的。</li><li>AtomicLong的compareAndSet、getAndAdd等是利用Unsafe的相关功能实现的。Unsafe通过反射获取Unsafe中的theUnsafe。</li><li>扩容时new了一个新数组，所以不影响读。</li><li>LongAdder把一个值分散到Cell数组中，Cell是Striped64 静态内部类，针对Cell数组的每个Cell进行cas操作，<strong>分散竞争</strong>，把线程的名字的 hash 值，作为 Cell 数组的下标，cas失败后不是自旋，而是<strong>逐渐升级</strong>，到最后用到longAccumulate()方法。然后内部将数组sum求和，得到整数的value。把对于单一线程做cas操作转化为多个线程同时做cas操作，期间互不影响，从而提高效率，多个线程更新同一个值时分散到更新各个value。刚开始LongAdder并没有拆分，当多个线程有冲突的时候才会拆分。<ul><li>base变量在sum时用到了。</li><li>如果cell被创建后，原来的casBase就不走了，会不会性能更差？ base的顺序可不可以调换?：调换后每次都要cas操作，高并发效率低，if判断更合适，并且后面又有一个cas。刚开始我想可不可以调换add方法中的判断顺序，比如，先做casBase的判断？ 仔细思考后认为还是 不调换可能更好，调换后每次都要CAS一下，在高并发时，失败几率非常高，并且是恶性循环，比起一次判断，后者的开销明显小很多，还没有副作用（上一个问题，base变量在sum时base是会被统计的，并不会丢掉base的值）。因此，不调换可能会更好。</li><li>AtomicLong可不可以废掉：我觉得可以了。LongAdder在空间上占用略大，但是效率高。<pre class="line-numbers language-java"><code class="language-java">Striped64中的内部类，使用<span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Contended注解，说明里面的值消除伪共享<span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Contended <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Cell</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h2 id="map和flatMap"><a href="#map和flatMap" class="headerlink" title="map和flatMap"></a>map和flatMap</h2><p>map主要是用于遍历每个参数，然后进行参数合并或者返回新类型的集合。</p><p>FlatMap主要是用于stream合并，这个功能非常实用，他是默认实现多CPU并行执行的，所以我们合并集合优先实用这种方式。</p><h2 id="java八种数据类型"><a href="#java八种数据类型" class="headerlink" title="java八种数据类型"></a>java八种数据类型</h2><table><thead><tr><th>数据类型</th><th>关键字</th><th>占用字节</th><th>取值范围</th><th>默认值</th></tr></thead><tbody><tr><td>布尔型</td><td>boolean</td><td>1/4</td><td>true/false</td><td>false</td></tr><tr><td>字节型</td><td>byte</td><td>1</td><td>-128~127  -2^7 - 2^7-1</td><td>0</td></tr><tr><td>短整型</td><td>short</td><td>2</td><td>-2的15次方到2的15次方-1</td><td>0</td></tr><tr><td>整形</td><td>int</td><td>4</td><td>-2的31次方到2的31次方-1</td><td>0</td></tr><tr><td>长整型</td><td>long</td><td>8</td><td>0</td><td></td></tr><tr><td>字符型</td><td>char</td><td>2</td><td>‘\u0000’</td><td></td></tr><tr><td>单精度浮点型</td><td>float</td><td>4</td><td>0.0F</td><td></td></tr><tr><td>双精度浮点型</td><td>double</td><td>8</td><td>0.0D</td><td></td></tr></tbody></table><p><strong>boolean类型占了单独使用是4个字节（用int表示），在数组中又是1个字节。（字节数组表示）</strong></p><p><strong>对应的包装类，分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean。</strong></p><h2 id="SimpleDateFormat和DateTimeFormatter"><a href="#SimpleDateFormat和DateTimeFormatter" class="headerlink" title="SimpleDateFormat和DateTimeFormatter"></a>SimpleDateFormat和DateTimeFormatter</h2><ul><li>SimpleDateFormat是Java提供的一个格式化和解析日期的工具类。它允许进行格式化（日期 -&gt; 文本）、解析（文本 -&gt; 日期）和规范化。<ul><li>线程不安全，因为内部是calendar.setTime()，calendar是一个类变量。多线程访问不安全。</li><li>不能定义为静态变量，若定义了，使用局部变量，加同步锁，或者ThreadLocal。</li></ul></li></ul><p>jdk8新出的是线程安全的。</p><h2 id="对象拷贝之浅拷贝和深拷贝"><a href="#对象拷贝之浅拷贝和深拷贝" class="headerlink" title="对象拷贝之浅拷贝和深拷贝"></a>对象拷贝之浅拷贝和深拷贝</h2><p>对象拷贝就是将一个对象的属性拷贝到另一个有着相同类类型的对象中去。<br>Java中有三种类型的对象拷贝：浅拷贝(Shallow Copy)、深拷贝(Deep Copy)、延迟拷贝(Lazy Copy)。</p><p>参考 ：<a href="https://segmentfault.com/a/1190000010648514">https://segmentfault.com/a/1190000010648514</a></p><ul><li><p><strong>浅拷贝</strong>：按位拷贝对象，它会创建一个新对象，<strong>Object.clone()是浅拷贝</strong>。</p><ul><li><p>对象中基本数据类型拷贝值。</p></li><li><p>对象中引用数据类型，只拷贝引用，不new对象，指向同一个地址空间。</p></li><li><p>如果引用数据类型基本不变化或者全是基本数据类型，建议使用浅拷贝，效率高。</p></li><li><p><strong><code>常见例子</code></strong>：</p><ul><li><code>数组的拷贝</code>，默认实现了clone方法，Arrays.copyOf。它们都是浅拷贝。<ul><li>不管是引用数据类型数组还是基本数据类型数组，都是浅拷贝。</li></ul></li><li><code>集合的拷贝</code>，一般用浅拷贝来实现，即通过构造函数或者clone方法。<ul><li>特殊：某些特殊情况下，如果需要实现集合的深拷贝，需要拷贝集合每个元素。</li></ul></li></ul></li></ul></li><li><p><strong>深拷贝</strong>：</p><ul><li>拷贝所有属性和值。对象中引用数据类型，创建了一个新的对象，并且复制其内的成员变量。指向新的地址。</li><li>实现方式<ul><li><strong>序列化这个对象</strong>，再反序列化回来，就可以得到这个新的对象，无非就是序列化的规则需要我们自己来写。</li><li><strong>利用 clone() 方法</strong>，既然 clone() 方法,在当前类浅拷贝基本类型时，也拷贝引用类型（引用类型的类实现Cloneable）</li></ul></li></ul></li><li><p><strong>延迟拷贝</strong></p><ul><li>延迟拷贝是浅拷贝和深拷贝的一个组合，实际上很少会使用。</li><li>当最开始拷贝一个对象时，会使用速度较快的浅拷贝，还会使用一个计数器来记录有多少对象共享这个数据。当程序想要修改原始的对象时，它会决定数据是否被共享（通过检查计数器）并根据需要进行深拷贝。</li><li>延迟拷贝从外面看起来就是深拷贝</li></ul></li><li><p><strong>写入时复制</strong></p><ul><li>其核心思想是，如果有多个调用者同时请求相同资源时，他们会获取相同的指针指向相同的资源，直到某个调用者试图改变资源，系统才会真正复制一份专用副本给该调用者。而其他调用者所见到的最初的资源仍然保持不变。这过程对其他的调用者都是透明的。</li></ul></li></ul><ul><li><strong>序列化是干什么的?</strong><ul><li><strong><code>持久化存储对象</code></strong></li><li>它把整个对象图写入到持久化存储文件中并且需要时读取回来，所以需要拷贝所有的值。即使原对象改变，反序列化之后的对象不会变化。当通过序列化进行深拷贝时，必须确保对象图中所有类都是可序列化的。transient，static关键字修饰的变量不会被序列化。</li></ul></li></ul><h2 id="增强for机制"><a href="#增强for机制" class="headerlink" title="增强for机制"></a>增强for机制</h2><p>是JAVA提供的语法糖，JAVA中的增强for循环底层是通过迭代器模式来实现的。<strong>如果有别的线程修改了，报错，自己修改也报错，必须使用迭代器删除才可以</strong></p><p>在使用迭代器遍历元素的时候，在对集合进行删除的时候一定要注意，使用不当有可能发生ConcurrentModificationException</p><p>Iterator是工作在一个独立的线程中，并且拥有一个 mutex 锁。 Iterator被创建之后会建立一个指向原来对象的单链索引表，当原来的对象数量发生变化时，这个索引表的内容不会同步改变，所以当索引指针往后移动的时候就找不到要迭代的对象，所以按照 fail-fast 原则 Iterator 会马上抛出java.util.ConcurrentModificationException异常。</p><p>所以 Iterator 在工作的时候是不允许被迭代的对象被改变的。但你可以使用 Iterator 本身的方法 remove() 来删除对象，Iterator.remove() 方法会在删除当前迭代对象的同时维护索引的一致性。</p><h2 id="Java中的fail-fast机制"><a href="#Java中的fail-fast机制" class="headerlink" title="Java中的fail-fast机制"></a>Java中的fail-fast机制</h2><p>fail-fast，即快速失败，它是Java集合的一种错误检测机制。当多个线程对集合（非fail-safe的集合类）进行结构上的改变的操作时，有可能会产生fail-fast机制，这个时候就会抛出ConcurrentModificationException（当方法检测到对象的并发修改，但不允许这种修改时就抛出该异常）。</p><p>即使不是多线程环境，如果单线程违反了规则，同样也有可能会抛出改异常。</p><p>java.util.concurrent包下的容器都是安全失败，可以在多线程下并发使用，并发修改。</p><h2 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h2><p><strong>重载</strong>：<br>（1）是一个类中多态性的一种表现。<br>（2）发生在同一个类中。<br>（3）方法名必须相同，参数列表不同:参数类型不同、个数不同、顺序不同（不同类型的参数）<br>（4）方法返回值和访问修饰符可以不同。<br>（5）发生在编译时。　重载式多态，也叫编译时多态</p><p><strong>重写</strong>：<br>（1）发生在父子类中，方法名、参数列表，返回的类型必须相同，<br>（2）抛出的异常范围小于等于父类，<br>（3）访问修饰符范围大于等于父类；（public&gt;protected&gt;default&gt;private）<br>（4）如果父类方法访问修饰符为 private 则子类就不能重写该方法。<br>（5）方法被定义为final不能被重写。<br>（6）发生在运行时。重写式多态，也叫运行时多态。</p><p>父类方法被默认修饰时，只能在同一包中，被其子类被重写，如果不在同一包则不能重写。<br>父类的方法被protoeted时，不仅在同一包中，被其子类被重写，还可以不同包的子类重写。</p><ul><li><p>重载在类加载的时候即可确定，属于静态分派；</p></li><li><p>重写是由动态类型确定，是在运行时确定的，属于动态分派。</p></li><li><p>动态分派是由虚方法表实现的，虚方法表中存在着各个方法的实际入口地址，如若父类中某个方法子类没有重写，则父类与子类的方法表中的方法地址相同，如若重写了，则子类方法表的地址指向重写后的地址；</p></li></ul><h2 id="封装-继承-多态"><a href="#封装-继承-多态" class="headerlink" title="封装,继承,多态"></a>封装,继承,多态</h2><p><strong>继承</strong><br>（1）子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有,不是继承</strong>。<br>（2）子类可以拥有自己属性和方法，即子类可以对父类进行扩展。<br>（3）子类可以用自己的方式实现父类的方法。<br>（4）父类的私有属性和构造方法并不能被继承。</p><p>创建子类对象的时候，首先调用的是父类的无参构造方法创建一个父类对象。</p><p><strong>多态</strong></p><ul><li><p>同一个行为具有多个不同表现形式或形态的能力就是多态</p></li><li><p><strong>向上转型</strong></p><ul><li>Animal animal = new Cat(); <strong>将子类对象 Cat 转化为父类对象</strong> Animal。这个时候 animal 这个引用调用的方法是子类方法。</li><li>向上转型时，子类单独定义的方法会丢失。</li><li>子类引用不能指向父类对象。</li><li>向上转型的好处<ul><li>减少重复代码，使代码变得简洁。</li><li>提高系统扩展性。</li></ul></li></ul></li><li><p><strong>向下转型</strong></p><ul><li><code>向下转型是把父类对象转为子类对象</code></li><li>向下转型的前提是父类对象指向的是子类对象（也就是说，<strong>在向下转型之前，它得先向上转型</strong>）</li><li>向下转型只能转型为本类对象（猫是不能变成狗的）。</li></ul></li></ul><h2 id="String，StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的"><a href="#String，StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的" class="headerlink" title="String，StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?"></a>String，StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</h2><p><strong>可变性</strong></p><ul><li>都是final类，不允许被继承。</li><li>string的长度是不可以变的可以为空串，stringBuffer和stringBuilder是可以变化的，都是继承自AbstractStringBuilder类，父类中定义的char数组只是一个普通是私有变量，不可以为空串。<pre><code>String a = new String();初始化一个空串。StringBuilder builder = new StringBuilder();初始化一个空串。如果再append(&quot;&quot;)无意义</code></pre></li></ul><p><strong>线程安全性</strong></p><ul><li>StringBuffer是线程安全的，而StringBuilder是非线程安全的。StringBuilder是从JDK 5开始，为StringBuffer类补充的一个单线程的等价类。</li></ul><p><strong>性能</strong></p><ul><li>优先考虑使用StringBuilder，它支持StringBuffer的所有操作，但是因为它不执行同步，不会有线程安全带来额外的系统消耗，所以速度更快。</li><li>如果操作少量的数据用string，多线程大量数据用buffer，单线程大量的用builder。</li><li>经常改变内容的字符串最好不要用 String，每次生成新对象。</li></ul><h2 id="String为什么是不可变的"><a href="#String为什么是不可变的" class="headerlink" title="String为什么是不可变的"></a>String为什么是不可变的</h2><ul><li><p><strong>什么是不可变的对象</strong> ：如果一个对象，在它创建完成之后，不能再改变它的状态，那么这个对象就是不可变的。不能改变状态的意思是，不能改变对象内的成员变量，包括基本数据类型的值不能改变，引用类型的变量不能指向其他的对象，引用类型指向的对象的状态也不能改变。</p></li><li><p>被final修饰，不能被继承，内部是一个私有的final的字符数组实现的，只是说stack里的这个叫value的引用地址不可变。没有说堆里array本身数据不可变。String是不可变的关键都在底层的实现，没有暴露内部成员字段，而不是一个final。</p></li><li><p><strong>java中使用+符号串联字符串的时候，实际底层会转化成StringBuilder实例的append（）方法实现</strong>。看到+就new对象，然后append。jdk1.5之前是StringBuffer,StringBuffer是线程安全的，但是在普通情况下使用反而会导致性能急剧下降</p></li><li><p>可以实现多个变量引用堆内存中的同一个字符串实例，避免创建的开销。</p></li><li><p>程序中大量使用了字符串，出于安全的考虑。</p></li><li><p>方便缓存哈希码，不用重新计算每个字符的哈希码</p></li><li><p>线程安全，不会被改写。</p></li><li><p>string设计上采用了亨元模式（对象不存在，新建一个放在亨元池中，存在就从池中取出）</p></li></ul><h2 id="在一个静态方法内调用一个非静态成员为什么是非法的"><a href="#在一个静态方法内调用一个非静态成员为什么是非法的" class="headerlink" title="在一个静态方法内调用一个非静态成员为什么是非法的"></a>在一个静态方法内调用一个非静态成员为什么是非法的</h2><p>静态方法属于类，在加载过后就已经可以访问了。非静态属于对象/类的实例，只有new对象才有，所以编译就会报错。</p><h2 id="final、finally、finalize的区别"><a href="#final、finally、finalize的区别" class="headerlink" title="final、finally、finalize的区别"></a>final、finally、finalize的区别</h2><ul><li>final用于声明属性，方法和类，分别表示属性不可交变，方法不可覆盖，类不可继承。</li><li>finally是异常处理语句结构的一部分，表示总是执行。</li><li>finalize是Object类的一个方法，在垃圾收集器回收对象之前会调用被回收对象的此方法，供垃圾收集时的其他资源回收，例如关闭文件等。</li></ul><h2 id="在-Java-中定义一个不做事且没有参数的构造方法的作用"><a href="#在-Java-中定义一个不做事且没有参数的构造方法的作用" class="headerlink" title="在 Java 中定义一个不做事且没有参数的构造方法的作用"></a>在 Java 中定义一个不做事且没有参数的构造方法的作用</h2><p>主要在父子类。<br>子类在执行构造代码会调用父类无参构造方法，或者使用super显示指定。<br>如果父类没有无参构造器，子类又不显示super，则报错。</p><ul><li>在调用子类构造方法之前会先调用父类没有参数的构造方法 ：帮助子类做初始化工作。</li></ul><h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><p><strong>抽象类</strong></p><ul><li>抽象类不一定必须含有抽象方法，这样失去了意义</li><li>如果一个类继承于一个抽象类，则子类<strong>必须重写所有父类的抽象方法</strong>。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。</li></ul><p><strong>抽象类和接口的区别</strong></p><ol><li><p>语法层面上的区别</p><ul><li><p>抽象类除了不能被实例化之外，和普通类无区别。</p></li><li><p>抽象类中的<strong>成员变量，普通方法可以是各种类型的，抽象方法是public、protected和default</strong>，而接口中的成员变量只能是public static final类型的；</p></li><li><p>抽象类可以<strong>提供成员方法的实现细节</strong>，而接口中只能存在public abstract 方法；所有方法在接口中不能有实现(<strong>Java 8 开始接口方法可以有默认实现</strong>）</p></li><li><p><strong>在JDK8中，接口也可以定义静态方法，可以直接用接口名调用</strong>。实现类和实现是不可以调用的。如果同时实现两个接口B extends A，接口中定义了一样的默认方法，则必须重写，不然会报错。</p></li></ul><pre><code> 一个声明在类里面的方法优先于任何默认方法, 优先选取最具体的实现</code></pre><p><code>Iterator接口就为remove方法提供了一个默认实现,</code></p><pre><code> 关于抽象类 JDK 1.8以前，抽象类的方法默认访问权限为protected JDK 1.8时，抽象类的方法默认访问权限变为default 关于接口 JDK 1.8以前，接口中的方法必须是public的 JDK 1.8时，接口中的方法可以是public的，也可以是default的,有默认实现，可以重写 JDK 1.9时，接口中的方法可以是private的</code></pre></li><li><p>设计层面上的区别</p></li></ol><ul><li>抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象,接口是抽象方法的集合。</li><li>继承是一个 “是不是”的关系，而 接口 实现则是 “有没有”的关系。</li><li>设计层面不同，抽象类作为很多子类的父类，它是一种<code>模板式设计</code>。而接口是一种<code>行为规范</code>，它是一种<code>辐射式设计</code>。</li></ul><h2 id="接口的变化"><a href="#接口的变化" class="headerlink" title="接口的变化"></a>接口的变化</h2><p>jdk7</p><ul><li>常数变量</li><li>抽象方法<br>无法在接口中提供方法实现。</li></ul><p>jdk8</p><ul><li>常数变量</li><li>抽象方法</li><li>静态方法，可以直接调用。</li><li>默认方法，以后改变了可以不改实现类。</li></ul><p>jdk9</p><ul><li>常数变量</li><li>抽象方法</li><li>静态方法，可以直接调用。</li><li>默认方法，以后改变了可以不改实现类。</li><li>私有方法</li><li>私有静态方法</li></ul><p>私有方法的出现解决了公有方法中的代码冗余，实现了代码重用，不用去使用抽象类了。</p><p>private 不能和 abstract连用，私有方法必须具体实现。因为私有就是为了不让别人访问。自己不实现还等别人实现啊。</p><h2 id="成员变量与局部变量的区别"><a href="#成员变量与局部变量的区别" class="headerlink" title="成员变量与局部变量的区别"></a>成员变量与局部变量的区别</h2><ul><li>内存存储：若成员变量被staic修饰，则属于类，否则属于对象实例。局部变量属于方法</li><li>定义上：局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li><li>内存生存时间：成员变量是对象的一部分，而局部变量随着方法的调用而自动消失。</li><li>成员变量会自动赋初值，局部变量不会。final 修饰的成员变量也必须显示地赋值</li></ul><h2 id="对象实体与对象引用"><a href="#对象实体与对象引用" class="headerlink" title="对象实体与对象引用"></a>对象实体与对象引用</h2><ul><li>new创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。</li><li>对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。</li></ul><h2 id="构造方法的作用"><a href="#构造方法的作用" class="headerlink" title="构造方法的作用"></a>构造方法的作用</h2><ul><li>主要作用是完成对类对象的初始化工作。防止对象引用逃逸。</li></ul><h2 id="与-equals"><a href="#与-equals" class="headerlink" title="== 与 equals"></a>== 与 equals</h2><p><strong>1. ==</strong></p><ul><li>==判断的是两个对象的堆内存地址是否相同（基本数据类型比较值，引用类型比较地址） ，每new一次，都会重新开辟堆内存空间</li></ul><p><strong>2. equals()</strong></p><ul><li>Object类中定义了一个equals是比较堆内存地址的。</li><li>类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等。</li></ul><h2 id="hashCode-方法返回的是对象的内存地址么？"><a href="#hashCode-方法返回的是对象的内存地址么？" class="headerlink" title="hashCode 方法返回的是对象的内存地址么？"></a>hashCode 方法返回的是对象的内存地址么？</h2><ul><li>Object 基类的 hashCode 方法默认返回对象的内存地址，</li><li>但是在一些场景下我们需要覆写 hashCode 函数，比如需要使用 Map 来存放对象的时候，覆写后 hashCode 就不是对象的内存地址了。</li></ul><h2 id="Hashcode的作用"><a href="#Hashcode的作用" class="headerlink" title="Hashcode的作用"></a>Hashcode的作用</h2><ul><li><p>获取哈希码,配合散列表使用，用于确定对象的存储地址；如HashMap，Hashtable，HashSet。</p></li><li><p>hashcode相同，equals不一定true，散列表中比较是先比较hashcode，不同直接存放，若相同，则比较equals是否相同，如果相同，对于set则不放，不同重新计算散列值/产生单链表。</p></li><li><p>hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。</p></li><li><p>java中的hashCode方法就是根据一定的规则将与对象相关的信息（比如对象的存储地址，对象的字段等）映射成一个数值，这个数值称作为<strong>散列值</strong></p></li><li><p>hashCode是jdk根据对象的地址或者字符串或者数字算出来的int类型的数值，是native方法。</p></li></ul><h2 id="重写equal（）的时候也一定要重写hashcode（）"><a href="#重写equal（）的时候也一定要重写hashcode（）" class="headerlink" title="重写equal（）的时候也一定要重写hashcode（）"></a>重写equal（）的时候也一定要重写hashcode（）</h2><p>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。也就是说：hashCode() 在散列表中才有用，在其它情况下没用。</p><ul><li>hashcode（）方法有一个常规的协定：两个相等的对象必须拥有相同的hashcode<ul><li>x.equal(y)为true时，x.hashcode() == y.hashcode() 为true</li><li>x.code ==  y.code 为false，x.equals(y)为false；</li><li>x.hashcode() == y.hashcode()为true时，x.equal(y)不一定为true</li></ul></li><li>String类重写了Object的hashcode方法和equal（）方法</li><li>在存储散列集合中，如果重写了equal（）没有重写hashcode（），就会导致集合中存储两个相等的对象，从而导致混淆。</li></ul><h2 id="重写equal方法要遵循的原则"><a href="#重写equal方法要遵循的原则" class="headerlink" title="重写equal方法要遵循的原则"></a>重写equal方法要遵循的原则</h2><ol><li>对称性：x.equals(y) == y.equals(x)。</li><li>自反性：x.equals(x)必须返回是”true”。</li><li>传递性：x.equal(y)和y.equal(z)成立时，x.equal(z)要成立。</li><li>一致性：x.equals(y)，只要x和y内容一直不变，结果不变。</li><li>非空性，x.equals(null)，永远返回是”false”；x.equals(和x不同类型的对象)永远返回是”false”。</li></ol><h2 id="为什么Java中只有值传递"><a href="#为什么Java中只有值传递" class="headerlink" title="为什么Java中只有值传递"></a>为什么Java中只有值传递</h2><p>值传递（pass by value）是指在调用函数时将实际参数<strong>复制</strong>一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p><p>引用传递（pass by reference）是指在调用函数时将实际参数的地址<strong>直接传递</strong>到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p><ul><li>Java中其实还是值传递的，只不过对于对象参数，值的内容是对象的引用。</li><li><strong>值传递和引用传递的区别并不是传递的内容。而是实参到底有没有被复制一份给形参。</strong></li></ul><table><thead><tr><th></th><th>值传递</th><th>引用传递</th></tr></thead><tbody><tr><td>根本区别</td><td>会创建副本(Copy)</td><td>不创建副本</td></tr><tr><td>所以</td><td>函数中无法<strong>改变</strong>原始对象</td><td>函数中可以<strong>改变</strong>原始对象</td></tr></tbody></table><h2 id="关键字transient"><a href="#关键字transient" class="headerlink" title="关键字transient"></a>关键字transient</h2><ul><li>被修饰的成员属性变量不能被序列化，不能修饰类和方法。被transient关键字修饰的变量不能被序列化，一个静态变量不管是否被transient修饰均不能被序列化。</li></ul><h2 id="final和static的区别"><a href="#final和static的区别" class="headerlink" title="final和static的区别"></a>final和static的区别</h2><ul><li><p>static：</p><ul><li><p>修饰变量：静态变量随着类加载时被初始化，内存中只有一个，并且jvm只会分配一次内存，所有类共享静态变量。static不可以修饰局部变量。子类可以访问父类的静态字段。</p></li><li><p>修饰方法：在类加载的时候就存在了，不依赖任何实例，static方法必须实现不能用abstract修饰。<strong>static方法可以被继承，重载。继承的时候不能实现多态</strong>。使用子类访问，优先从子类找，没有就去父类。static方法不能访问非静态，但是非静态可以访问静态方法，变量。</p></li><li><p>修饰代码块：在类加载完就会执行代码块中的内容。</p></li><li><p>修饰内部类：</p></li><li><p>构造器不是static方法，构造器中可以使用this关键字。</p></li></ul></li><li><p>final</p><ul><li>修饰变量：编译期常量，在程序编译阶段完成初始化；运行时的常量：引用不可变，但是引用的对象内容可变。</li><li>修饰方法：不能被继承，所以不能被子类修改</li><li>修饰类：不能被继承</li><li>修饰参数：final类型的参数不可变</li></ul></li><li><p>编译期常量：在程序编译阶段【不需要加载类的字节码】，就可以确定常量的值</p></li><li><p>非编译期常量：在程序运行阶段【需要加载类的字节码】，可以确定常量的值</p></li></ul><h2 id="static-静态代码块与-非静态代码块"><a href="#static-静态代码块与-非静态代码块" class="headerlink" title="static{}静态代码块与{}非静态代码块"></a>static{}静态代码块与{}非静态代码块</h2><p>静态代码块在类加载时执行一次，属于类，<br>非静态代码块：每次new都会构建，针对所有对象共同点。构造方法，针对每个对象定制。<br>执行顺序：(静态代码块—非静态代码块—构造方法)，其他情况按顺序执行。</p><ul><li>父类B的静态代码块，子类的静态代码块，父类的非静态代码块，子类的非静态代码块，父类B的构造方法，子类的构造方法。</li></ul><h2 id="内部类-成员内部类、静态内部类、局部内部类、匿名内部类"><a href="#内部类-成员内部类、静态内部类、局部内部类、匿名内部类" class="headerlink" title="内部类(成员内部类、静态内部类、局部内部类、匿名内部类)"></a>内部类(成员内部类、静态内部类、局部内部类、匿名内部类)</h2><p><strong style="color:red">内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。<br>对于一个名为outer的外部类和其内部定义的名为inner的内部类。编译完成后出现outer.class和outer$inner.class两类。</strong></p><ul><li><p>成员内部类</p><ul><li>依赖外部类，要创建成员内部类的对象，前提是必须存在一个外部类的对象。</li><li>内部类 对象名 = 外部类对象.new 内部类( );</li><li>访问修饰符和类变量一样，哪个都可以。</li><li>成员内部类中，不能定义静态成员，因为成员内部类需要先创建了外部类，才能创建它自己的</li><li>成员内部类中，可以访问外部类的所有成员</li></ul></li><li><p>静态内部类、</p><ul><li>没有指向外部类的引用。</li><li>静态内部类不能直接访问外部类的非静态成员,可以外部类对象访问。</li><li>创建静态内部类的对象时，不需要外部类的对象，可以直接创建；<br><code>内部静态类不会自动初始化，只有调用静态内部类的方法，静态域，或者构造方法的时候才会加载静态内部类。利用这种特点我们可以实现一个单例模式。</code></li></ul></li><li><p>局部内部类：</p><ul><li>Outer$1Inner.class, 自增数字+内部类名字。</li><li>方法内部类就是定义在外部类的方法中，方法内部类只在该方法内可以用；</li><li>方法内部类不能使用访问控制符和 static 修饰符。</li><li>它可以访问当前代码块内的常量，和此外围类所有的成员。</li><li>可以访问外部类的局部变量(即方法内的变量)，但是变量必须是final的.</li><li>局部变量的生命周期与局部内部类的对象的生命周期的不一致。当局部变量随着方法消失了，内部类却没消失，就会出现引用不存在的变量，编译器会将外部的final变量在编译阶段就作为内部类的成员变量写入内部类中。</li></ul></li><li><p>匿名内部类</p><ul><li>Outer$1.class，用一个自增的数字代表匿名内部类。</li><li>只用到类的一个实例。类在定义后马上用到。</li><li>一般用于接口回调。</li><li>匿名内部类一般不能有构造方法。</li><li>匿名内部类不能定义任何静态成员、方法和类。</li><li>匿名内部类不能是public,protected,private,static。</li><li>只能创建匿名内部类的一个实例。</li><li>一个匿名内部类一定是在new的后面，用其隐含实现一个接口或实现一个类。</li><li>因匿名内部类为局部内部类，所以局部内部类的所有限制都对其生效。</li><li>如果匿名类实现的接口或父类有带参构造器，匿名类的参数不需要final，因为传给了基类用。基类可以改变，但是在匿名类中不能改，只能用。所以最好还是定义成final。</li></ul></li></ul><p>静态内部类与非静态内部类之间存在一个最大的区别，我们知道<strong>非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围类，但是静态内部类却没有。</strong></p><p><a href="https://www.cnblogs.com/dolphin0520/p/3799052.html">https://www.cnblogs.com/dolphin0520/p/3799052.html</a></p><h3 id="为什么成员内部类可以无条件访问外部类的成员？"><a href="#为什么成员内部类可以无条件访问外部类的成员？" class="headerlink" title="为什么成员内部类可以无条件访问外部类的成员？"></a>为什么成员内部类可以无条件访问外部类的成员？</h3><ul><li>编译器在进行编译的时候，会将成员内部类单独编译成一个字节码文件。</li><li>在定义的内部类的构造器是无参构造器，编译器还是会默认添加一个参数，该参数的类型为指向外部类对象的一个引用，所以成员内部类中的Outter this&amp;0 指针便指向了外部类对象，因此可以在成员内部类中随意访问外部类的成员。<ul><li>如果没有创建外部类对象，也就无法对那个引用赋初始值，也就无法创建成员内部类的对象了。</li></ul></li></ul><h3 id="为什么局部内部类和匿名内部类只能访问局部final变量？"><a href="#为什么局部内部类和匿名内部类只能访问局部final变量？" class="headerlink" title="为什么局部内部类和匿名内部类只能访问局部final变量？"></a>为什么局部内部类和匿名内部类只能访问局部final变量？</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span>文件如下，Test11$<span class="token function">2</span><span class="token punctuation">(</span>Test11 <span class="token keyword">this</span>$<span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> var2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">this</span>$<span class="token number">0</span> <span class="token operator">=</span> <span class="token keyword">this</span>$<span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val$a <span class="token operator">=</span> var2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果test方法已经执行完了，但是thread还没有，但它需要变量a，出现问题了。java的解决是复制。</li><li>如果变量的值在编译器期可以确定，则编译器默认会在匿名内部类（局部内部类）的常量池中添加一个内容相等的字面量或直接将相应的字节码嵌入到执行字节码中。所以匿名内部类使用的变量是另一个局部变量，只不过值和方法中局部变量的值相等，因此和方法中的局部变量完全独立开。</li><li>如果局部变量的值无法在编译期间确定，则通过构造器传参的方式来对拷贝进行初始化赋值。</li></ul><p><strong>这样解决了生命周期不一致的问题，但是如果在匿名类中修改变量值，就会产生数据不一致问题，为了解决这个问题，java编译器就限定必须将变量a限制为final变量，不允许对变量a进行更改（对于引用类型的变量，是不允许指向新的对象），这样数据不一致性的问题就得以解决了。</strong></p><h3 id="静态内部类有特殊的地方吗？"><a href="#静态内部类有特殊的地方吗？" class="headerlink" title="静态内部类有特殊的地方吗？"></a>静态内部类有特殊的地方吗？</h3><ul><li>静态内部类是不依赖于外部类的，也就说可以在不创建外部类对象的情况下创建内部类的对象。另外，静态内部类是不持有指向外部类对象的引用的，反编译class文件，是没有Outter this&amp;0引用的。</li></ul><h3 id="内部类可以被”重载”吗？"><a href="#内部类可以被”重载”吗？" class="headerlink" title="内部类可以被”重载”吗？"></a>内部类可以被”重载”吗？</h3><ul><li>内部类是个独立的类啊，和外部类没有啥关系，，</li><li>当你继承了某个外围类的时候，内部类并没有发生什么特别神奇的变化。这两个内部类是完全独立的两个实体，各自在自己的命名空间内。</li></ul><h2 id="为什么在Java中需要内部类？总结一下主要有以下四点："><a href="#为什么在Java中需要内部类？总结一下主要有以下四点：" class="headerlink" title="为什么在Java中需要内部类？总结一下主要有以下四点："></a>为什么在Java中需要内部类？总结一下主要有以下四点：</h2><ol><li>每个内部类都能独立的继承一个接口的实现，所以无论外部类是否已经继承了某个(接口的)实现，对于内部类都没有影响。内部类使得多继承的解决方案变得完整，</li><li>方便将存在一定逻辑关系的类组织在一起，又可以对外界隐藏。</li><li>方便编写事件驱动程序</li><li>方便编写线程代码</li></ol><h3 id="手写回调方法"><a href="#手写回调方法" class="headerlink" title="手写回调方法"></a>手写回调方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallBack</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        CallBack callBack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CallBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        callBack<span class="token punctuation">.</span><span class="token function">toDoSomethings</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CallBackInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的请求处理成功了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toDoSomethings</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> CallBackInterface callBackInterface<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            callBackInterface<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a &lt; 100 不需要执行回调方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该接口回调时间 : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CallBackInterface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Arrays-sort-和-Collections-sort"><a href="#Arrays-sort-和-Collections-sort" class="headerlink" title="Arrays.sort 和 Collections.sort"></a>Arrays.sort 和 Collections.sort</h2><ul><li>Arrays.sort(int[] a),双基准快排，如果是T[],就是TimeSort</li><li>JDK8， 对大集合增加了Arrays.parallelSort()函数，使用fork-Join框架，充分利用多核，对大的集合进行切分然后再归并排序，而在小的连续片段里，依然使用TimSort与DualPivotQuickSort。</li><li>TimeSort就是合并排序和插入排序升级版。<br>TimSort 算法为了减少对升序部分的回溯和对降序部分的性能倒退，将输入按其升序和降序特点进行了分区。排序的输入的单位不是一个个单独的数字，而是一个个的块-分区。其中每一个分区叫一个run。针对这些 run 序列，每次拿一个 run 出来按规则进行合并。每次合并会将两个 run合并成一个 run。合并的结果保存到栈中。合并直到消耗掉所有的 run，这时将栈上剩余的 run合并到只剩一个 run 为止。这时这个仅剩的 run 便是排好序的结果。<br>如何数组长度小于某个值，直接用二分插入排序算法。</li></ul><h2 id="类的构造函数的执行顺序"><a href="#类的构造函数的执行顺序" class="headerlink" title="类的构造函数的执行顺序"></a>类的构造函数的执行顺序</h2><p>当在初始化类的时候，会先执行静态块和静态变量的声明。<br>执行完静态块之后再执行非静态块。</p><p>如果在类里声明了静态对象会先执行非静态块。然后按照(静态优先，非静态其次的原则进行。)</p><h2 id="java的异常Throwable和exception"><a href="#java的异常Throwable和exception" class="headerlink" title="java的异常Throwable和exception"></a>java的异常Throwable和exception</h2><ul><li><p><strong>Throwable</strong></p><ul><li>Error</li><li>Exception<ul><li>Runtime Exception(运行时异常) / 未检查的异常</li><li>Checked Exception(受检查的异常)</li></ul></li></ul></li><li><p>Throwable类是 Java 语言中所有错误或异常的超类。</p></li><li><p><strong>Error</strong>：一般是指与虚拟机相关的问题，程序可以捕获，例如内存溢出，栈溢出等。</p></li><li><p><strong>Exception</strong>：表示程序本身可以处理的异常，可以捕获且可能恢复。</p><ul><li><p><strong>未检查的异常 / Runtime Exception</strong><br><code>表示JVM常用操作引发的错误</code><br>空指针异常、数组越界，编译能通过，但是一运行就终止了，程序不会处理运行时异常，不是程序主动抛出的，而是运行时出现的。出现这类异常，程序会终止。</p></li><li><p><strong>受检查的异常：</strong><br>Java编译器会检查这个异常，程序出现这个异常时，要么try catch，要么抛出。否则编译不通过。（除去RuntimeEXception及其子类的，其它Exception都是）</p></li></ul></li></ul><h2 id="try-catch的返回值"><a href="#try-catch的返回值" class="headerlink" title="try catch的返回值"></a>try catch的返回值</h2><ol><li>如果try有返回值，返回的是try里面的变量值保存到局部变量中，</li><li>JSR指令先去finally语句执行，再返回局部变量中值。</li><li>如果try，finally语句里均有return，忽略try的return，而使用finally的return.</li></ol><h2 id="Java-中-IO-流分为几种-BIO-NIO-AIO-有什么区别"><a href="#Java-中-IO-流分为几种-BIO-NIO-AIO-有什么区别" class="headerlink" title="Java 中 IO 流分为几种?BIO,NIO,AIO 有什么区别"></a>Java 中 IO 流分为几种?BIO,NIO,AIO 有什么区别</h2><p><strong>1. java 中 IO 流分为几种?</strong></p><ul><li>按流的流向分：输入流，输出流</li><li>处理类型：字符/字节流</li><li>字节流可以处理所有数据类型的数据，java里面以Stream结尾</li><li>字符流处理文本数据，以writer和reader结尾<ul><li>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul></li></ul><hr><p><strong>同步和异步：针对被调用者</strong></p><ul><li>同步 ：只有被调用者处理完才返回</li><li>异步 ：被调用者立马回应，没有返回结果，处理完之后通常依赖事件，回调机制告诉调用者其返回结果。</li></ul><p><strong>阻塞和非阻塞：针对调用者</strong></p><ul><li>阻塞：调用者一直等待被调用者返回结果。当前线程会被挂起</li><li>非阻塞：调用者不用一直等着结果返回，可以先去干其他事情。<br>阻塞体现在这个线程不能干别的了，只能在这里等着。非阻塞体现在这个线程可以去干别的，不需要一直在这等着。</li></ul><p><strong>BIO (Blocking I/O):</strong> 同步阻塞I/O模式 , 数据的读取写入必须阻塞在一个线程内等待其完成。</p><ul><li><p><strong>传统的BIO</strong> ：通常由一个独立的Acceptor线程监听客户端连接，它接收到连接请求后，为每个请求创建一个新线程进行链路处理。处理完成后通过输出流返回给客户端，线程销毁。</p><ul><li>缺点：缺乏弹性伸缩的功能，并发数与客户端的线程1：1.所以并发多时，会造成系统性能下降，最终死掉。</li></ul></li><li><p><strong>伪异步IO</strong>：<strong>使用线程池</strong>，将请求封装为Task实现Runnable类。进入线程池队列。形成客户端个数M ：线程池最大线程数N的比例。设置线程的最大值，防止由于海量并发接入导致线程耗尽。</p><ul><li>使用线程池，但是大量并发时，超过最大数量的线程会一直等待，这就是最大的弊端。</li></ul></li></ul><p><strong>NIO（new IO）同步非阻塞IO</strong></p><ul><li><p>NIO提供了与传统BIO模型中的Socket和ServerSocket相对应的SocketChannel和ServerSocketChannel两种不同的套接字通道实现。新增的两种通道都支持阻塞和非阻塞两种模式。</p></li><li><p><strong>缓冲区处理</strong>：在NIO库中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的；在写入数据时，也是写入到缓冲区中。任何时候访问NIO中的数据，都是通过缓冲区进行操作。缓冲区—&gt; Channel。若需要使用 NIO 系统，需要获取 用于连接 IO 设备的通道以及用于容纳数据的缓冲 区。然后操作缓冲区，对数据进行处理。</p><ul><li>非直接缓冲区：通过allocate() 分配缓冲区，将它建立在<code>JVM堆内存，就是数组</code>中。会多了内部复制。</li><li>直接缓冲区：通过allocateDirect() 分配，建立在物理内存中，可以提高效率。在物理内存中开辟一个缓冲区，消耗资源大，不容易分配和控制（放到物理内存中了，就不受程序管理了），长时间在内存中操作可以使用</li></ul></li><li><p><strong>channel(通道)</strong> 分为两种：SocketChannel：用户网络读写，FileChannel：用于文件操作。通道是双向的，可读也可写，而流的读写是单向的。无论读写，通道只能和Buffer交互。因为 Buffer，通道可以异步地读写。通道表示打开到 IO 设备(例如：文件、 套接字)的连接。</p><ul><li>Channel表示IO源与目标打开的连接，类似于传统的“流”，只不过Channel本身不能直接访问数据，只能与Buffer进行交互。</li></ul><p><strong>不能切换为非阻塞模式</strong></p><ul><li>FileChannel：用于读取、写入、映射和操作文件的通道。</li><li>Pipe.SinkChannel, Pipe.SourceChannel：Java NIO 管道是2个线程之间的单向数据连接。 Pipe有一个source通道和一个sink通道。数据会 被写到sink通道，从source通道读取。</li></ul><p><strong>可以切换成非阻塞模式</strong></p><ul><li>SocketChannel : 通过 TCP 读写网络中的数据</li><li>ServerSocketChannel : 可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。</li><li>DatagramChannel : 收发 UDP包的通道。</li></ul></li><li><p>Channel 负责传输， Buffer 负责存储</p></li><li><p>分散读取（Scattering Reads）是指从 Channel 中读取的数据“分 散”到多个 Buffer 中。</p></li><li><p>聚集写入（Gathering Writes）是指将多个 Buffer 中的数据“聚集” 到 Channel。</p></li></ul><p><strong>用于网络通道</strong></p><ul><li><strong>Selector</strong>（多路复用器），使用一个线程轮询查找Channel。Linux 2.6之前是select、poll，2.6之后是epoll。selector提供了选择已经就绪的任务的能力。selector会不断地轮询注册在其上的Channel，如果在channel发生读写事件，这个channel处于就绪状态，会被轮询出来，然后通过selectionKey就可以获取就绪的channel的集合，进行后续的I/O操作。</li><li><code>选择器（Selector） 是 SelectableChannle 对象的多路复用器，Selector 可 以同时监控多个 SelectableChannel 的 IO 状况，也就是说，利用 Selector 可使一个单独的线程管理多个 Channel。Selector 是非阻塞 IO 的核心。</code></li></ul><p><strong>AIO (Asynchronous I/O)</strong></p><ul><li>NIO 2.0引入了新的异步通道的概念，并提供了异步文件通道和异步套接字通道的实现。</li><li>异步IO基于事件和回调机制实现的，应用操作之后直接返回，不会阻塞，后台处理完成再通知线程进行后续操作。使用了系统底层API的支持，在Unix系统下，采用了epoll IO模型<br>异步的套接字通道时真正的异步非阻塞I/O，对应于UNIX网络编程中的事件驱动I/O（AIO）。他不需要过多的Selector对注册的通道进行轮询即可实现异步读写，从而简化了NIO的编程模型。</li></ul><h2 id="select、poll、epoll之间的区别"><a href="#select、poll、epoll之间的区别" class="headerlink" title="select、poll、epoll之间的区别"></a>select、poll、epoll之间的区别</h2><p>select，poll，epoll都是IO多路复用的机制。就是监视很多Channel，但select，poll，epoll本质上都是同步I/O，Selector 阻塞在 select 操作，当有 Channel 发生接入请求，就会被唤醒。</p><p><strong>(1)select==&gt;时间复杂度O(n)</strong></p><p>它仅仅知道了，有I/O事件发生了，却并不知道是哪那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。所以select具有O(n)的无差别轮询复杂度，同时处理的流越多，无差别轮询时间就越长。</p><ul><li><p>维护一个用来存放大量fd的数据结构。每次调用select，都需要把fd集合从用户态拷贝到内核态。每次调用select都需要在内核遍历传递进来的所有fd。</p></li><li><p>单个进程可监视的fd数量被限制，即能<strong>监听端口的大小有限</strong>。<code>cat /proc/sys/fs/file-max察看</code>。32位机默认是1024个。64位机默认是2048。</p></li><li><p>采用轮询扫描fd，效率低。</p></li></ul><p><strong>(2)poll==&gt;时间复杂度O(n)</strong></p><p>poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态， 但是它没有最大连接数的限制，原因是它是基于链表来存储的。</p><ul><li>只是描述fd集合的方式不同，poll使用pollfd结构而不是select的fd_set结构。</li><li>查询中如果发现设备就绪，放到等待队列，继续扫描，如果没有挂起线程直到有了或超时。</li></ul><p><strong>(3)epoll==&gt;时间复杂度O(1)</strong></p><ul><li>epoll_create,epoll_ctl和epoll_wait，</li><li>epoll_create是创建一个epoll句柄；</li><li>epoll_ctl是注册要监听的事件类型；每次注册新的事件到句柄中，只拷贝一次fd。遍历时加入回调函数，只在注册时遍历一次。</li><li>epoll_wait则是等待事件的产生。</li></ul><p><strong>epoll可以理解为event poll</strong>，不同于忙轮询和无差别轮询，epoll会把哪个流发生了怎样的I/O事件通知我们。<strong>所以我们说epoll实际上是事件驱动</strong>（每个事件关联上fd）的，此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)</p><p>epoll有EPOLLLT和EPOLLET两种触发模式，LT是默认的模式，ET是“高速”模式。</p><ul><li>LT模式下，只要fd还有数据/还有事件，每次 epoll_wait都会返回它的事件，提醒用户程序去操作。</li><li>ET模式下，只通知一次，直到下一次事件出现。即使上次读取操作未完成，下次调用epoll_wait()时也不通知。直到该文件描述符上出现第二次可读写事件才会通知你。</li></ul><p><strong>系统不会充斥大量你不关心的就绪文件描述符</strong></p><p><strong>epoll的优点：</strong><br>1、没有最大并发连接的限制，能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）；<br>2、效率提升，不是轮询的方式，不会随着FD数目的增加效率下降。只有活跃可用的FD才会调用callback函数；<br>即Epoll<strong>最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关</strong>，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll。</p><p>3、 内存拷贝，利用mmap()文件映射内存加速与内核空间的消息传递；即epoll使用mmap减少复制开销。</p><p><strong>select、poll、epoll 区别总结：</strong></p><p>1、支持一个进程所能打开的最大连接数。</p><ul><li>select：单个进程所能打开的最大连接数有FD_SETSIZE宏定义，1024/2048.</li><li>poll基于链表存储，无这个限制。</li><li>epoll ：虽然连接数有上限，但是很大，1G内存的机器上可以打开10万左右的连接，2G内存的机器可以打开20万左右的连接。</li></ul><p>2、FD剧增后带来的IO效率问题</p><ul><li>select，poll：每次都线性遍历所有，性能直线下降。</li><li>epoll：它的内核中实现是根据每个fd上的callback函数来实现的。只有活跃的socket才主动调用epoll。</li></ul><p>3、 消息传递方式</p><ul><li>select，poll ：内核需要将消息传递到用户空间，都需要内核拷贝动作</li><li>epoll ：epoll通过内核和用户空间共享一块内存来实现的。</li></ul><p>1、表面上看epoll的性能最好，但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。</p><p>2、select低效是因为每次它都需要轮询。但低效也是相对的。</p><p>select，poll需要一直轮询所有fd集合，直到设备就绪。醒的时候遍历整个fd集合。<br>epoll也需要不断轮询就绪链表，但是它是设备就绪时，调用回调函数，fd加入就绪链表，并epoll_wait唤醒睡眠的进程。醒了判断链表是否为空。</p><h2 id="String类的intern"><a href="#String类的intern" class="headerlink" title="String类的intern"></a>String类的intern</h2><ul><li><a href="http://java-performance.info/string-intern-in-java-6-7-8/">http://java-performance.info/string-intern-in-java-6-7-8/</a></li><li><a href="https://www.jianshu.com/p/50b085b4920e">https://www.jianshu.com/p/50b085b4920e</a></li></ul><p><strong>intern方法</strong><br>JDK7中，如果常量池（Stringtable）中已经有了这个字符串，那么直接返回常量池中它的引用，如果没有，那就将它的引用保存一份到字符串常量池，然后直接返回这个引用。敲黑板，这个方法是有返回值的，是返回引用。</p><ul><li>如果存在堆中的对象，会直接保存对象的引用，而不会重新创建对象。</li></ul><p>String s2 = new String(“abc”);<br>s2 = s2.intern();<br>检查字符串池里是否存在”abc”这么一个字符串，如果存在，就返回池里的字符串的引用；如果不存在，该方法会 把”abc”添加到字符串池中，然后再返回它的引用。</p><p><strong>Java6中的String.intern()</strong><br>interned strings都存储在PermGen（永久代）中——堆中一个固定大小的区域，和堆分开的，主要用来存储加载了的类和字符串常量池。在 jdk6中StringTable是固定的，就是1009的长度</p><p><strong>Java7中的String.intern()</strong><br>在Java7中，Oracle的工程师对“字符串池化”的逻辑作了重大的改变——将字符串常量池移动到了堆中。</p><p><strong>字符串常量池中的值可以被GC回收</strong><br>是的，JVM字符串常量池中的所有对象在没有被GC roots引用的情况下都可以被回收，这个结论适用于我们讨论的所有Java版本。这意味着如果你缓存的string逃离了作用域并且失去了引用——它将被移出JVM字符串常量池，并且被gc回收。</p><p><strong>java6、7和8中JVM 字符串常量池的实现</strong><br>字符串常量池本质上是一个固定容量的hash map。</p><p>在java6的早期版本中，字符串常量池的默认大小是1009，在Java6u30 和 Java6u41版本之间变得可配置。</p><p>Java7版本从一开始就是可以配置的。你需要通过<code>-XX:StringTableSize=N指定</code>，其中N是字符串常量池map的大小。基于性能考虑，N是近strings数量2倍的一个质数。<br>每个桶存放hashcode1相同的，用链表实现。</p><p>在Java7/8中使用-XX:StringTableSizeJVM参数设置常量池的map大小。默认是60013</p><p>JVM自带的字符串常量池与<code>WeakHashMap&lt;String, WeakReference&lt;String&gt;&gt;</code>进行比较，后者可以用来模拟JVM字符串常量池。</p><h2 id="String-s-new-String-“abc”-这个语句创建了几个对象"><a href="#String-s-new-String-“abc”-这个语句创建了几个对象" class="headerlink" title="String s = new String(“abc”)这个语句创建了几个对象"></a>String s = new String(“abc”)这个语句创建了几个对象</h2><ul><li><p><a href="https://www.cnblogs.com/justcooooode/p/7670256.html">https://www.cnblogs.com/justcooooode/p/7670256.html</a></p></li><li><p>字符串字面量总是有一个来自字符串常量池的引用。</p></li><li><p>这就意味着它们会一直有一个引用，所以它们不会被垃圾回收。</p></li><li><p>相等的字符串字面量将会指向相同的字符串对象（甚至是在不同包的不同类中）。<br>总之，字符串字面量不会被垃圾回收。绝对不会。<br>在运行时创建的字符串和由字符串字面量创建的是两个不同的对象。<br>对于运行时创建的字符串你可以通过intern()方法来重用字符串字面量<br>使用equals()方法是比较两个字符串是否相等的最好方式。</p></li></ul><p>堆中存放实例，栈中存放对象引用。<br>javap显示只new一次，所以创建一个对象在堆中，字符串常量池存放堆中的引用。</p><ul><li><p><strong>1、Class文件中的常量池</strong>：<strong><code>常量池表：存放编译期生成的各种字面量和符号引用。这部分内容将在类加载后存放到方法区的运行时常量池中。包括String的字面量</code></strong></p><ul><li>字面量：<ul><li>文本字符串，指的是数据的值例如“abc”</li><li>用final修饰的成员变量，包括静态变量、实例变量和局部变量</li></ul></li><li>符号引用：属于编译原理方面的概念，包含三类常量：<ul><li>类和接口的全限定名：用于在运行时解析得到类的直接引用<ul><li>字段的名称和描述符        </li><li>方法的名称和描述符</li></ul></li></ul></li></ul></li><li><p><strong>2、运行时常量池</strong>：方法区的一部分，在Java8以前，位于永生代；Java8之后位于堆。<br>jvm在执行某个类的时候，必须经过加载、连接(验证,准备,解析)、初始化。</p></li></ul><p>类对象和普通的实例对象是不同的，类对象是在类加载的时候生成的，普通的实例对象一般是在调用new之后创建。</p><p>在类加载的“解析阶段”还会将Class文件中的符号引用所翻译出来的直接引用(直接指向实例对象的指针)存储在 运行时常量池 中。</p><ul><li><strong>3、全局字符串常量池</strong>：</li></ul><p>这是个纯运行时的结构，而且是惰性（lazy）维护的。<br>jdk1.7,字符串常量池和类引用被移动到了Java堆中</p><p>全局字符串池里的内容是在类加载完成，经过验证，准备阶段之后在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到string pool中。在HotSpot中具体实现string pool这一功能的是StringTable类，它是一个哈希表，里面存的是key（字面量“abc”, 即驻留字符串）-value（字符串”abc”实例对象在堆中的引用）键值对，StringTable本身存在本地内存（native memory）中。</p><p>  StringTable在每个HotSpot VM的实例只有一份，被所有的类共享（享元模式）。在Java7的时候将字符串常量池移到了堆里，同时里面也不在存放对象（Java7以前被intern的String对象存放于永生代，所以很容易造成OOM），而是存放堆上String实例对象的引用。</p><p>  那么字符串常量池中引用的String对象是在什么时候创建的呢？在JVM规范里明确指定resolve阶段可以是lazy的，即在需要进行该符号引用的解析时才去解析它，这样的话，可能该类都已经初始化完成了，如果其他的类链接到该类中的符号引用，需要进行解析，这个时候才会去解析。</p><pre class="line-numbers language-java"><code class="language-java">String s0 <span class="token operator">=</span>”hellow”；String s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span> <span class="token punctuation">(</span>“hellow”<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>第一种方式声明的字面量hellow是在编译期就已经确定的，它会直接进入Class文件常量池中；当运行期间在全局字符串常量池中会保存它的一个引用。实际上最终还是要在堆上创建一个”hellow”对象</code>,因为最后有一个ldc，astore</strong></p><p><strong>类加载时类的class文件的信息会被解析到内存的方法区里</strong>。 Class文件里常量池里大部分数据会被加载到“运行时常量池”，包括String的字面量；<br><strong>但同时“Hello”字符串的一个引用会被存到同样在“非堆”区域的“字符串常量池”中</strong>，<br><strong>而”Hello”本体还是和所有对象一样，创建在Java堆中</strong>。</p><strong style="background:yellow">Hello字面量：运行时常量池<br>Hello引用：全局字符串常量池中<br>Hello对象：堆中</strong><p>当用字面量赋值的方法创建字符串时，无论创建多少次，只要字符串的值相同，它们所指向的都是堆中的同一个对象。</p><p><strong>第二种这个字符串对象是在运行期才能确定的，创建的字符串对象是在堆内存上。</strong></p><ul><li><strong>4、字面量进入字符串常量池的时机</strong></li></ul><blockquote><p>在类加载阶段， JVM会在堆中创建 对应这些 Class文件常量池中的 字符串对象实例 并在字符串常量池中驻留其引用。具体在resolve阶段执行。这些常量全局共享。<br><strong>JVM规范里明确指定resolve阶段可以是lazy的。</strong></p></blockquote><p>Class文件的常量池项的类型，有两种东西：</p><ul><li>CONSTANT_Utf8</li><li>CONSTANT_String<br>后者是String常量的类型，但它并不直接持有String常量的内容，而是只持有一个index，这个index所指定的另一个常量池项必须是一个CONSTANT_Utf8类型的常量，<strong>这里才真正持有字符串的内容。</strong></li></ul><p><strong>在HotSpot VM中，运行时常量池里</strong></p><ul><li>CONSTANT_Utf8 -&gt; Symbol*（一个指针，指向一个Symbol类型的C++对象，内容是跟Class文件同样格式的UTF-8编码的字符串）</li><li>CONSTANT_String -&gt; java.lang.String（一个实际的Java对象的引用，C++类型是oop）</li></ul><p>CONSTANT_Utf8会在类加载的过程中就全部创建出来，<strong>而CONSTANT_String则是lazy resolve的</strong>，<strong>例如说在第一次引用该项的ldc指令被第一次执行到的时候才会resolve</strong>。那么在尚未resolve的时候，<br>HotSpot VM把它的类型叫做<code>JVM_CONSTANT_UnresolvedString，内容跟Class文件里一样只是一个index</code>；等到resolve过后这个项的常量类型就会变成最终的JVM_CONSTANT_String，而内容则变成实际的那个oop。</p><p><strong><code>就HotSpot VM的实现来说，加载类的时候，那些字符串字面量会进入到当前类的运行时常量池，不会进入全局的字符串常量池（即在StringTable中并没有相应的引用，在堆中也没有对应的对象产生）</code></strong></p><p>ldc指令用于将int、float或String型常量值从常量池中推送至栈顶。使用ldc将”AA”送到栈顶，然后用astore_1把它赋值给我们定义的局部变量a，然后就没什么事了return了。</p><p>在类加载阶段，这个 resolve 阶段（ constant pool resolution ）是lazy的。换句话说并没有真正的对象，字符串常量池里自然也没有。<br><strong>执行ldc指令就是触发这个lazy resolution动作的条件</strong></p><p><strong>ldc字节码在这里的执行语义是</strong>：到当前类的运行时常量池（runtime constant pool，HotSpot VM里是ConstantPool + ConstantPoolCache）去查找该index对应的项，如果该项尚未resolve则resolve之，并返回resolve后的内容。<br><strong>在遇到String类型常量时</strong>，resolve的过程如果发现StringTable已经有了内容匹配的java.lang.String的引用，则直接返回这个引用，反之，<strong>如果StringTable里尚未有内容匹配的String实例的引用，则会在Java堆里创建一个对应内容的String对象，然后在StringTable记录下这个引用，并返回这个引用出去</strong>。</p><blockquote><p>可见，ldc指令是否需要创建新的String实例，全看在第一次执行这一条ldc指令时，StringTable是否已经记录了一个对应内容的String的引用。</p></blockquote><p>我的理解：new 对象和字面量赋值不是一条路子。</p><p>参考资料<br><a href="https://www.zhihu.com/question/55994121">https://www.zhihu.com/question/55994121</a><br><a href="http://www.liuhaihua.cn/archives/625516.html">http://www.liuhaihua.cn/archives/625516.html</a><br><a href="https://tech.meituan.com/archives">https://tech.meituan.com/archives</a><br><a href="https://www.jianshu.com/p/50b085b4920e">https://www.jianshu.com/p/50b085b4920e</a></p><h2 id="list-set-map的区别"><a href="#list-set-map的区别" class="headerlink" title="list,set,map的区别"></a>list,set,map的区别</h2><ul><li>list<ul><li>允许重复数据，可以插入多个null元素。</li><li>是一个有序的容器，保证了元素的插入顺序，输出顺序就是插入顺序</li><li>常用的实现类ArrayList、LinkedList 和 Vector。ArrayList 最为流行，它提供了使用索引的随意访问，而 LinkedList 则对于经常需要从 List 中添加或删除元素的场合更为合适。</li></ul></li><li>set<ul><li>不允许有重复的对象，只允许有一个null元素。</li><li>无序的容器，无法保证元素的存储顺序，TreeSet通过Comparator  或者 Comparable 维护了一个排序顺序。</li><li>Set 接口最流行的几个实现类是 HashSet、LinkedHashSet 以及  TreeSet。最流行的是基于HashMap 实现的 HashSet；TreeSet 还实现了 SortedSet 接口，因此 TreeSet 是一个根据其 compare() 和 compareTo() 的定义进行排序的有序容器。</li></ul></li></ul><h2 id="List常见问题"><a href="#List常见问题" class="headerlink" title="List常见问题"></a>List常见问题</h2><p>在List集合中，有三个重要的常用子类：Vector，ArrayList，LinkedList。</p><ol><li>Vector：内部是数组数据结构，线程安全。增删，查询都很慢。</li><li>ArrayList：内部是数组数据结构，线程不安全，替代Vector，查询速度快，增删速度慢。如果需要使用多线程，我们可以给ArrayList加锁，或者使用其他的方法，Vector已经不再使用了。</li><li>LinkedList：内部是链表数据结构，线程不安全，增删速度快，查询速度慢。</li><li><strong>Stack</strong> ：继承于Vector，数据是先进后出，基本不在使用，如果要实现栈，推荐使用 Deque 下的 ArrayDeque，效率比 Stack 高！</li></ol><h2 id="Stack-介绍"><a href="#Stack-介绍" class="headerlink" title="Stack 介绍"></a>Stack 介绍</h2><p>Stack 继承自 Vector，操作也是线程安全的</p><pre><code>push 入栈pop 出栈peek 查询栈顶empty 栈是否为空</code></pre><h2 id="实现一个栈"><a href="#实现一个栈" class="headerlink" title="实现一个栈"></a>实现一个栈</h2><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>（1）LinkedList是一个以双链表实现的List；</p><p>（2）LinkedList还是一个双端队列，具有队列、双端队列、栈的特性；</p><p>（3）LinkedList在队列首尾添加、删除元素非常高效，时间复杂度为O(1)；</p><p>（4）LinkedList在中间添加、删除元素比较低效，时间复杂度为O(n)；</p><p>（5）LinkedList不支持随机访问，所以访问非队列首尾的元素比较低效；</p><p>（6）LinkedList在功能上等于ArrayList + ArrayDeque；</p><h2 id="LinkedList为什么使用双向链表"><a href="#LinkedList为什么使用双向链表" class="headerlink" title="LinkedList为什么使用双向链表"></a>LinkedList为什么使用双向链表</h2><ul><li>和ArrayList对比就是多了增删快的。后面LinkedHashMap可以实现LRU算法。</li></ul><p>JDK 1.7中的first/last对比以前的header有下面几个好处：</p><ul><li><p>1、first / last有更清晰的链头、链尾概念，代码看起来更容易明白。</p></li><li><p>2、first / last方式能节省new一个headerEntry。（实例化headerEntry是为了让后面的方法更加统一，否则会多很多header的空校验）</p></li><li><p>3、在链头/尾进行插入/删除操作，first /last方式更加快捷。</p><ul><li><strong>循环双向链表时，在head后面也即是表尾</strong>，</li><li><strong>循环链表时，直接在last位置插入即可。更简单</strong></li></ul></li><li><p>插入/删除操作按照位置，分为两种情况：中间 和 两头。</p><ul><li>中间：二者一样</li><li><strong>两头，jdk6由于首尾相连，还是需要处理两头的指针。jdk7只需要处理一个头或尾</strong>。</li></ul></li><li><p>遍历二者效果一样。</p></li></ul><h2 id="Arraylist-与-LinkedList-区别"><a href="#Arraylist-与-LinkedList-区别" class="headerlink" title="Arraylist 与 LinkedList 区别"></a>Arraylist 与 LinkedList 区别</h2><ul><li>都不保证线程安全。</li><li>ArrayList使用Object数组实现，LinkedList使用双向链表实现，jdk1.6是双向循环链表，jdk1.7之后就变成了双向链表，去掉了head 。</li><li>ArrayList支持快速随机访问，插入默认在末尾处，删除指定位置元素需要移动元素，效率低，。LinkedList插入删除O(1),在指定位置获取，set时，先判断下标和size大小，再查找，查找慢。</li><li>ArrayList实现了RandomAcces接口（这个是空接口），做个标志，表示可以随机访问。在Collections.binarySearch()中会判断是否实现这个接口，并且支持两种Comparable和Comparator比较方式。</li><li>遍历时<ul><li>实现了 RandomAccess 接口的list，优先选择普通 for 循环 ，其次 foreach,</li><li>未实现 RandomAccess接口的list，优先选择iterator遍历（foreach遍历底层也是通过iterator实现的,），大size的数据，千万不要使用普通for循环，对于linkedlist使用for循环时，随机访问时每一个值都会遍历一遍，所以性能极差</li></ul></li><li><strong>在尾部增加元素的快慢区别</strong>：LinkedList每次增加的时候，会new 一个Node对象来存新增加的元素，所以当数据量小的时候，这个时间并不明显，而ArrayList需要扩容，所以LinkedList的效率就会比较高，其中如果ArrayList出现不需要扩容的时候，那么ArrayList的效率应该是比LinkedList高的，<strong>当数据量很大的时候，new对象的时间大于扩容的时间，那么就会出现ArrayList’的效率比Linkedlist高了。</strong><ul><li><strong>当输入的数据一直是小于千万级别的时候，大部分是Linked效率高</strong>，后来翻开源码，我猜想应该是当出现ArrayList扩容的时候，会效率降低，所以ArrayList的效益比较低。而当数据量大于千万级别的时候，就会出现ArrayList的效率比较高了。</li></ul></li><li><strong>在首部添加元素，Array慢（会移动元素），linked快</strong></li></ul><h2 id="ArrayList-与-Vector-区别呢-为什么要用Arraylist取代Vector呢"><a href="#ArrayList-与-Vector-区别呢-为什么要用Arraylist取代Vector呢" class="headerlink" title="ArrayList 与 Vector 区别呢?为什么要用Arraylist取代Vector呢"></a>ArrayList 与 Vector 区别呢?为什么要用Arraylist取代Vector呢</h2><ul><li><p>Vector 与 ArrayList 底层都是数组数据结构，都维护着一个动态长度的数组。</p></li><li><p>Vector是线程安全的，所以即使只有一个线程访问也很慢，<strong>Vector支持在创建的时候主动声明扩容时增加的容量的大小，默认扩容2倍，如果我们指定了扩容系数，那么每次增加指定的容量。</strong>。</p></li><li><p>Vector初始length是10 超过length时，每次增加2倍，list增加1.5倍。相比于ArrayList更多消耗内存。</p></li><li><p>对于 Vector 而言，除了 for 循环，高级 for 循环，迭代的迭代方法外，还可以调用 elements() 返回一个 Enumeration 。Enumeration 是一个接口，其内部只有两个方法hasMoreElements 和 nextElement，看上去和迭代器很相似，但是并没迭代器的 add remove，只能作用于遍历。</p></li></ul><ul><li><strong>如果想要ArrayList实现同步，可以使用Collections的方法：List list = Collections.synchronizedList(new ArrayList(…));在更新操作中使用了synchronized同步锁</strong></li><li><strong>直接使用并发包中的CopyOnWriteArrayList（基于ReentrantLock和volatile实现）更新操作中不仅使用了可重入锁，而且还需要进行数组的复制。</strong></li></ul><h3 id="Vector-和-SynchronizedList-区别"><a href="#Vector-和-SynchronizedList-区别" class="headerlink" title="Vector 和 SynchronizedList 区别"></a>Vector 和 SynchronizedList 区别</h3><p><strong>Vector比Collections.synchronizedList快一点点</strong></p><ul><li><p>SynchronizedList<E>类使用了委托(delegation)，实质上存储还是使用了构造时传进来的list，只是将list作为底层存储，对它做了一层包装。正是因为多了一层封装，所以就会比直接操作数据的Vector慢那么一点点。它本身是 Collections 一个内部类。</E></p></li><li><p>vector是<strong>方法的同步（锁this）</strong>，synchronizedList是代码块同步。</p></li><li><p>同步代码块在锁定的范围上可能比同步方法要小，一般来说锁的范围大小和性能是成反比的。</p></li><li><p>同步块可以更加精确的控制锁的作用域（锁的作用域就是从锁被获取到其被释放的时间），同步方法的锁的作用域就是整个方法。</p></li><li><p>SynchronizedList 可以通过参数指定锁定的对象，而 Vector 只能是对象本身。</p></li><li><p>SynchronizedList 并没有给迭代器进行加锁，但是 Vector 的迭代器方法加锁了。进行遍历时要手动进行同步处理，而 Vector 不需要。</p></li><li><p>SynchronizedList 作为一个包装类，有很好的扩展和兼容功能。可以将所有的 List 的子类转成线程安全的类。</p></li></ul><h3 id="重要–同步的List"><a href="#重要–同步的List" class="headerlink" title="重要–同步的List"></a>重要–同步的List</h3><p><a href="https://www.cnblogs.com/tong-yuan/p/10810042.html">https://www.cnblogs.com/tong-yuan/p/10810042.html</a></p><ul><li><strong>比较二者</strong><strong style="background:yellow">synchronizedList写速度更快（使用同步锁），读取慢（也有锁）CopyOnWriteArrayList写速度慢，使用重入锁，把旧数组复制到新数组（容量+1），将当前元素插入尾部。读操作不加锁，和普通读一样。</strong></li></ul><h3 id="分析CopyOnWriteArrayList"><a href="#分析CopyOnWriteArrayList" class="headerlink" title="分析CopyOnWriteArrayList"></a>分析CopyOnWriteArrayList</h3><ul><li><p><strong>使用空间换时间的方式进行工作, 它主要适用于 读多些少, 并且数据内容变化比较少的场景(最好初始化时就进行加载数据到CopyOnWriteArrayList 中)</strong></p></li><li><p>采用读写分离的思想，写入时复制。</p></li><li><p>CopyOnWrite只能保证数据最终的一致性，不能保证数据的实时一致性。</p></li><li><p>CopyOnWrite并发容器用于读多写少的并发场景，因为，读的时候没有锁，但是对其进行更改的时候是会加锁的，否则会导致多个线程同时复制出多个副本，各自修改各自的；</p></li><li><p>CopyOnWriteArrayList写速度慢，使用重入锁，把旧数组复制到新数组（容量+1），将当前元素插入尾部。读操作不加锁，和普通读一样。</p></li><li><p>内部一个volatile的array，只能通过setArray和getArray访问。没有size1字段。</p></li><li><p>读操作不加锁。</p></li><li><p>写操作加可重入锁。</p></li><li><p>实际长度和size大小相等，所以没有size字段。</p></li></ul><p><strong>构造函数</strong></p><ul><li>如果c是CopyOnWriteArrayList类型，直接把它的数组赋值给当前list的数组，注意这里是浅拷贝，两个集合共用同一个数组。</li><li>如果c不是CopyOnWriteArrayList类型，则进行拷贝把c的元素全部拷贝到当前list的数组中。</li></ul><h2 id="ArrayList的扩容机制"><a href="#ArrayList的扩容机制" class="headerlink" title="ArrayList的扩容机制"></a>ArrayList的扩容机制</h2><p>add(E): ensureCapacityInternal()检查容量是否足够，第一次add容量变为10，第11次时，需要扩容了，直到添加第11个元素，minCapacity(为11)比elementData.length（为10）要大。进入grow方法进行扩容。扩容1.5倍。每次添加都会检查容量，size是数组实际大小。<br>扩容用的是Arrays.copyOf(),底层用的是System.arraycopy()<br>add(int i, E): 检查角标，空间检查，如果有需要进行扩容，插入元素。</p><p>如果新容量大于 MAX_ARRAY_SIZE,进入(执行) hugeCapacity() 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，如果minCapacity大于最大容量，则新容量则为Integer.MAX_VALUE，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 Integer.MAX_VALUE - 8。</p><ul><li><strong>ensureCapacity方法</strong><br>在 add 大量元素之前用 ensureCapacity 方法，以减少增量重新分配的次数</li></ul><p>remove时：检查角标，删除元素，计算出需要移动的个数，并移动。设置为null，让Gc回收<br>删除元素时不会减少容量，若希望减少容量则调用trimToSize()<br>内部使用的是Arrays.copyOf()。</p><ul><li>length 属性是针对数组说的</li><li>length() 字符串</li><li>size() 集合</li></ul><h2 id="快速失败-fail-fast-和安全失败-fail-safe-的区别？"><a href="#快速失败-fail-fast-和安全失败-fail-safe-的区别？" class="headerlink" title="快速失败(fail-fast)和安全失败(fail-safe)的区别？"></a>快速失败(fail-fast)和安全失败(fail-safe)的区别？</h2><ul><li>Iterator的安全失败是基于对底层集合做拷贝，因此，它不受源集合上修改的影响。java.util包下面的所有的集合类都是快速失败的，</li><li>而java.util.concurrent包下面的所有的类都是安全失败的。快速失败的迭代器会抛出ConcurrentModificationException异常，而安全失败的迭代器永远不会抛出这样的异常。<br>快速安全是复制了原先的数组来保证的。</li></ul><h2 id="Iterator和ListIterator的区别？"><a href="#Iterator和ListIterator的区别？" class="headerlink" title="Iterator和ListIterator的区别？"></a>Iterator和ListIterator的区别？</h2><ul><li>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。</li><li>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。</li><li>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</li></ul><h2 id="Map常见问题"><a href="#Map常见问题" class="headerlink" title="Map常见问题"></a>Map常见问题</h2><ul><li>HashMap</li><li>LinkedHashMap</li><li>SortedMap</li><li>TreeMap</li></ul><h2 id="Hashmap中put方法的实现"><a href="#Hashmap中put方法的实现" class="headerlink" title="Hashmap中put方法的实现"></a>Hashmap中put方法的实现</h2><p>jdk7插到表头，jdk8插到表尾，先插入后判断容量是否超了。</p><ul><li>首先调用putVal方法<ul><li>1.判断table是否为空或为null，否则执行resize()进行扩容；</li><li>2.根据hash得到i，查看是否空，是直接插入转到6，否执行下一步</li><li>3.判断table[i]的首个元素是否和当前key==，是覆盖，否下一步</li><li>4.判断table[i]的首个是否是TreeNode节点。是执行红黑树的插入，否下一步</li><li>5.遍历table[i]，若到最后一个点，直接插入，然后判断i&gt;=7，意思就是超过了8个节点,转为红黑树。若有相同的直接覆盖。</li><li>转换为红黑树时，两个条件<ul><li>先判断length大于等于64，否则优先扩大数组大小，resize中，判断链表长度小于等于6变为链表，否则才是变换为红黑树。</li><li>为什么是6和8，平衡点，中间留了一个7的位置，防止经常在6和8之间变化导致经常交换节点。</li><li>链表长度小于8，查找慢，新增快，树大于8，查找快，新增慢。<pre><code>8 ,log(8) = 3; 链表平均查找长度8/2=4;链表长度&lt;=6,6/2=3;速度也很快，但转化为树结构生成树空间不一定快。</code></pre></li></ul></li><li>6.增加修改次数，超过容量就扩容。</li></ul></li></ul><h2 id="将一个自定义的类添加到hashmap对类有什么要求"><a href="#将一个自定义的类添加到hashmap对类有什么要求" class="headerlink" title="将一个自定义的类添加到hashmap对类有什么要求"></a>将一个自定义的类添加到hashmap对类有什么要求</h2><ul><li>必须重写hashcode()和equal()方法，否则会造成属性相同的key不会覆盖value的现象。</li></ul><h2 id="hashmap1-8确定桶的位置以及扩容时确定下标"><a href="#hashmap1-8确定桶的位置以及扩容时确定下标" class="headerlink" title="hashmap1.8确定桶的位置以及扩容时确定下标"></a>hashmap1.8确定桶的位置以及扩容时确定下标</h2><ul><li><p>在JDK1.8的确定桶的位置就是数组位置，不是计算hash值，hash值通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。</p><ul><li>桶的位置是：h &amp; (length - 1) = h%length，但是&amp;比%具有更高的效率。</li></ul></li><li><p>扩容时根据（hash&amp;oldCap）==0，即为原位置，不等于0，则为原位置+扩容前数组的长度。</p><ul><li>jdk7放到一个容量更大的数组里面，释放旧Entry数组的对象引用，置null。重新计算每个元素在新数组中的位置（h &amp; (length - 1)）。使用了单链表的头插入方式，变成原来顺序的倒序了。</li><li>jdk8也是放到另一个数组，释放对象引用，但是位置计算：要不不变，要不原来位置+oldCap。<strong>因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。jdk1.8不会倒置元素使用了后插法</strong>。</li></ul></li></ul><h2 id="hashmap并发情况下的闭环的原因（1-8以前）"><a href="#hashmap并发情况下的闭环的原因（1-8以前）" class="headerlink" title="hashmap并发情况下的闭环的原因（1.8以前）"></a>hashmap并发情况下的闭环的原因（1.8以前）</h2><ul><li>原因主要是hashmap的resize方法引起的，resize是扩容map的大小，里面有一个transfer方法，将原表中的结点重新hash，并放入到新表中index的位置上，但是在高并发的情况下会导致两个数相互指向，最终形成闭环。比如说扩展前A在C前面，扩展后，A在C后面，就会导致闭环。</li><li>1.8版本进行了更改，扩容前后节点顺序一样。</li><li>在线程P1中执行了 e1-&gt;next=e2,在线程P2中执行了 e2-&gt;next=e1，这样就形成了一个环。</li></ul><h2 id="hashmap中红黑树的特性"><a href="#hashmap中红黑树的特性" class="headerlink" title="hashmap中红黑树的特性"></a>hashmap中红黑树的特性</h2><ul><li>红黑树是一种自平衡二叉树，在进行插入和删除操作时，通过特定的操作保持二叉查找树的性能，从而获得更高的性能。</li><li>就是变换颜色，和左右旋转。保证每个节点的左右路径黑色节点个数相同，也即是黑色节点的层数相同。</li><li>根节点黑色，叶子（null）节点为黑色，红节点的两个孩子是黑的，根节点是黑，可以有红孩子。从每个叶子到根的所有路径上不能有两个连续的红色节点)</li><li>根据哈希表中元素个数确定是扩容还是树形化<ul><li>如果是树形化 <ul><li>遍历桶中的元素，创建相同个数的树形节点，复制内容，建立起联系</li><li>然后让桶第一个元素指向新建的树头结点，替换桶的链表内容为树形内容</li><li>然后调用树形化方法。<br>将二叉树变为红黑树时，需要保证有序。这里有个双重循环，拿树中的所有节点和当前节点的哈希值进行对比(如果哈希值相等，就对比键，这里不用完全有序），然后根据比较结果确定在树种的位置。</li></ul></li></ul></li></ul><h2 id="为什么用红黑树"><a href="#为什么用红黑树" class="headerlink" title="为什么用红黑树"></a>为什么用红黑树</h2><ul><li><p>对于查找密集型任务，AVL是首选。 另一方面，如果频繁添加/删除节点，则RedBlack Tree的效果会更好：减少旋转次数以平衡整体高度。</p></li><li><p>真正的区别在于在任何添加/删除操作时完成的旋转操作次数。</p></li><li><p>红黑树没有那么严格的平衡。AVL树中从根到最深叶的路径最大为〜1.44 lg（n + 2），而在红黑树中，最大为〜2 lg（n + 1）。</p><ul><li>AVL树通常查找更快，但是以插入删除代价</li><li>在AVL树中，从根到任何叶子的最短路径和最长路径之间的差异最多为1。在红黑树中，差异可以是2倍。</li></ul></li><li><p>两个都给O（log n）查找，但平衡AVL树可能需要O（log n）旋转，而红黑树将需要最多两次旋转使其达到平衡。旋转本身是O（1）操作，因为你只是移动指针。</p></li><li><p>比AVL树相比优点是不用在节点类中保存一个节点高度这个变量，节省了内存。</p></li><li><p>而且红黑树一般不是以递归方式实现的而是以循环的形式实现。</p></li><li><p>通常，AVL树的旋转比红黑树的旋转更加难以平衡和调试。</p></li></ul><p><strong>对于小数据</strong><br>insert：RB树更快，更少的平均旋转操作，他俩的最大旋转数不变。<br>查找：AVL树速度更快，因为AVL树的深度较小。<br>删除：平均下来。RB树的旋转次数也较少，因此RB树更快。</p><p><strong>大数据</strong><br>都是AVL树快，因为AVL树高度低，查找次数少。所以删除插入也快。</p><p><strong>一般而言，HashMap链表长度超过8的可能性很小，即使超过了，也算是小数据，所以用红黑树，插入删除更快。</strong></p><p><a href="http://cmsblogs.com/">http://cmsblogs.com/</a></p><h2 id="map-null-和-map-clear-区别"><a href="#map-null-和-map-clear-区别" class="headerlink" title="map=null 和 map.clear()区别"></a>map=null 和 map.clear()区别</h2><ul><li>释放Map对象空间。</li><li>由于Entry是强引用，虽然clear把key和value=null，但是空间还在。JVM的垃圾回收器并不会回收该对象的内存</li><li>map=null，会回收内存。</li></ul><h2 id="weakHashMap"><a href="#weakHashMap" class="headerlink" title="weakHashMap"></a>weakHashMap</h2><ul><li>其中Entry的key可能会被gc自动删除，即使我们没有调用remove和clear方法。</li><li>适用于缓存的场景，由于系统内存有限，不能缓存所有的对象，对象的缓存命中会提高效率，但是缓存miss也不会引起错误。</li><li>WeakHashMap 的 key 使用了弱引用类型，在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。所以再次通过获取对象时，可能得到空值，而 value 是在访问数组内容的时候，进行清除。</li><li>Tomcat 中的 ConcurrentCache 类就使用了 WeekHashMap 来实现数据缓存。</li></ul><h3 id="强、软、弱、虚引用知多少？"><a href="#强、软、弱、虚引用知多少？" class="headerlink" title="强、软、弱、虚引用知多少？"></a>强、软、弱、虚引用知多少？</h3><p>（1）强引用</p><p>使用最普遍的引用。如果一个对象具有强引用，它绝对不会被gc回收。如果内存空间不足了，gc宁愿抛出OutOfMemoryError，也不是会回收具有强引用的对象。</p><p>（2）软引用</p><p>如果一个对象只具有软引用，则内存空间足够时不会回收它，但内存空间不够时就会回收这部分对象。只要这个具有软引用对象没有被回收，程序就可以正常使用。</p><p>（3）弱引用</p><p>如果一个对象只具有弱引用，则不管内存空间够不够，当gc扫描到它时就会回收它。</p><p>（4）虚引用</p><p>如果一个对象只具有虚引用，那么它就和没有任何引用一样，任何时候都可能被gc回收。</p><p>软（弱、虚）引用必须和一个引用队列（ReferenceQueue）一起使用，当gc回收这个软（弱、虚）引用引用的对象时，会把这个软（弱、虚）引用放到这个引用队列中。</p><p>比如，上述的Entry是一个弱引用，它引用的对象是key，当key被回收时，Entry会被放到queue中。</p><h2 id="HashMap-和-Hashtable-的区别"><a href="#HashMap-和-Hashtable-的区别" class="headerlink" title="HashMap 和 Hashtable 的区别"></a>HashMap 和 Hashtable 的区别</h2><ul><li><p>Hashtable 在 JDK 1.0 就诞生了，而 HashMap 诞生于 JDK 1.2。</p></li><li><p>HashMap线程不安全，table安全，方法用synchronized修饰。可以用Collections.synchronizedMap()或者ConcurrentHashMap代替Hashtable。</p></li><li><p>容量和扩容：创建时如果不指定容量初始值（capacity），Hashtable 默认的初始大小为11（使用奇数散列值会更分散），之后每次扩充，容量变为原来的2n+1。<code>阈值thredhold=capacity*loadFactor</code>。负载因子越大，填充度越高。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍，阈值也是原先的二倍（jdk8），jdk7中，<code>阈值是thredhold=capacit*loadFactor</code>。</p><ul><li>给定初始capacity，HashTable直接用给定的大小。</li><li>HashMap的capacity=大于等于给定值得最小的2的幂。thredhold=capacity*loadfactor。所以哈希表大小总是2的幂。</li></ul></li><li><p>底层数据结构：HashTable底层用的数组+链表（节点是Entry类型）和jdk7的HashMap是一样的。jdk8的HashMap用的数组+链表/红黑树。当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。</p></li><li><p>父类不同：HashTable继承Dictionary类，它是任何可将键映射到相应值的类的抽象父类。hashmap继承的是AbstractMap类。</p></li><li><p>null处理：HashMap允许一个key为空的（存在数组0位置），多个value为空的。table都不允许为空</p></li><li><p>hash函数不同，HashTable直接用hashcode。map是code ^ (code &gt;&gt;&gt; 16);</p></li><li><p>索引计算不同：<code>map是(n - 1) &amp; hash</code></p><ul><li><code>table：(hash &amp; 0x7FFFFFFF) % tab.length;</code></li></ul></li><li><p><strong>hashtable多提供了elments()和contains（）两个方法。elments（）是继承Dictionary，用于返回hashtable中的value的枚举。</strong><br>Iterator支持fail-fast机制，而Enumeration不支持</p></li></ul><h2 id="hashmap1-7和1-8的区别"><a href="#hashmap1-7和1-8的区别" class="headerlink" title="hashmap1.7和1.8的区别"></a>hashmap1.7和1.8的区别</h2><ul><li><p><strong><code>底层的数据结构不一样 1.7是数组加链表，1.8是数组+链表+红黑树（链表长度大于8时，并且数组的长度大于64时会转化为红黑树）否则进行resize，resize后，如果有长度小于等于6的，还是链表，否则转为红黑树。</code></strong></p></li><li><p><strong><code>JDK1.7用的是头插法，而JDK1.8及之后使用的都是尾插法，那么他们为什么要这样做呢？因为JDK1.7是用单链表进行的纵向延伸，当采用头插法时会容易出现逆序且环形链表死循环问题。但是在JDK1.8之后是因为加入了红黑树使用尾插法，能够避免出现逆序且链表死循环的问题。</code></strong></p></li><li><p>扩容后数据存储位置的计算方式也不一样。</p><ul><li><strong><code>jdk7重新计算每个元素在新数组中的位置（h &amp; (length - 1)）</code></strong></li><li><strong><code>jdk8，要不不变，要不原来位置+oldCap。因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了</code></strong>。</li><li><strong><code>在计算hash值的时候，JDK1.7用了9次扰动处理=4次位运算+5次异或，而JDK1.8只用了2次扰动处理=1次位运算+1次异或。</code></strong></li><li>1.8，数组容量每次都是2倍，thredhold也是原先二倍</li><li>1.7 数组容量每次都是2倍，<code>阈值是thredhold=capacit*loadFactor</code></li></ul></li><li><p>1.8中的resize()方法在表为空时，创建表，表不为空时，扩容；1.7，resize()方法只负责扩容，inflateTable()负责创建表。</p></li><li><p>1.8中没有区分键位null的情况，1.7中对于键为null的情况调用了putForNullKey()方法。但是两个版本如果键为null，那么调用hash()方法得到的都是0，所以键位null的元素都始终位于哈希表table[0]的位置。</p></li><li><p>当1.8中桶中元素处于链表的情况，遍历的同时最后如果没有匹配到，那么直接将节点添加到链表的尾部；1.7中遍历的同时没有添加数据，而是另外调用了addEntry()方法，将节点添加到链表的头部。</p></li><li><p>1.7新增结点采用头插法（个人理解最近put的可能等下就被get，头插遍历到链表头就匹配到了），<strong>1.8新增节点采用尾插法。这也就是1.8不容易出现环形链表的原因</strong>。</p></li><li><p>1.7中是通过更改hashSeed值修改结点的hash值，从而达到rehash时的链表分散，而1.8中键的hash值不会改变，采用高十六位和低十六位相与，rehash时根据（hash&amp;oldCap）==0将链表分散。</p><ul><li><strong><code>为什么这里需要将高位数据移位到低位进行异或运算呢</code></strong> 利用了高位，减少哈希碰撞。</li></ul></li><li><p>1.8rehash时保证原链表的顺序，而1.7中rehash时有可能改变链表的顺序（头插法导致）。</p></li><li><p>扩容时，1.7扩容后插入，而1.8时扩容前插入。</p><ul><li>1.8插入后如果扩容，如果没有再次插入，就会产生无效扩容。</li></ul></li><li><p><strong>在JDK 1.7和JDK 1.8中，HashMap初始化这个容量的时机不同。JDK 1.8中，在调用HashMap的构造函数定义HashMap的时候，就会进行容量的设定。而在JDK 1.7中，要等到第一次put操作时才进行这一操作</strong>。</p></li></ul><h2 id="HashMap特性？"><a href="#HashMap特性？" class="headerlink" title="HashMap特性？"></a>HashMap特性？</h2><p>HashMap存储键值对，实现快速存取数据；允许null键/值；非同步；不保证有序(比如插入的顺序)，实现map接口。 </p><h2 id="get-方法的工作原理？"><a href="#get-方法的工作原理？" class="headerlink" title="get()方法的工作原理？"></a>get()方法的工作原理？</h2><p>通过对key的hashCode()进行hashing，并计算下标( n-1 &amp; hash)，从而获得buckets的位置。<br>如果产生碰撞，则利用key.equals()方法去链表中查找对应的节点。</p><h2 id="高并发下的HashMap：你了解重新调整HashMap大小存在什么问题吗？"><a href="#高并发下的HashMap：你了解重新调整HashMap大小存在什么问题吗？" class="headerlink" title="高并发下的HashMap：你了解重新调整HashMap大小存在什么问题吗？"></a>高并发下的HashMap：你了解重新调整HashMap大小存在什么问题吗？</h2><ul><li>Hashmap的Resize包含扩容和ReHash两个步骤，ReHash在多线程并发的情况下可能会形成链表环。jdk7中。。</li><li>原因是什么？– 因为扩容前后链表中元素的顺序反了。</li></ul><h2 id="HashMap-put（）当两个对象的HashCode相同会发生什么？"><a href="#HashMap-put（）当两个对象的HashCode相同会发生什么？" class="headerlink" title="HashMap put（）当两个对象的HashCode相同会发生什么？"></a>HashMap put（）当两个对象的HashCode相同会发生什么？</h2><ul><li>因为两个键的Hashcode相同，所以它们的bucket位置相同，会发生“碰撞”。HashMap使用链表存储对象，这个Entry(包含有键值对的Map.Entry对象)会存储在链表中。<br>可能接着问红黑树。。。</li></ul><h2 id="有两个字典，分别存有-100-条数据和-10000-条数据，如果用一个不存在的-key-目的是去逐个遍历-去查找数据，在哪个字典中速度更快？"><a href="#有两个字典，分别存有-100-条数据和-10000-条数据，如果用一个不存在的-key-目的是去逐个遍历-去查找数据，在哪个字典中速度更快？" class="headerlink" title="有两个字典，分别存有 100 条数据和 10000 条数据，如果用一个不存在的 key (目的是去逐个遍历)去查找数据，在哪个字典中速度更快？"></a>有两个字典，分别存有 100 条数据和 10000 条数据，如果用一个不存在的 key (目的是去逐个遍历)去查找数据，在哪个字典中速度更快？</h2><ul><li>在理想的哈希函数下，无论字典多大，搜索速度都是一样快。 </li><li>在 Redis 中，得益于自动扩容和默认哈希函数，两者查找速度一样快。</li><li>在 Java 中，如果哈希函数不合理，返回值过于集中，会导致大字典更慢。</li><li>Java 由于存在链表和红黑树互换机制，搜索时间呈对数 O(log(n))级增长，而非线性O(n)增长。 </li></ul><p><strong>解析</strong><br>根据概率论，理想状态下哈希表的每个箱子中，元素的数量遵守泊松分布，loadfactor=0.75时，链长度是8的概率很小。</p><ul><li>Java 的优点在于当哈希函数不合理导致链表过长时，会使用红黑树来保证插入和查找的效率。缺点是当哈希表比较大时，如果扩容会导致瞬时效率降低。 </li><li>Redis 通过增量式扩容解决了这个缺点，表现良好的默认哈希函数，避免了链表过长的问题。 </li><li>Redis 并不支持重写哈希方法，难道 Redis 就没有考虑到这个问题么？实际上还要从 Redis 的定位说起。由于它是一个高效的，Key-Value 存储系统，它的 key 并不会是一个对象，而是一个用来唯一确定对象的标记。</li><li>一般情况下，如果要存储某个用户的信息，key 的值可能是这样user:100001。Redis 只关心 key 在内存中的数据，因此只要是可以用二进制表示的内容都可以作为 key，比如一张图片。</li></ul><h2 id="为什么HashMap的容量是2的n次方"><a href="#为什么HashMap的容量是2的n次方" class="headerlink" title="为什么HashMap的容量是2的n次方"></a>为什么HashMap的容量是2的n次方</h2><ul><li><strong><code>阿里巴巴Java开发手册建议：initialCapacity = (需要存储的元素个数 / 负载因子) + 1，暂时无法确定初值，默认16.</code></strong></li><li>在日常开发中，可以使用Guava提供的一个方法来创建一个HashMap，计算的过程Guava会帮我们完成。</li></ul><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMapWithExpectedSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>但是，以上的操作是一种用内存换性能的做法，真正使用的时候，要考虑到内存的影响。</strong></li></ul><ul><li><strong><code>HashMap的默认长度为16,可以有效的减少冲突也可以减小误差。</code></strong></li><li>h&amp;(length - 1)用来获取索引，否则太大了不能用。</li><li>当length为2的n次方时，h&amp;(length - 1)就相当于对length取模，这样便保证了散列的均匀，同时也提升了效率。</li><li>其次，length为2的整数次幂为偶数，这样length-1为奇数，奇数的最后一位是1，这样便保证了h&amp;(length-1)的最后一位可能为0，也可能为1(这取决于h的值)，即与后的结果可能为偶数，也可能为奇数，这样便可以保证散列的均匀性。 </li><li>如果length为奇数，则length-1最后一位肯定是0，即只能为偶数，这样任何hash值都只会被散列到数组的偶数下标位置上，这便浪费了一半的空间。 </li></ul><h2 id="tableSizeFor"><a href="#tableSizeFor" class="headerlink" title="tableSizeFor()"></a>tableSizeFor()</h2><p>给定一个值 cap，返回一个不小于 cap 的又同时是 2^n 的最小值.</p><ul><li>其实是对一个二进制数依次向右移位，然后与原值取或。其目的对于一个数字的二进制，从第一个不为0的位开始，把后面的所有位都设置成1。然后再加1，就变成了大于该数值最小的2次幂。</li><li>2的幂自身套用公式会加倍，所以要先减1.（cap-1）<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span>n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span>n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span>n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>1100 1100 1100 &gt;&gt;&gt;1 = 0110 0110 0110<br>1100 1100 1100 | 0110 0110 0110 = 1110 1110 1110<br>1110 1110 1110 &gt;&gt;&gt;2 = 0011 1011 1011<br>1110 1110 1110 | 0011 1011 1011 = 1111 1111 1111<br>1111 1111 1111 &gt;&gt;&gt;4 = 0000 1111 1111<br>0000 1111 1111 | 1111 1111 1111 = 1111 1111 1111</p><p>1111 1111 1111 + 1 = 1 0000 0000 0000</p><pre><code>### 位运算和取模区别- 主要原因是位运算直接对内存数据进行操作，不需要转成十进制，因此处理速度非常快。- 所以，return h &amp; (length-1);只要保证length的长度是2^n 的话，就可以实现取模运算了。## 为啥HashMap的默认容量是16？- **`经验值 + 2的次幂`**- 这应该就是个经验值，既然一定要设置一个默认的2^n 作为初始值，那么就需要在效率和内存使用上做一个权衡。这个值既不能太小，也不能太大。  - 太小频繁发生扩容  - 太大浪费内存空间- https://gitbook.cn/books/5ca2da9a1763103ff10b0975/index.html- 在JDK 1.7和JDK 1.8中，HashMap初始化这个容量的时机不同。JDK 1.8中，在调用HashMap的构造函数定义HashMap的时候，就会进行容量的设定。而在JDK 1.7中，要等到第一次put操作时才进行这一操作。- size和capacity ，这其中capacity就是Map的容量，而size我们称之为Map中的元素个数。- HashMap就是一个“桶”，那么容量（capacity）就是这个桶当前最多可以装多少元素，而元素个数（size）表示这个桶已经装了多少元素。- loadFactor是装载因子，表示HashMap满的程度，默认值为0.75f，设置成0.75有一个好处，那就是0.75正好是3/4，而capacity又是2的幂。所以，两个数的乘积都是整数。## 为什么JDK 8中，putAll方法采用了这个expectedSize / 0.75F + 1.0F公式，而put、构造函数等并没有默认使用这个公式呢？我觉得浪费内存空间putAll(),已知添加size，得出阈值，然后根据情况扩容。这个期间只需要扩容一次如果不加这个计算，那么添加数据过程可能会扩容好几次，影响效率。put(); 1. 假设现在有这个计算方法，   1.1. 那么我要添加16个数据，计算之后是22，再2次幂变为32，则cap=32，阈值            =32*0.75=24；发现有一半数组空间未用。。         推荐给定初始容量   1.2. 不知道添加多少，        1.2.1. 给定初始capacity，计算后，如果添加很少数据，浪费，添加多了，可能会减少扩容次数。。。但是你都不知道要加多少数据，给定初始容量有什用呢。。不如按着默认来。还避免了浪费内存。        1.2.2. 使用默认的，情况复杂，不说了，总之还是内存浪费。。。2. 无这个计算方法，    2.1. 添加16个数据，         不使用手册推荐的，则capcity=16，thredhold=12。扩容一次。         使用公式自己计算，capcity=32，thredhold=24，    2.2. 不知道添加多少，         默认，cap=8，threshold=6.综上，我觉得加上就是用空间换时间，不加就是时间换空间。如果真的想要计算，还能自己算，比较灵活。然后就是根据需要了。## 为什么建议要制定一个初始容量2的幂。如果以后要添加的数很多，会频繁扩容，重建hash表，。性能下降。- **可以有效的减少冲突也可以减小误差。**- **`阿里巴巴Java开发手册建议：initialCapacity = (需要存储的元素个数 / 负载因子) + 1，暂时无法确定初值，默认16.`**- 当我们使用HashMap(int initialCapacity)来初始化容量的时候，jdk会默认帮我们计算一个相对合理的值当做初始容量。但是这个值并没有参考loadFactor的值。- 也就是说，如果我们设置的默认值是7，经过Jdk处理之后，会被设置成8，但是，这个HashMap在元素个数达到 8*0.75 = 6的时候就会进行一次扩容，这明显是我们不希望见到的。- 如果我们通过expectedSize / 0.75F + 1.0F计算，7/0.75 + 1 = 10 ,10经过Jdk处理之后，会被设置成16，这就大大的减少了扩容的几率。- 当HashMap内部维护的哈希表的容量达到75%时（默认情况下），会触发rehash，而rehash的过程是比较耗费时间的。所以初始化容量要设置成expectedSize/0.75 + 1的话，可以有效的减少冲突也可以减小误差。- 所以，我可以认为，当我们明确知道HashMap中元素的个数的时候，把默认容量设置成expectedSize / 0.75F + 1.0F 是一个在性能上相对好的选择，但是，同时也会牺牲些内存。## 针对 HashMap 中某个 Entry 链太长，查找的时间复杂度可能达到 O(n)，怎么优化？将链表转为红黑树，实现 O(logn) 时间复杂度内查找。JDK1.8 已经实现了。## HashMap为什么在JDK1.7的时候是先进行扩容后进行插入，而在JDK1.8的时候则是先插入后进行扩容的呢？## 为什么不直接采用经过hashCode（）处理的哈希码 作为 存储数组table的下标位置？- 容易出现 哈希码 与 数组大小范围不匹配的情况，即 计算出来的哈希码可能 不在数组大小范围内，从而导致无法匹配存储位置。- 解决  - 哈希码 与运算（&amp;） （数组长度-1）- 都是为了提高 存储key-value的数组下标位置 的随机性 &amp; 分布均匀性，尽量避免出现hash值冲突。### 为什么在计算数组下标前，需对哈希码进行二次处理：扰动处理？- 加大哈希码低位的随机性，使得分布更均匀，从而提高对应数组存储下标位置的随机性 &amp; 均匀性，最终减少Hash冲突。## 哈希表如何解决Hash冲突？1、开放地址法（包括线性探测、二次探测、伪随机探测等）Hi=(H(key) + di) MOD m i=1,2,...k(k&lt;=m-1)其中H(key)为哈希函数；m为哈希表表长；di为增量序列。2、链地址法3、再哈希法Hi = RHi（key），i=1,2,...kRHi均是不同的哈希函数，即在同义词产生地址冲突时计算另一个哈希函数地址，直到不发生冲突为止。这种方法不易产生聚集，但是增加了计算时间。4、建立一个公共的溢出区 : 简单地说就是搞个新表存冲突的元素。线性探测再散列- **1、预防措施**  - 好的hash算法  - 好的扩容机制- **2、解决方案**  - 数据结构  - 良好的数据存储结构**详细解释**- Hash算法  - 1.hashCode()  - 2.扰动处理    - jdk1.7 : 4次位运算，5次异或    ```java    h ^= k.hashCode();    h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);    ```    - jdk1.8 ：1次位运算 + 1次异或    ```java    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);    ```  - 3.数组长度为2的幂- 扩容机制  - 当哈希表存储内容数量size&gt;阈值，就会扩容哈希表和thredhold  - 与哈希表容量和加载因子有关，jdk7和jdk8不同。- 数据结构  - jdk1.7 ：数组+链表  - jdk1.8 ：数组+链表+红黑树- 良好的数据存储机制  - jdk1.7：冲突时，链地址法 + 头插法  - jdk1.8：冲突时，链地址法 + 尾插法 + 红黑树## 为什么HashMap具备下述特点：键-值（key-value）都允许为空、线程不安全、不保证有序、存储位置随时间变化- **1、键-值都允许为空**  - 键只有一个可以为null    - key空时，位置为0；  - 值可以有多个null- **2、线程不安全**  - 原因  - jdk1.7    - 无同步锁    - resize()出现闭环，死循环，并发put操作触发resize形成环状链表，获取数据遍历链表时死循环。  - jdk1.8    - 无同步锁  - 额外  - HashMap中fail-fast策略。    - 一旦在使用迭代器中出现并发操作，抛出ConcurrentModificationException    - 存在变量：modCount：修改次数，每修改一次就会+1，在迭代器初始化时，把这个值给迭代器的```expectedModCount;  // for fast-fail```,每次访问下一个元素都会判断她俩是否相等。不等抛异常。    **注意到modCount声明为volatile，保证线程之间修改的可见性**- **3、不保证有序**  - 插入顺序和存储顺序不一致- **4、存储位置随时间变化**  - 存在扩容操作，导致位置重新计算。## 为什么 HashMap 中 String、Integer 这样的包装类适合作为 key 键- 保证了hash值得不可更改性和计算准确性- 具体描述  - final类型，具有不可变性，保证了key的不可更改性，不会出现放入 &amp; 获取hash码不一样  - 内部重写了equals和hashcode，不容易出现hahs计算错误。Integer的hashcode就是value。- 而且String最为常用。因为String对象是不可变的，而且已经重写了equals()和hashCode()方法了。## HashMap默认加载因子为什么选择0.75- 提高空间利用率, 减少查询成本的折中，主要是泊松分布，0.75的话碰撞最小，加载因子越大,填满的元素越多,空间利用率越高，但冲突的机会加大了。反之,加载因子越小,填满的元素越少,冲突的机会减小,但空间浪费多了。冲突的机会越大,则查找的成本越高。反之,查找的成本越小。从上面的表中可以看到当桶中元素到达8个的时候，概率已经变得非常小，也就是说用0.75作为加载因子，每个碰撞位置的链表长度超过８个是几乎不可能的。## HashMap 中的 key若 Object类型， 则需实现哪些方法？hashcode，equals。- hashcode  - 计算存储数据的存储位置  - 不恰当导致hash碰撞- equals  - 比较存储位置的key是否存在，存在就替换value  - 保证key在哈希表的唯一性## 为什么HashMap为什么要树化？本质上这是个安全问题。因为在元素放置过程中，如果一个对象哈希冲突，都被放置到同一个桶里，则会形成一个链表，我们知道链表查询是线性的，会严重影响存取的性能。构造哈希冲突的数据攻击服务器。## JDK8，HashMap扩容计算hash过程```cpp假设开始n=16，扩容后n=32；变为32位。n-1 ：       0 0 0 0  1 1 1 1key1[hash]:  0 0 0 0  0 1 0 1       n-1&amp;key1 = 0 0 0 0  0 1 0 1key2[hash]:  0 0 0 1  0 1 0 1       n-1&amp;key2 = 0 0 0 0  0 1 0 1n=32n-1 ：       0 0 0 1  1 1 1 1key1[hash]:  0 0 0 0  0 1 0 1       n-1&amp;key1 = 0 0 0 0  0 1 0 1key2[hash]:  0 0 0 1  0 1 0 1       n-1&amp;key2 = 0 0 0 1  0 1 0 1</code></pre><p>发现扩容后key1存储位置不变。key2位置 = oldCap + 原先位置。就是多了一个1.</p><p>在二进制上如何判断呢？<br>发现如下</p><pre class="line-numbers language-cpp"><code class="language-cpp">n ：         <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>key1<span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token operator">:</span>  <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span>       n<span class="token number">-1</span><span class="token operator">&amp;</span>key1 <span class="token operator">=</span> <span class="token number">0</span>key2<span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token operator">:</span>  <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span>       n<span class="token number">-1</span><span class="token operator">&amp;</span>key2 <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>就很明显了。</p><h2 id="为什么在JDK1-8中进行对HashMap优化的时候，把链表转化为红黑树的阈值是8-而不是7或者不是20呢"><a href="#为什么在JDK1-8中进行对HashMap优化的时候，把链表转化为红黑树的阈值是8-而不是7或者不是20呢" class="headerlink" title="为什么在JDK1.8中进行对HashMap优化的时候，把链表转化为红黑树的阈值是8,而不是7或者不是20呢"></a>为什么在JDK1.8中进行对HashMap优化的时候，把链表转化为红黑树的阈值是8,而不是7或者不是20呢</h2><ul><li><p>如果选择6和8（如果链表小于等于6树还原转为链表，大于等于8转为树），<strong>中间有个差值7可以有效防止链表和树频繁转换</strong>。假设一下，如果设计成链表个数超过8则链表转换成树结构，链表个数小于8则树结构转换成链表，如果一个HashMap不停的插入、删除元素，链表个数在8左右徘徊，就<strong>会频繁的发生树转链表、链表转树，效率会很低</strong>。</p></li><li><p>还有一点重要的就是由于treenodes的大小大约是常规节点的两倍，因此我们仅在容器包含足够的节点以保证使用时才使用它们，当它们变得太小（由于移除或调整大小）时，它们会被转换回普通的node节点，容器中节点分布在hash桶中的频率遵循泊松分布 ,<strong>桶的长度超过8的概率非常非常小。所以作者应该是根据概率统计而选择了8作为阀值</strong></p></li></ul><h2 id="LinkedHashMap分析"><a href="#LinkedHashMap分析" class="headerlink" title="LinkedHashMap分析"></a>LinkedHashMap分析</h2><p><strong>和HashMap的两个不同点，其他的都一样，继承自HashMap。</strong></p><ul><li>LinkedHashMap 内部维护了一个双向链表，解决了 HashMap 不能随时保持遍历顺序和插入顺序一致的问题</li><li>LinkedHashMap 元素的访问顺序也提供了相关支持，也就是我们常说的 LRU（最近最少使用）原则。</li></ul><pre class="line-numbers language-java"><code class="language-java">Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> before<span class="token punctuation">,</span> after<span class="token punctuation">;</span><span class="token keyword">transient</span> LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> head<span class="token punctuation">;</span>  该引用始终指向双向链表的头部<span class="token keyword">transient</span> LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> tail<span class="token punctuation">;</span>   该引用始终指向双向链表的尾部<span class="token keyword">final</span> <span class="token keyword">boolean</span> accessOrder<span class="token punctuation">;</span>   是否维护双向链表中的元素访问顺序，构造函数用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这两个变量在Entry中，这 before 变量在每次添加元素的时候将会链接上一次添加的元素，而上一次添加的元素的 after 变量将指向该次添加的元素，来形成双向链接。</li></ul><h3 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h3><p>在哈希表删除之后调用</p><pre><code>afterNodeRemoval(node);</code></pre><ul><li>表示从双向链表中删除对应的节点 ，node 为已经删除的节点</li><li>利用head和tail实现简单的双向链表的删除。</li></ul><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><ul><li>和HashMap的put方法是一样的，就是多了几个步骤，如下</li><li>1.put()</li><li>2.putVal()<ul><li>插入新节点时，执行LinkedList特有的newNode()方法。</li><li>newNode()方法中，初始化entry，然后把节点插入到双向链表尾部。</li><li>多出来的方法<ul><li>afterNodeAccess(e);维护访问顺序。</li><li>afterNodeInsertion(evict); 是否删除第一个节点。</li></ul></li></ul></li></ul><h3 id="LinkedHashMap维护节点访问顺序"><a href="#LinkedHashMap维护节点访问顺序" class="headerlink" title="LinkedHashMap维护节点访问顺序"></a>LinkedHashMap维护节点访问顺序</h3><p>afterNodeAccess(e);维护访问顺序。</p><pre class="line-numbers language-java"><code class="language-java">是否维护双向链表中的元素访问顺序复制代码<span class="token keyword">final</span> <span class="token keyword">boolean</span> accessOrder<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该方法随 LinkedHashMap 构造参数初始化，accessOrder 默认值为 false.</p><ul><li>accessOrder=true时，调用get方法和put方法都会执行，</li><li>就是把访问的这个元素放在链表末尾。类似os的LRU。</li></ul><h3 id="实现一个LRU"><a href="#实现一个LRU" class="headerlink" title="实现一个LRU"></a>实现一个LRU</h3><p>最近最少未被使用，删除这个节点。</p><ul><li>思想：<strong>accessOrder=true</strong>，保证每次get或者put，意思就是刚访问的节点放在链表末尾。最上面的节点就是最近最少未被访问的。删除即可。</li><li>实现，需要<strong>evict=true</strong>，如何做。map源码默认返回false。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// possibly remove eldest</span>    LinkedHashMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>evict <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>first <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        K key <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">;</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 写一个子类继承LinkedHashMap，重写这个方法，自定义规则。既可以实现了。<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="和HashMap区别联系"><a href="#和HashMap区别联系" class="headerlink" title="和HashMap区别联系"></a>和HashMap区别联系</h3><ul><li><p>LinkedHashMap 拥有与 HashMap 相同的底层哈希表结构，即数组 + 单链表 + 红黑树，也拥有相同的扩容机制。</p></li><li><p>LinkedHashMap 相比 HashMap 的拉链式存储结构，内部额外通过 Entry 维护了一个双向链表。</p></li><li><p>HashMap 元素的遍历顺序不一定与元素的插入顺序相同，而 LinkedHashMap 则通过遍历双向链表来获取元素，所以遍历顺序在一定条件下等于插入顺序。</p></li><li><p>LinkedHashMap 可以通过构造参数 accessOrder 来指定双向链表是否在元素被访问后改变其在双向链表中的位置。</p></li></ul><h2 id="源码系列"><a href="#源码系列" class="headerlink" title="源码系列"></a>源码系列</h2><p><a href="https://blog.zhangyong.io/2018/08/04/treemap/">https://blog.zhangyong.io/2018/08/04/treemap/</a></p><h2 id="TreeMap和HashMap区别"><a href="#TreeMap和HashMap区别" class="headerlink" title="TreeMap和HashMap区别"></a>TreeMap和HashMap区别</h2><p>红黑树特点：</p><pre class="line-numbers language-java"><code class="language-java">（<span class="token number">1</span>）每个节点或者是黑色，或者是红色。（<span class="token number">2</span>）根节点是黑色。（<span class="token number">3</span>）每个叶子节点（NIL）是黑色。（注意：这里叶子节点，是指为空<span class="token punctuation">(</span>NIL或NULL<span class="token punctuation">)</span>的叶子节点！）（<span class="token number">4</span>）如果一个节点是红色的，则它的子节点必须是黑色的。（<span class="token number">5</span>）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>TreeMap的遍历，先找到第一个节点，调用该节点的后继节点方法。一直下去。</li><li>总的时间复杂度为 O(log n) + O(n * log k) ≈ O(n)。<ul><li>log k: 查询右子树复杂度。n各节点</li></ul></li><li>它实际是要比跳表要慢一点的</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> TreeMap<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">successor</span><span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span>        如果当前节点为空，返回空        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        如果当前节点有右子树，取右子树中最小的节点        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> t<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        如果当前节点没有右子树        如果当前节点是父节点的左子节点，直接返回父节点        如果当前节点是父节点的右子节点，一直往上找，        直到找到一个祖先节点是其父节点的左子节点为止，返回这个祖先节点的父节点        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> t<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>        Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> ch <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> ch <span class="token operator">==</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ch <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>TreeMap只使用到了红黑树，所以它的时间复杂度为O(log n)，</li><li>TreeMap: (只是红黑树,不支持链表操作)，HashMap多了prev和next节点等。</li><li>数据结构不一样,所以数据结构的范围,完全没有可比性。TreeMap没有范围限制。</li><li>都不是线程安全的</li><li>TreeMap多实现接口NavigableMap&lt;K,V&gt; extends SortedMap&lt;K,V&gt;。</li><li>存储位置定位，TreeMap通过自定义比较器，不自定义使用默认比较器，<ul><li>Comparable—compareTo</li><li>Comparator—comparator</li></ul></li><li>HashMap通常比TreeMap快一点</li><li>KEY 和 Value 限制</li></ul><p>HashMap: Key和 Value 都可以为 null      ( 如果key 为 null 的话, hashCode = 0   )<br>TreeMap: Key 不能为 null , Value 可以为 null<br>HashTable: Key 不能为 null , Value 不能为 null<br>LinkedHashMap: 由 HashMap实现, 同HashMap</p><table><thead><tr><th>集合类</th><th>key</th><th>value</th><th>super</th><th>说明</th></tr></thead><tbody><tr><td>HashMap</td><td>可以为null</td><td>可以为null</td><td>AbstractMap</td><td>线程不安全</td></tr><tr><td>TreeMap</td><td>不能为null</td><td>可以为null</td><td>AbstractMap</td><td>线程不安全</td></tr><tr><td>ConcurrentHashMap</td><td>不能为null</td><td>不能为null</td><td>AbstractMap</td><td>线程局部安全</td></tr><tr><td>HashTable</td><td>不能为null</td><td>不能为null</td><td>Dictionary</td><td>线程安全</td></tr></tbody></table><h2 id="HashSet-amp-LinkedHashSet-源码分析以及集合常见面试题目"><a href="#HashSet-amp-LinkedHashSet-源码分析以及集合常见面试题目" class="headerlink" title="HashSet &amp; LinkedHashSet 源码分析以及集合常见面试题目"></a>HashSet &amp; LinkedHashSet 源码分析以及集合常见面试题目</h2><p><strong>Set 集合的特点</strong></p><ul><li><p>HashSet 基于HashMap，就是存的全部是key而已，底层是数组 + 单链表 + 红黑树的数据结构。</p></li><li><p>LinkedHashSet 基于LinkedHashMap，底层是 数组 + 单链表 + 红黑树 + 双向链表的数据结构</p></li><li><p>Set 不允许存储重复元素，允许存储 null，只有一个null。</p></li><li><p>HashSet 存储元素是无序且不等于访问顺序。</p></li><li><p>LinkedHashSet 存储元素是无序的，但是由于双向链表的存在，迭代时获取元素的顺序等于元素的添加顺序，注意这里不是访问顺序。</p></li><li><p>HashSet是通过HashMap实现的,TreeSet是通过TreeMap实现的,只不过Set用的只是Map的key。</p></li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><pre class="line-numbers language-java"><code class="language-java">HashSet 真实的存储元素结构<span class="token keyword">private</span> <span class="token keyword">transient</span> HashMap<span class="token operator">&lt;</span>E<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">;</span>作为各个存储在 HashMap 元素的键值对中的 Value<span class="token punctuation">,</span>所以每个key的value都相同，都是一个object。<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object PRESENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>空参数构造方法 调用 HashMap 的空构造参数  初始化了 HashMap 中的加载因子 loadFactor <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>使用了公式，可以减少扩容。<span class="token keyword">public</span> <span class="token function">HashSet</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token number">75f</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>该方法为 <span class="token keyword">default</span> 访问权限，不允许使用者直接调用，目的是为了初始化 LinkedHashSet 时使用<span class="token function">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">boolean</span> dummy<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他的和HashMap一样。</p><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>迭代顺序不等于访问顺序<br>accessOrder=false；ecvit=false；</p><h2 id="HashSet-如何检查重复-与-HashMap-的关系？"><a href="#HashSet-如何检查重复-与-HashMap-的关系？" class="headerlink" title="HashSet 如何检查重复,与 HashMap 的关系？"></a>HashSet 如何检查重复,与 HashMap 的关系？</h2><ul><li>HashSet 内部使用 HashMap 存储元素，对应的键值对的键为 Set 的存储元素，值为一个默认的 Object 对象。</li><li>HashSet 通过存储元素的 hashCode 方法和 equals 方法来确定元素是否重复。</li></ul><p><strong>是否了解 fast-fail 规则</strong></p><ul><li><p>快速失败（fail—fast）在用迭代器遍历一个集合对象时，如果遍历过程中集合对象中的内容发生了修改（增加、删除、修改），则会抛出ConcurrentModificationException。</p></li><li><p>迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集合在被遍历期间如果内容发生变化，就会改变 modCount 的值。每当迭代器使用hasNext()/next() 遍历下一个元素之前，都会检测 modCount 变量是否为expectedmodCount 值，是的话就返回遍历值；否则抛出异常，终止遍历。</p></li><li><p>场景：java.util包下的集合类都是快速失败的，不能在多线程下发生并发修改（迭代过程中被修改）。</p></li></ul><h2 id="集合在遍历过程中是否可以删除元素，为什么迭代器就可以安全删除元素"><a href="#集合在遍历过程中是否可以删除元素，为什么迭代器就可以安全删除元素" class="headerlink" title="集合在遍历过程中是否可以删除元素，为什么迭代器就可以安全删除元素"></a>集合在遍历过程中是否可以删除元素，为什么迭代器就可以安全删除元素</h2><ul><li><p>集合在使用 for 循环或者高级 for 循环迭代的过程中不允许使用，集合本身的 remove 方法删除元素，如果进行错误操作将会导致 ConcurrentModificationException异常的发生</p></li><li><p>Iterator 可以删除访问的当前元素(current)，一旦删除的元素是Iterator 对象中 next 所正在引用的，在 Iterator 删除元素通过 修改 modCount 与 expectedModCount 的值，可以使下次在调用 remove 的方法时候两者仍然相同因此不会有异常产生。</p></li></ul><h2 id="for，foreach和Iterator的关系："><a href="#for，foreach和Iterator的关系：" class="headerlink" title="for，foreach和Iterator的关系："></a>for，foreach和Iterator的关系：</h2><ul><li><p>Iterator ：Java提供一个专门的迭代器«interface»Iterator。</p></li><li><p>Iterable ：“返回”一个迭代器,我们常用的实现了该接口的子接口有: Collection, Deque, List, Queue, Set。</p></li><li><p>foreach是jdk5.0新增加的一个循环结构，可以用来处理集合中的每个元素而不用考虑集合定下标。就是为了让用Iterator简单。</p></li><li><p>删除的时候，区别就是在remove，for循环中调用集合remove会导致原集合变化导致错误，而应该用迭代器的remove方法。因为它的remove()方法不仅会删除元素，因为通过Iterator删除数据时，HashMap的modCount和Iterator的expectedModCount都会自增，不影响二者的相等性。还会维护一个标志，用来记录目前是不是可删除状态，例如，你不能连续两次调用它的remove()方法，调用之前至少有一次next()方法的调用。</p></li></ul><h2 id="集合结尾"><a href="#集合结尾" class="headerlink" title="集合结尾"></a>集合结尾</h2><p><a href="https://juejin.im/post/5ad6313df265da2386706662">https://juejin.im/post/5ad6313df265da2386706662</a><br><a href="https://www.cnblogs.com/luao/p/10903151.html#_label14">https://www.cnblogs.com/luao/p/10903151.html#_label14</a><br>总结：<a href="https://www.yuque.com/yulongsun/java/dgp94h?language=en-us">https://www.yuque.com/yulongsun/java/dgp94h?language=en-us</a><br>序列化：<a href="https://www.hollischuang.com/archives/1150">https://www.hollischuang.com/archives/1150</a><br><a href="https://blog.csdn.net/chenssy/article/details/73749297">https://blog.csdn.net/chenssy/article/details/73749297</a><br><a href="http://cmsblogs.com/?page_id=3027&amp;vip=1">http://cmsblogs.com/?page_id=3027&amp;vip=1</a><br>集合：<a href="http://cmsblogs.com/?p=4781">http://cmsblogs.com/?p=4781</a><br>HashMap : <a href="https://zhuanlan.zhihu.com/p/21673805">https://zhuanlan.zhihu.com/p/21673805</a><br>List ：<a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484130&amp;idx=1&amp;sn=4052ac3c1db8f9b33ec977b9baba2308&amp;scene=19#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484130&amp;idx=1&amp;sn=4052ac3c1db8f9b33ec977b9baba2308&amp;scene=19#wechat_redirect</a><br>Collection ：<a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484122&amp;idx=1&amp;sn=c3bd6436b3e661ae15cb9d7154d82b89&amp;scene=19#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484122&amp;idx=1&amp;sn=c3bd6436b3e661ae15cb9d7154d82b89&amp;scene=19#wechat_redirect</a></p><p>源码：<a href="https://www.hollischuang.com/archives/tag/java-7-%e6%ba%90%e7%a0%81%e5%ad%a6%e4%b9%a0%e7%b3%bb%e5%88%97">https://www.hollischuang.com/archives/tag/java-7-%e6%ba%90%e7%a0%81%e5%ad%a6%e4%b9%a0%e7%b3%bb%e5%88%97</a></p><p>常见面试题<br><a href="https://mp.weixin.qq.com/s/1_h8QTGFFNftdpc94l1gug">https://mp.weixin.qq.com/s/1_h8QTGFFNftdpc94l1gug</a><br><a href="https://mp.weixin.qq.com/mp/homepage?__biz=MzI4Njg5MDA5NA==&amp;hid=15&amp;sn=9ca07e967976d9d58947c40575bfca71&amp;scene=1&amp;devicetype=android-23&amp;version=27000af2&amp;lang=zh_CN&amp;nettype=WIFI&amp;ascene=7&amp;session_us=gh_085b56c42174&amp;wx_header=1">https://mp.weixin.qq.com/mp/homepage?__biz=MzI4Njg5MDA5NA==&amp;hid=15&amp;sn=9ca07e967976d9d58947c40575bfca71&amp;scene=1&amp;devicetype=android-23&amp;version=27000af2&amp;lang=zh_CN&amp;nettype=WIFI&amp;ascene=7&amp;session_us=gh_085b56c42174&amp;wx_header=1</a><br><a href="https://mp.weixin.qq.com/s/3ew-HiaPu0rDCjSpuyAhOQ">https://mp.weixin.qq.com/s/3ew-HiaPu0rDCjSpuyAhOQ</a></p><p>面试官竟然问我Java中的String有没有长度限制！？<a href="https://www.hollischuang.com/archives/3916">https://www.hollischuang.com/archives/3916</a></p><p><a href="https://javadoop.com/post/hashmap">https://javadoop.com/post/hashmap</a></p><h2 id="Java中的String有没有长度限制"><a href="#Java中的String有没有长度限制" class="headerlink" title="Java中的String有没有长度限制"></a>Java中的String有没有长度限制</h2><p>编译器，存在uft常量池中，16位的，最大也就16位，65534.<br>运行期，INteger的最大值，约4G。长度是int存的，根据这个判断。</p><h2 id="Unsafe类和内存屏障"><a href="#Unsafe类和内存屏障" class="headerlink" title="Unsafe类和内存屏障"></a>Unsafe类和内存屏障</h2><p>写volatile变量之前，加入了写屏障。<br>读之后，加了读屏障。在c++代码中加的。</p><h2 id="CAS的介绍"><a href="#CAS的介绍" class="headerlink" title="CAS的介绍"></a>CAS的介绍</h2><ul><li>CAS是compare and swap 的缩写，就是比较交换的意思。cas是一种基于锁的操作，是乐观锁。在java中分为乐观锁和悲观锁。悲观锁是将资源锁住，等第一个获得锁的线程释放后锁之后，下一个线程才可以访问。而乐观锁采用比较宽泛的态度，通过不加锁来处理资源，比如说通过给记录添加version来获取数据。</li><li>CAS操作包含三个操作数-内存的位置（V），预期值（A）和新值(B)，如果内存地址里面的值和A一样，那么将在内存里面更新成B。CAS是通过无限循环来获取数据的，如果在第一轮循环中，a线程获取地址里面的值被b线程修改了，那么a线程需要自旋，到下次循环才有可能会执行。</li></ul><h2 id="ConcurrentHashMap分析"><a href="#ConcurrentHashMap分析" class="headerlink" title="ConcurrentHashMap分析"></a>ConcurrentHashMap分析</h2><ul><li>jdk1.7中是采用Segment + HashEntry + ReentrantLock的方式进行实现的。</li><li>1.8中采用Node + CAS + Synchronized来保证并发安全进行实现。</li><li><a href="https://yq.aliyun.com/articles/36781">https://yq.aliyun.com/articles/36781</a></li></ul><h3 id="CHM的数据结构"><a href="#CHM的数据结构" class="headerlink" title="CHM的数据结构"></a>CHM的数据结构</h3><ul><li>jdk7，CHM和HM一样，都是数组+链表，但是CHM外部是一个Segment数组，每个segment像HashMap一样的数组链表结构，Segment继承自ReentrantLock。<ul><li>初始化操作：new ConcurrentHashMap() 无参构造函数进行初始化的，那么初始化完成后：<ul><li>Segment 数组长度默认为 16，不可以扩容,</li><li>Segment[i] 的默认大小为 2，负载因子是 0.75，得出初始阈值为 1.5，也就是以后插入第一个元素不会触发扩容，插入第二个会进行第一次扩容。</li><li>这里初始化了 segment[0]，其他位置还是 null，因为时刻变化，后面的段用ss[0]的当前大小。</li><li>当前 segmentShift 的值为 32 - 4 = 28，segmentMask 为 16 - 1 = 15，姑且把它们简单翻译为移位数和掩码，这两个值马上就会用到</li></ul></li><li>数据插入，这里要进行两次Hash去定位数据的存储位置。</li><li>多个线程同时put：首先尝试一次tryLock，不成功进入scanForPut方法，结束条件，一个是 tryLock() 成功了，循环终止，另一个就是重试次数超过了 MAX_SCAN_RETRIES，进到 lock() 方法，此方法会阻塞等待，直到成功拿到独占锁。</li><li>size()</li></ul></li></ul><p>这个方法就是看似复杂，但是其实就是做了一件事，那就是获取该 segment 的独占锁，如果需要的话顺便实例化了一下 node。</p><ul><li>jdk8, CHM和HM一样，数组+链表+红黑树。</li></ul><h3 id="CHM是先插入再扩容还是先扩容再插入，HashMap呢"><a href="#CHM是先插入再扩容还是先扩容再插入，HashMap呢" class="headerlink" title="CHM是先插入再扩容还是先扩容再插入，HashMap呢"></a>CHM是先插入再扩容还是先扩容再插入，HashMap呢</h3><ul><li>JDK8，CHM和HashMap是先插入再扩容。</li><li>JDK7，CHM和HM先进行扩容，再插值</li></ul><h2 id="为什么使用synchronized而不是ReentrantLock？"><a href="#为什么使用synchronized而不是ReentrantLock？" class="headerlink" title="为什么使用synchronized而不是ReentrantLock？"></a>为什么使用synchronized而不是ReentrantLock？</h2><ul><li><p><a href="https://echopoison.com/2019/09/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%7C%E3%80%8ARedis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%8B/">https://echopoison.com/2019/09/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%7C%E3%80%8ARedis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E3%80%8B/</a></p></li><li><p>ReentrantLock是排他锁，该锁在同一时刻只允许一个线程来访问</p></li><li><p>synchronize是java的同步原语。</p></li><li><p>Lock的默认lock不支持带参数，所以用起来麻烦。</p></li><li><p>jdk7使用重入锁是通过继承，若在jdk8使用则要放在Node节点中，因为要锁node，但是只有头节点才会用到，后面的只有头结点没了才会用到，相当于这个lock就是被浪费掉了，这中间编码方面来说还需要考虑锁的“交接”等问题。</p></li><li><p>因为synchronized已经得到了极大地优化，在特定情况下并不比ReentrantLock差。它也支持重入，</p></li><li><p>Lock接口可以尝试非阻塞地获取锁。</p></li><li><p>使用lock的时候线程处于waiting状态，而使用synchronized的时候处于blocked状态。</p></li><li><p>waiting是因为调用了wait等方法，需要别的线程唤醒或者给一个过期时间。</p></li><li><p>blocked阻塞在synchronize修饰的方法，代码块等。需要获取监视器锁。</p></li><li><p>与wating状态相关联的是等待队列，与blocked状态相关的是同步队列，一个线程由等待队列迁移到同步队列时，线程状态将会由wating转化为blocked。可以这样说，blocked状态是处于wating状态的线程重新焕发生命力的必由之路。</p></li><li><p>因为粒度降低了，在相对而言的<strong>低粒度加锁方式，synchronized并不比ReentrantLock差</strong>，在粗粒度加锁中ReentrantLock可能通过Condition来控制各个低粒度的边界，更加的灵活，而在低粒度中，Condition的优势就没有了</p></li><li><p><strong>不断优化synchronized</strong>：JVM的开发团队从来都没有放弃synchronized，而且基于JVM的synchronized优化空间更大，使用内嵌的关键字比使用API更加自然</p></li><li><p>在大量的数据操作下，对于JVM的内存压力，<strong>基于API的ReentrantLock会开销更多的内存</strong>，虽然不是瓶颈，但是也是一个选择依据</p></li></ul><h3 id="HashMap在多线程环境下何时会出现并发安全问题？"><a href="#HashMap在多线程环境下何时会出现并发安全问题？" class="headerlink" title="HashMap在多线程环境下何时会出现并发安全问题？"></a>HashMap在多线程环境下何时会出现并发安全问题？</h3><ul><li>插入，会出现覆盖现象。</li><li>扩容，同时扩容，容量不一定。</li><li>jdk7产生循环链表</li></ul><h3 id="ConcurrentHashMap使用了哪些锁？"><a href="#ConcurrentHashMap使用了哪些锁？" class="headerlink" title="ConcurrentHashMap使用了哪些锁？"></a>ConcurrentHashMap使用了哪些锁？</h3><p>（1）synchronized<br>java中的关键字，内部实现为监视器锁，主要是通过对象监视器在对象头中的字段来表明的。<br>synchronized从旧版本到现在已经做了很多优化了，在运行时会有三种存在方式：偏向锁，轻量级锁，重量级锁。</p><p>偏向锁，是指一段同步代码一直被一个线程访问，那么这个线程会自动获取锁，降低获取锁的代价。</p><p>轻量级锁，是指当锁是偏向锁时，被另一个线程所访问，偏向锁会升级为轻量级锁，这个线程会通过自旋的方式尝试获取锁，不会阻塞，提高性能。</p><p>重量级锁，是指当锁是轻量级锁时，当自旋的线程自旋了一定的次数后，还没有获取到锁，就会进入阻塞状态，该锁升级为重量级锁，重量级锁会使其他线程阻塞，性能降低。</p><p>（2）CAS<br>CAS，Compare And Swap，它是一种乐观锁，认为对于同一个数据的并发操作不一定会发生修改，在更新数据的时候，尝试去更新数据，如果失败就不断尝试。</p><p>（3）volatile（非锁）<br>java中的关键字，当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。（这里牵涉到java内存模型的知识，感兴趣的同学可以自己查查相关资料）</p><p>volatile只保证可见性，不保证原子性，比如 volatile修改的变量 i，针对i++操作，不保证每次结果都正确，因为i++操作是两步操作，相当于 i = i +1，先读取，再加1，这种情况volatile是无法保证的。</p><p>（4）自旋锁<br>自旋锁，是指尝试获取锁的线程不会阻塞，而是循环的方式不断尝试，这样的好处是减少线程的上下文切换带来的开锁，提高性能，缺点是循环会消耗CPU。</p><p>（5）分段锁</p><p>分段锁，是一种锁的设计思路，它细化了锁的粒度，主要运用在ConcurrentHashMap中，实现高效的并发操作，当操作不需要更新整个数组时，就只锁数组中的一项就可以了。</p><p>（5）ReentrantLock</p><p>可重入锁，是指一个线程获取锁之后再尝试获取锁时会自动获取锁，可重入锁的优点是避免死锁。</p><p>其实，synchronized也是可重入锁。</p><h3 id="ConcurrentHashMap的扩容是怎么进行的？"><a href="#ConcurrentHashMap的扩容是怎么进行的？" class="headerlink" title="ConcurrentHashMap的扩容是怎么进行的？"></a>ConcurrentHashMap的扩容是怎么进行的？</h3><ul><li><p>jdk7，扩容的时候，会对Segment加锁，所以仅仅影响这个Segment，只对Entry扩容，段的数量是确定的，不同的Segment还是可以并发的，所以解决了线程的安全问题，同时又采用了分段锁也提升了并发的效率。</p><ul><li><p>先对数组长度增加一倍，然后把原先数据复制过来，迁移完毕，新数组引用直接替换旧的。</p></li><li><p>迁移过程中，用了两个for，第一个for的目的是为了，判断是否有迁移位置一样的元素并且位置还是相邻，根据HashMap的设计策略，首先table的大小必须是2的n次方，我们知道扩容后的每个链表的元素的位置，要么不变，要么是原table索引位置+原table的容量大小。所以用了一个lastRun，这个变量之后的所有都会放到一起，之前的随机分。</p></li><li><p>不过比较坏的情况就是每次 lastRun 都是链表的最后一个元素或者很靠后的元素，那么这次遍历就有点浪费了。不过 Doug Lea 也说了，根据统计，如果使用默认的阈值，大约只有 1/6 的节点需要克隆。</p></li><li><p>并发度降低，为段数组大小。</p></li></ul></li><li><p>JDK1.7锁的粒度是基于Segment的，而JDK1.8锁的粒度就是HashEntry（首节点）</p></li><li><p>扩容时容量变为两倍，并把部分元素迁移到其它桶中。</p></li><li><p>jdk8， 锁粒度更细，它可以只锁一个node的头</p><ul><li><p>理想情况下talbe数组元素的大小就是其支持并发的最大个数，在JDK7里面最大并发个数就是Segment的个数，默认值是16，可以通过构造函数改变一经创建不可更改，这个值就是并发的粒度，每一个segment下面管理一个table数组，加锁的时候其实锁住的是整个segment，这样设计的好处在于数组的扩容是不会影响其他的segment的，简化了并发设计，不足之处在于并发的粒度稍粗，</p></li><li><p>JDK8里面，去掉了分段锁，将锁的级别控制在了更细粒度的table元素级别，也就是说只需要锁住这个链表的head节点，并不会影响其他的table元素的读写，好处在于并发的粒度更细，影响更小，从而并发效率更好，但不足之处在于并发扩容的时候，由于操作的table都是同一个，不像JDK7中分段控制，所以这里需要等扩容完之后，所有的读写操作才能进行，<strong>所以扩容的效率就成为了整个并发的一个瓶颈点</strong>，好在Doug lea大神对<strong>扩容做了优化</strong>，本来在一个线程扩容的时候，如果影响了其他线程的数据，那么其他的线程的读写操作都应该阻塞，但Doug lea说你们闲着也是闲着，不如来一起参与扩容任务，这样人多力量大，办完事你们该干啥干啥，别浪费时间，于是在JDK8的源码里面就引入了一个ForwardingNode类，在一个线程发起扩容的时候，就会改变sizeCtl这个值。</p></li><li><p>在此期间如果其他线程的有改写操作都会判断head节点是否为forwardNode节点，如果是就帮助扩容。扩容结束后，会把newTab赋给table，所以成功了以后这个标志就没了</p></li><li><p>迁移元素时会锁住当前桶，也是分段锁的思想；</p></li><li><p>扩容中如果发现正在扩容，则加入进去协助。</p></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java">sizeCtl <span class="token operator">=</span> <span class="token number">0</span>，表示使用后面的默认容量。正数或<span class="token number">0</span>代表hash表还没有被初始化。sizeCtl <span class="token operator">></span> <span class="token number">0</span>，在初始化之前存储的是传入的容量，在初始化或扩容后存储的是下一次的扩容门槛；类似于扩容阈值。它的值始终是当前ConcurrentHashMap容量的<span class="token number">0.75</span>倍，这与loadfactor是对应的。实际容量<span class="token operator">>=</span>sizeCtl，则扩容。<span class="token operator">-</span><span class="token number">1</span> 代表table正在初始化，sizeCtl在初始化后存储的是扩容门槛；<span class="token number">0</span><span class="token punctuation">.</span>75n；sizeCtl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">resizeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> nThreads<span class="token punctuation">)</span>，表示正在进行扩容，高位存储扩容邮戳，低位存储扩容线程数加<span class="token number">1</span>；扩容时sizeCtl高位存储扩容邮戳<span class="token punctuation">(</span>resizeStamp<span class="token punctuation">)</span>，低位存储扩容线程数加<span class="token number">1</span>（<span class="token number">1</span><span class="token operator">+</span>nThreads）；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数据迁移：transfer,将原来的 tab 数组的元素迁移到新的 nextTab 数组中。需要外围控制，每个线程分一个小的任务。</li></ul><p><strong>在扩容时读写操作如何进行</strong></p><ul><li><p>get读操作，如果遇到扩容的时候，会调用标志正在扩容节点ForwardingNode的find方法，查找该节点，匹配就返回。get操作全程不需要加锁是因为Node的成员val是用volatile修饰的和数组用volatile修饰没有关系。</p></li><li><p>对于put/remove写操作，</p><ul><li><p>头结点hash == -1, 帮助扩容。如果桶数组不为空，并且当前桶第一个元素为ForwardingNode类型，并且nextTab不为空。说明当前桶已经迁移完毕了，才去帮忙迁移其它桶的元素。扩容时会把旧桶的第一个元素置为ForwardingNode，并让其nextTab指向新桶数组</p></li><li><p>否则，判断是否是链表，是就遍历寻找。</p></li></ul></li><li><p>volatile修饰的数组引用是强可见的，但是其元素却不一定，所以，这导致size的根据sumCount的方法并不准确。</p></li><li><p>同理Iteritor的迭代器也一样，并不能准确反映最新的实际情况</p></li><li><p>整个扩容过程都是通过CAS控制sizeCtl这个字段来进行的，这很关键；</p></li></ul><h3 id="CHM的remove"><a href="#CHM的remove" class="headerlink" title="CHM的remove"></a>CHM的remove</h3><ul><li>计算hash；</li><li>如果所在的桶不存在，表示没有找到目标元素，返回；</li><li>如果正在扩容，则协助扩容完成后再进行删除操作；</li><li>锁住这个桶，</li><li>如果是以链表形式存储的，则遍历整个链表查找元素，找到之后再删除；</li><li>如果是以树形式存储的，则遍历树查找元素，找到之后再删除；</li><li>如果是以树形式存储的，删除元素之后树较小，则退化成链表；</li><li>如果确实删除了元素，则整个map元素个数减1，并返回旧值；</li><li>如果没有删除元素，则返回null；</li></ul><h2 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h2><ol><li>如果没有初始化就先调用initTable（）方法来进行初始化过程</li><li>如果没有hash冲突就直接CAS插入</li><li>如果还在进行扩容操作就先进行扩容</li><li>如果存在hash冲突，就加锁来保证线程安全，这里有两种情况，一种是链表形式就直接遍历到尾端插入，一种是红黑树就按照红黑树结构插入，</li><li>最后一个如果该链表的数量大于阈值8，就要先转换成黑红树的结构，break再一次进入循环(阿里面试官问题，默认的链表大小，超过了这个值就会转换为红黑树);</li><li>如果添加成功就调用addCount（）方法统计size，并且检查是否需要扩容</li></ol><p>判空；ConcurrentHashMap的key、value都不允许为null<br>计算hash。利用方法计算hash值。</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>h <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> HASH_BITS<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>遍历table，进行节点插入操作，过程如下：<br>如果table为空，则表示ConcurrentHashMap还没有初始化，则进行初始化操作：initTable()<br>根据hash值获取节点的位置i，若该位置为空，则直接插入，这个过程是不需要加锁的。计算f位置：i=(n - 1) &amp; hash<br>如果检测到fh = f.hash == -1，则f是ForwardingNode节点，表示有其他线程正在进行扩容操作，则帮助线程一起进行扩容操作<br>如果f.hash &gt;= 0 表示是链表结构，则遍历链表，如果存在当前key节点则替换value，否则插入到链表尾部。如果f是TreeBin类型节点，则按照红黑树的方法更新或者增加节点<br>若链表长度 &gt; TREEIFY_THRESHOLD(默认是8)，则将链表转换为红黑树结构<br>调用addCount方法，ConcurrentHashMap的size + 1</p><h3 id="CHM的get"><a href="#CHM的get" class="headerlink" title="CHM的get"></a>CHM的get</h3><p>没有加锁。</p><ul><li>hash到所在桶，桶空返回null；</li><li>如果桶中第一个元素就是该找的元素，直接返回；</li><li>如果是树或者正在迁移元素，则调用各自Node子类的find()方法寻找元素；</li><li>如果是链表，遍历整个链表寻找元素；</li></ul><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>源码有点儿长，稍微复杂了一些，在这里我们抛弃它多线程环境，我们从单线程角度来看：<br>为每个内核分任务，并保证其不小于16<br>检查nextTable是否为null，如果是，则初始化nextTable，使其容量为table的两倍<br>死循环遍历节点，知道finished：节点从table复制到nextTable中，支持并发，请思路如下：<br>如果节点 f 为null，则插入ForwardingNode（采用Unsafe.compareAndSwapObjectf方法实现），这个是触发并发扩容的关键<br>如果f为链表的头节点（fh &gt;= 0）,则先构造一个反序链表，然后把他们分别放在nextTable的i和i + n位置，并将ForwardingNode 插入原节点位置，代表已经处理过了<br>如果f为TreeBin节点，同样也是构造一个反序 ，同时需要判断是否需要进行unTreeify()操作，并把处理的结果分别插入到nextTable的i 和i+nw位置，并插入ForwardingNode 节点，插入通过Unsafe实现。<br>所有节点复制完成后，则将table指向nextTable，同时更新sizeCtl = nextTable的0.75倍，完成扩容过程<br>在多线程环境下，ConcurrentHashMap用两点来保证正确性：ForwardingNode和synchronized。当一个线程遍历到的节点如果是ForwardingNode，则继续往后遍历，如果不是，则将该节点加锁，防止其他线程进入，完成后设置ForwardingNode节点，以便要其他线程可以看到该节点已经处理过了，如此交叉进行，高效而又安全。</p><h3 id="CHM如何求size-如何保证求size过程中插入了数据，最终结果的正确性？"><a href="#CHM如何求size-如何保证求size过程中插入了数据，最终结果的正确性？" class="headerlink" title="CHM如何求size? 如何保证求size过程中插入了数据，最终结果的正确性？"></a>CHM如何求size? 如何保证求size过程中插入了数据，最终结果的正确性？</h3><p>没有加锁。</p><ul><li>JDK7在不上锁的前提逐个段计算2次size，若某相邻两次获取所有的修改次数一样，则直接返回结果。否则锁住map，逐个段计算。</li><li>JDK8，put方法和remove方法都会通过addCount方法维护Map的size。size方法通过sumCount获取由addCount方法维护的Map的size。原理和LongAdder一样，分散再求和</li><li>由于ConcurrentHashMap在统计size时可能正被多个线程操作，而我们又不可能让他停下来让我们计算，所以只能计量一个估计值。</li></ul><h3 id="ConcurrentHashMap是否是强一致性的？"><a href="#ConcurrentHashMap是否是强一致性的？" class="headerlink" title="ConcurrentHashMap是否是强一致性的？"></a>ConcurrentHashMap是否是强一致性的？</h3><ul><li><p>不是，volatile修饰的数组引用是强可见的，但是其元素却不一定，所以，这导致size的根据sumCount的方法并不准确。</p></li><li><p>get如果和remove连用则不行。</p></li><li><p>jdk7中，remove创建一个新的链表，jdk8next也是volatile的，所以可以感知到变化。</p></li><li><p>在并发包下迭代器迭代时是可以增删元素的，KeyIterator在调用next方法时，最终会作用在Traverser类的advance方法中，advance方法负责寻找下一个元素。此方法中不会抛出ConcurrentModificationException；advance方法中通过不断循环遍历，其中考虑到table的大小发生变化，并且节点的组织方式可能是链表也可能是红黑树，遍历的过程中可能会有部分数据遍历不到，此为弱一致性的表现。</p></li></ul><h2 id="String的hashcode"><a href="#String的hashcode" class="headerlink" title="String的hashcode"></a>String的hashcode</h2><p><code>s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]</code></p><h3 id="ConcurrentHashMap不能解决哪些问题？"><a href="#ConcurrentHashMap不能解决哪些问题？" class="headerlink" title="ConcurrentHashMap不能解决哪些问题？"></a>ConcurrentHashMap不能解决哪些问题？</h3><p>复合操作的线程安全</p><h3 id="ConcurrentHashMap中有哪些不常见的技术值得学习？"><a href="#ConcurrentHashMap中有哪些不常见的技术值得学习？" class="headerlink" title="ConcurrentHashMap中有哪些不常见的技术值得学习？"></a>ConcurrentHashMap中有哪些不常见的技术值得学习？</h3><p>cas+自旋实现乐观锁，就是消耗cpu资源，但不会线程切换。</p><ul><li><a href="http://ifeve.com/java-concurrent-hashmap-1/">http://ifeve.com/java-concurrent-hashmap-1/</a></li><li>分段锁的思想，减少同一把锁争用带来的低效问题；</li><li>CounterCell，分段存储元素个数，减少多线程同时更新一个字段带来的低效；</li><li>@sun.misc.Contended（CounterCell上的注解），避免伪共享</li><li>多线程协同进行扩容；</li></ul><h3 id="1-7和1-8区别"><a href="#1-7和1-8区别" class="headerlink" title="1.7和1.8区别"></a>1.7和1.8区别</h3><ul><li><p>1.7版本中concurrentHashMap 采用数组+Segment+分段锁的方式实现。使用了分段锁的技术，将数据分成一段一段存储，然后给每一段数据配上一把锁，当一个线程占用锁访问其中的一个数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。courrenthashmap定位到一个元素的过程需要进行两次hash操作。第一次定位到segment，第二次定位到元素所在的链表头部。定位segment的时候，会首先使用hash的变种算法对hashcode进行一次再散列，目的是为了减少散列的冲突，是元素均匀地分布在不同的segment上，从而提高容器存取效率.（）</p></li><li><p>定位segment和定位entry的区别：segment使用的是元素的hash()值通过再散列后得到的值的高位，而定位entry直接使用的hash()值。目的是为了避免两次散列后的值一样，虽然在segment里散列开了，但是却没有再hashentry里面散开。</p><pre class="line-numbers language-java"><code class="language-java">hash <span class="token operator">>>></span> segmentShift<span class="token punctuation">)</span> <span class="token operator">&amp;</span> segmentMask<span class="token comment" spellcheck="true">// 定位 Segment 所使用的 hash 算法 </span><span class="token keyword">int</span> index <span class="token operator">=</span> hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定位 HashEntry 所使用的 hash 算法 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>缺点：这种结构hash的过程要比普通的hashmap要长。</p></li><li><p>好处：写操作的时候可以只对元素所在的Segment进行加锁即可，不会影响到其他的Segment，在最理想的情况下，ConcurrentHashMap可以最高同时支持Segment数量大小的写操作</p></li><li><p>java8currentHashmap结构基本上和java8的hashmap一样，不过保证了线程的安全性。</p></li><li><p>1.7和1.8的区别：</p><ul><li>数据结构上取消了segment分段锁的数据结构，取而代之的是数组加链表加红黑树的结构。</li><li>保证线程安全的机制：1.7采用的是segment的分段锁的机制实现的线程安全，1.8采用的是cas加上synchronized保证线程的安全（putval，replaceNode，clear方法里面有同步代码块）</li><li>锁的细粒化程度：原本是对需要操作的数据的segment加锁，现调整为对每个数组元素加锁（Node）</li><li>链表转化为红黑树，定位节点的hash算法简化会带来弊端，hash冲突加剧，在链表的结点大于8的时候，将链表转化为红黑树进行存储。</li><li>1.8新加了一些volatile变量，1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据或则删除数据时，会通过addCount()方法更新baseCount。因为元素个数保存baseCount中，部分元素的变化个数保存在CounterCell数组中，通过累加baseCount和CounterCell数组中的数量，即可得到元素的总个数。</li></ul></li><li><p>ConcurrentHashMap文章：<a href="https://www.cnblogs.com/aspirant/p/8623864.html">https://www.cnblogs.com/aspirant/p/8623864.html</a></p></li><li><p><a href="http://www.jasongj.com/java/concurrenthashmap/">http://www.jasongj.com/java/concurrenthashmap/</a></p></li><li><p><a href="https://javadoop.com/post/hashmap#toc_5">https://javadoop.com/post/hashmap#toc_5</a></p></li><li><p><a href="http://cmsblogs.com/?p=4781">http://cmsblogs.com/?p=4781</a></p></li><li><p><a href="https://www.yuque.com/yulongsun/java/dgp94h">https://www.yuque.com/yulongsun/java/dgp94h</a></p></li><li><p>阿里面试：<a href="https://www.cnblogs.com/aspirant/p/8625810.html">https://www.cnblogs.com/aspirant/p/8625810.html</a></p></li></ul><h2 id="跳表–ConcurrentSkipListMap源码分析"><a href="#跳表–ConcurrentSkipListMap源码分析" class="headerlink" title="跳表–ConcurrentSkipListMap源码分析"></a>跳表–ConcurrentSkipListMap源码分析</h2><h3 id="什么是跳表"><a href="#什么是跳表" class="headerlink" title="什么是跳表"></a>什么是跳表</h3><ul><li><p>实质就是一种可以进行二分查找的有序链表。如果按照标准的跳表来看的话，每一级索引减少k/2个元素（k为其下面一级索引的个数），那么整个跳表的高度就是(log n)。类似于B+树，<strong>跳表在原有的有序链表上面增加了多级索引，通过索引来实现快速查找。</strong></p></li><li><p>跳表的空间复杂度是O(n)。时间复杂度是O(log n)。</p></li><li><p>每个元素插入时随机生成它的level；</p></li><li><p>最低层包含所有的元素；</p></li><li><p>如果一个元素出现在level(x)，那么它肯定出现在x以下的level中；</p></li><li><p>每个索引节点包含两个指针，一个向下，一个向右；</p></li><li><p>跳表查询、插入、删除的时间复杂度为O(log n)，与平衡二叉树接近；</p></li></ul><h2 id="为什么Redis选择使用跳表而不是红黑树来实现有序集合？"><a href="#为什么Redis选择使用跳表而不是红黑树来实现有序集合？" class="headerlink" title="为什么Redis选择使用跳表而不是红黑树来实现有序集合？"></a>为什么Redis选择使用跳表而不是红黑树来实现有序集合？</h2><p>首先，我们来分析下Redis的有序集合支持的操作：<br>1）插入元素<br>2）删除元素<br>3）查找元素<br>4）有序输出所有元素<br>5）查找区间内所有元素</p><ul><li>其中，前4项红黑树都可以完成，且时间复杂度与跳表一致。</li><li>但是，最后一项，红黑树的效率就没有跳表高了。</li><li>在跳表中，要查找区间的元素，我们只要定位到两个区间端点在最低层级的位置，然后按顺序遍历元素就可以了，非常高效。</li><li>而红黑树只能定位到端点后，再从首位置开始每次都要查找后继节点，相对来说是比较耗时的。</li><li>此外，跳表实现起来很容易且易读，红黑树实现起来相对困难，所以Redis选择使用跳表来实现有序集合。</li></ul><h3 id="ConcurrentSkipListMap"><a href="#ConcurrentSkipListMap" class="headerlink" title="ConcurrentSkipListMap"></a>ConcurrentSkipListMap</h3><ul><li>key,value 均不能为空</li><li>线程安全的有序的哈希表，适用于高并发的场景。</li><li>ConcurrentSkipListMap和TreeMap，它们虽然都是有序的哈希表。但是，第一，它们的线程安全机制不同，TreeMap是非线程安全的，而ConcurrentSkipListMap是线程安全的。第二，ConcurrentSkipListMap是通过跳表实现的，而TreeMap是通过红黑树实现的。</li><li>高并发程序，应当使用ConcurrentSkipListMap，能够提供更高的并发度。线程越多优势越大，和线程数无关。</li><li>迭代器是弱一致性的。没有快速失败机制。</li></ul><p><strong>删除操作</strong><br>（4）如果这个位置有元素，先通过n.casValue(v, null)原子更新把其value设置为null；</p><p>（5）通过n.appendMarker(f)在当前元素后面添加一个marker元素标记当前元素是要删除的元素；</p><p>（6）通过b.casNext(n, f)尝试删除元素；</p><p>（7）如果上面两步中的任意一步失败了都通过findNode(key)中的n.helpDelete(b, f)再去不断尝试删除；</p><p>（8）如果上面两步都成功了，再通过findPredecessor(key, cmp)中的q.unlink(r)删除索引节点；</p><p>（9）如果head的right指针指向了null，则跳表高度降级；</p><pre><code>8 ---&gt; 9 ---&gt; 12  ,删除9</code></pre><ul><li>之所以删除这么麻烦，因为多线程下面，如果直接删除9，让8指向12，同时其他线程,9和12之间插入了一个10，引发错误。<ul><li>如果4失败了，直接重试，</li><li>如果5,6失败了，不断重试去删除；</li></ul></li></ul><p><strong>查找</strong><br>findPredecessor()这个方法是插入、删除、查找元素多个方法共用的。所以是从第一个索引节点往下找，而不是在第一层就往右找。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>输出100，</li><li>如果是int，输出1，</li><li>因为（i-1）会变成Integer类型，但是存入的i是Short类型。</li><li>(short)(i - 1)，这样就可以删除了。<pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>Short<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">short</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="手写阻塞队列（Condition实现）"><a href="#手写阻塞队列（Condition实现）" class="headerlink" title="手写阻塞队列（Condition实现）"></a>手写阻塞队列（Condition实现）</h2><p><a href="https://www.cnblogs.com/keeya/p/9713686.html">https://www.cnblogs.com/keeya/p/9713686.html</a></p><h2 id="面试题网站"><a href="#面试题网站" class="headerlink" title="面试题网站"></a>面试题网站</h2><ul><li><p><a href="https://mp.sohu.com/profile?xpt=M2RjYTUzYTgtZjFmYi00ZGFiLWFiNjMtMTkwMDAwZDM1Mzdj&amp;_f=index_pagemp_2&amp;spm=smpc.content.author.3.1580962938519PGU527a">https://mp.sohu.com/profile?xpt=M2RjYTUzYTgtZjFmYi00ZGFiLWFiNjMtMTkwMDAwZDM1Mzdj&amp;_f=index_pagemp_2&amp;spm=smpc.content.author.3.1580962938519PGU527a</a></p></li><li><p><a href="https://www.sohu.com/a/361523070_120176035?spm=smpc.author.fd-d.6.15809719657757b9sa4s">https://www.sohu.com/a/361523070_120176035?spm=smpc.author.fd-d.6.15809719657757b9sa4s</a></p></li><li><p><a href="https://javadoop.com/post/">https://javadoop.com/post/</a></p></li><li><p><a href="https://www.java1000.com/java%e9%9d%a2%e8%af%95%e9%a2%98%e9%97%af%e5%85%b3">https://www.java1000.com/java%e9%9d%a2%e8%af%95%e9%a2%98%e9%97%af%e5%85%b3</a></p></li><li><p><a href="https://www.javazhiyin.com/158.html">https://www.javazhiyin.com/158.html</a></p></li><li><p><a href="http://www.wityx.com/javase/2_0_0.html">http://www.wityx.com/javase/2_0_0.html</a></p></li></ul><h2 id="字符串的switch是通过equals-和hashCode-方法来实现的。"><a href="#字符串的switch是通过equals-和hashCode-方法来实现的。" class="headerlink" title="字符串的switch是通过equals()和hashCode()方法来实现的。"></a>字符串的switch是通过equals()和hashCode()方法来实现的。</h2><h2 id="jdk10的var类型"><a href="#jdk10的var类型" class="headerlink" title="jdk10的var类型"></a>jdk10的var类型</h2><p>Java中虽然可以使用var来声明变量，但是它还是一种强类型的语言。通过上面反编译的代码，我们已经知道，var只是Java给开发者提供的语法糖，最终在编译之后还是要将var定义的对象类型定义成编译器推断出来的类型的。</p><ul><li><p>现在已知的可以使用var声明变量的几个场景就是初始化局部变量、增强for循环的索引和传统for循环的局部变量定义，</p></li><li><p>还有几个场景是不支持这种用法的，如：<br>方法的参数 构造函数的参数 方法的返回值类型 对象的成员变量 只是定义而不初始化</p></li></ul><p>Java为什么做这些限制，考虑是什么？<br>因为 Java 在运行时还是强类型的语言。如果方法的参数 构造函数的参数 方法的返回值类型都放开限制的话，是没有办法在编译器推断出变量类型的，方法的重载也无从谈起，运行时易报类型转换错。强类型语言的有点应该保留。</p><h2 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h2><p>基本数据类型存在栈上，省内存了，不用创建对象。</p><p>Java中的基本数据类型却是不面向对象的，引入包装类。在集合类中，我们是无法将int 、double等类型放进去的。因为集合的容器要求元素是Object类型。</p><ul><li><p>自动装箱都是通过包装类的valueOf()方法来实现的.自动拆箱都是通过包装类对象的xxxValue()来实现的。</p></li><li><p>将基本数据类型放入集合类，自动装箱</p></li><li><p>包装类型和基本类型的大小比较，是先将包装类进行拆箱成基本数据类型，然后进行比较的。</p></li><li><p>两个包装类型之间的运算，会被自动拆箱成基本类型进行。</p></li><li><p>函数参数与返回值</p></li></ul><p><strong>缺点：</strong></p><ul><li>包装对象的数值比较，不能简单的使用==，虽然-128到127之间的数字可以，但是这个范围之外还是需要使用equals比较。</li><li>前面提到，有些场景会进行自动拆装箱，同时也说过，由于自动拆箱，如果包装类对象为null，那么自动拆箱时就有可能抛出NPE。</li><li>如果一个for循环中有大量拆装箱操作，会浪费很多资源。</li></ul><h2 id="自动拆箱导致的bug"><a href="#自动拆箱导致的bug" class="headerlink" title="自动拆箱导致的bug"></a>自动拆箱导致的bug</h2><ul><li>三目运算符的语法规范：当第二，第三位操作数分别为基本类型和对象时，其中的对象就会拆箱为基本类型进行操作。</li></ul><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Boolean<span class="token operator">></span> map <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Boolean b <span class="token operator">=</span> <span class="token punctuation">(</span>map<span class="token operator">!=</span>null <span class="token operator">?</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>“test”<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>null<span class="token punctuation">;</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>null<span class="token operator">-</span><span class="token operator">></span>null<span class="token punctuation">;</span>null<span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>报错由于该对象为null，所以在拆箱过程中调用null<span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的时候就报了NPE。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解决：</strong><br>保证三目运算符的第二第三位操作数都为对象类型。<br><code>Boolean b = (map!=null ? map.get(&quot;test&quot;) : Boolean.FALSE);</code></p><h2 id="Integer的缓存"><a href="#Integer的缓存" class="headerlink" title="Integer的缓存"></a>Integer的缓存</h2><ul><li>适用于整数值区间-128 至 +127。</li><li>只适用于自动装箱。使用构造函数创建对象不适用。</li></ul><p>当需要进行自动装箱时，如果数字在-128至127之间时，会直接使用缓存中的对象，而不是重新创建一个对象。</p><h1 id="2-jvm虚拟机"><a href="#2-jvm虚拟机" class="headerlink" title="2. jvm虚拟机"></a>2. jvm虚拟机</h1><h2 id="jvm一些常用的参数"><a href="#jvm一些常用的参数" class="headerlink" title="jvm一些常用的参数"></a>jvm一些常用的参数</h2><ul><li><p>-Xms堆的最小值参数 默认为操作系统物理内存的1/64但小于1G, -Xmx堆的最大值参数，默认为物理内存的1/4但小于1G, 设置相等时可以避免自动扩展。-Xmn参数来指定新生代的大小, -XX:SurvivorRation来调整Eden Space及Survivor Space的大小。</p><ul><li>其中-X表示它是JVM运行参数</li><li>ms是memorystart的简称 最小堆容量</li><li>mx是memory max的简称 最大堆容量</li></ul></li><li><p>-Xoss设置本地方法栈的大小（实际无效），-Xss设置虚拟机栈或者本地方法栈的容量，减少线程栈的大小，这样可以使剩余的系统内存支持更多的线程；</p></li><li><p>-XX:PermSize=10M -XX:MaxPermSize=10M设置永久代（方法区）的大小。</p></li><li><p>-XX:MaxMetaspaceSize:元空间最大值。超过了OOM</p></li><li><p>-XX:MetaspaceSize:阈值，超过类型卸载，动态变化这个值</p></li><li><p>-XX:MaxDirectMemorySize来指定最大的堆外内存大小，当使用达到了阈值的时候将调用System.gc来做一次full gc，以此来回收掉没有被使用的堆外内存。</p></li><li><p>参数-XX:PetenureSizeThreshold 设置大对象直接进入年老代的阈值。只对串行收集器和年轻代并行收集器有效，并行回收收集器不识别这个参数。</p></li><li><p>-XX:+PrintGCDetails，打印GC日志</p></li><li><p>-XX:MaxTenuringThreshold 来设置年龄最大值</p></li><li><p>-XX:MinHeapFreeRatio 参数用来设置堆空间最小空闲比例，默认值是 40。当堆空间的空闲内存小于这个数值时，JVM 便会扩展堆空间。</p></li><li><p>-XX:MaxHeapFreeRatio 参数用来设置堆空间最大空闲比例，默认值是 70。当堆空间的空闲内存大于这个数值时，便会压缩堆空间，得到一个较小的堆。<br> 当-Xmx 和-Xms 相等时，-XX:MinHeapFreeRatio 和-XX:MaxHeapFreeRatio 两个参数无效。</p></li></ul><ul><li>–XX:+UseParallelGC：年轻代使用并行垃圾回收收集器。这是一个关注吞吐量的收集器，可以尽可能地减少 GC 时间。</li><li>–XX:ParallelGC-Threads：设置用于垃圾回收的线程数，通常情况下，可以设置和 CPU 数量相等。但在 CPU 数量比较多的情况下，设置相对较小的数值也是合理的；</li><li>–XX:+UseParallelOldGC：设置年老代使用并行回收收集器。</li><li>–XX:+LargePageSizeInBytes：设置大页的大小。32位支持的最大物理内存才4G，所以有了虚拟存储器，通过换页实现。</li></ul><p>-XX:NewRatio=2，设置年轻代和老年代大小的比例年轻代和老年代的比值为1：2,即年轻代占1/3，老年代占2/3</p><p>–XX:ParallelGCThreads=20：设置 20 个线程进行垃圾回收；<br>–XX:+UseParNewGC：年轻代使用并行回收器；<br>–XX:+UseConcMarkSweepGC：年老代使用 CMS 收集器降低停顿；<br>–XX:+SurvivorRatio：设置 <strong>Eden 区和 Survivor 区的比例为 8:1</strong>。稍大的 Survivor 空间可以提高在年轻代回收生命周期较短的对象的可能性，如果 Survivor 不够大，一些短命的对象可能直接进入年老代，这对系统来说是不利的。<br>–XX:TargetSurvivorRatio=90：设置 Survivor 区的可使用率。这里设置为 90%，则允许 90%的 Survivor 空间被使用。默认值是 50%。故该设置提高了 Survivor 区的使用率。当存放的对象超过这个百分比，则对象会向年老代压缩。因此，这个选项更有助于将对象留在年轻代。<br>–XX:MaxTenuringThreshold：设置年轻对象晋升到年老代的年龄。默认值是 15 次，即对象经过 15 次 Minor GC 依然存活，则进入年老代。这里设置为 31，目的是让对象尽可能地保存在年轻代区域。</p><h2 id="JVM调优总结"><a href="#JVM调优总结" class="headerlink" title="JVM调优总结"></a>JVM调优总结</h2><ol><li>把新分配的对象尽量放在新生代，提高新生代大小。</li><li>尽量让大对象进入老年代。</li><li>设置对象进入老年代的年龄，可以大一点，避免fullgc。</li><li>稳定的 Java 堆 VS 动荡的 Java 堆，-Xmx 和-Xms 相等，或者大小相差小一点。</li><li>增大吞吐量提升系统性能，使用关注系统吞吐量的并行回收收集器，–XX:+UseParallelGC ，–XX:ParallelGC-Threads=20 ，–XX:+UseParallelOldGC</li><li>尝试使用大的内存分页</li><li>使用非占有的垃圾回收器，使用关注系统停顿的 CMS 回收器</li></ol><p><a href="https://segmentfault.com/a/1190000004369016">https://segmentfault.com/a/1190000004369016</a></p><p>使用jvisualvm中的CPU分析器分析Java线程Dumps</p><h2 id="阿里中间件团队博客"><a href="#阿里中间件团队博客" class="headerlink" title="阿里中间件团队博客"></a>阿里中间件团队博客</h2><p><a href="http://jm.taobao.org/2016/03/23/3782/">http://jm.taobao.org/2016/03/23/3782/</a></p><h2 id="JVM常见的命令和工具包括哪些"><a href="#JVM常见的命令和工具包括哪些" class="headerlink" title="JVM常见的命令和工具包括哪些"></a>JVM常见的命令和工具包括哪些</h2><ul><li><p>jps：查看虚拟机进程状况的工具</p><ul><li>就是查看所有的java进程</li><li>linus中查看ps -ef | grep java<pre><code>root@iZ2zeajcdvnyj43iup8v0jZ:~# jps -l2818 sun.tools.jps.Jps2442 CatServer-2d6b7c1-async.jar2575 org.apache.catalina.startup.Bootstrap</code></pre></li></ul></li><li><p>jstat:虚拟机统计信息的监视工具</p><ul><li>收集jvm运行时的数据。</li><li>主要是类加载，垃圾收集，运行期编译状况。</li><li>jstat 详细查看堆内各个部分的使用量，以及加载类的数量</li><li><code>jstat -gc/gcutil pid,</code>查看堆内eden，survivor，老年代，永久代使用情况和gc发生情况。</li></ul></li><li><p>jinfo：java配置信息的工具</p><ul><li>实时查看和调整虚拟机参数</li><li>-flag查看虚拟机启动参数</li></ul></li><li><p>jmap：java内存映像的工具</p><pre><code>查看java 堆（heap）使用情况,jmap -heap 31846查看堆内存(histogram)中的对象数量及大小，jmap -histo 3331jmap -dump:format=b,file=log 2575jmap -histo:live 这个命令执行，JVM会先触发gc，然后再统计信息。</code></pre><ul><li>生成headdump文件，查看finalize执行队列，堆和方法区的信息，空间使用率，用的收集器</li></ul></li><li><p>jhat：虚拟机堆转储快照分析工具，分析dump文件。</p></li><li><p>jstack：java堆栈跟踪工具</p><ul><li><code>jstack -l 2575</code></li><li>生成threaddump文件，跟踪线程。</li><li>各个线程的调用堆栈。</li><li>虚拟机执行Full GC时,会阻塞所有的用户线程。因此,即时获取到同步锁的线程也有可能被阻塞。 在查看线程Dump时,首先查看内存使用情况。</li></ul></li></ul><h2 id="java的运行时数据区"><a href="#java的运行时数据区" class="headerlink" title="java的运行时数据区"></a>java的运行时数据区</h2><ul><li>参考：<a href="https://www.nowcoder.com/discuss/151138">https://www.nowcoder.com/discuss/151138</a></li></ul><ol><li><p><strong>程序计数器</strong>，线程私有，因为多线程切换需要保存切换前的状态，为了恢复到正确的执行位置。</p><ul><li>java方法，记录虚拟机字节码指令地址。</li><li>本地方法，值为空（Undefined）</li><li>唯一一个无OOM的</li></ul></li><li><p><strong>Java虚拟机栈</strong>，线程私有，对应java的方法，虚拟机栈帧入栈到出栈。在活动线程中，只有位于栈顶的帧才是有效的，称为当前栈帧。栈帧的数据如下</p><ul><li><p><code>局部变量表</code>：存放<code>编译期可知的基本数据类型，引用类型</code>，returnAddress-字节码指令地址。方法参数，方法内部定义的局部变量都存在这里，一个变量占一个卡槽，相当于一个柜子有很多抽屉，相当于战场。在编译期确定大小，不可改变。</p><pre><code>如果是非静态方法，则在index[0]位置上存储的是方法所属对象的实例引用，随后存储的是参数和局部变量。局部变量表：0  this   L基础语法/jvm/JvmModel;</code></pre></li><li><p><code>操作数栈</code>：各种指令往栈中写入和提取信息，JVM的执行引擎是基于栈的执行引擎，其中的栈指的就是操作数栈。</p></li><li><p><code>动态连接</code>：存放这个方法的引用，实现动态特性，多态。每个栈帧中包含一个在运行时常量池中对当前方法的引用，目的是支持方法调用过程的动态连接。</p></li><li><p><code>方法出口</code> ：正常退出和异常退出。都将返回至方法当前被调用的位置。</p></li><li><p>StackOverFlowError：不可扩展，请求栈深度大于最大值。</p></li><li><p>OOM：可以扩展，但没内存了。</p></li></ul></li><li><p><strong>本地方法栈</strong>，线程私有，（执行本地的native方法的栈）</p><ul><li>本地方法可以通过JNI(Java Native Interface)来访问虚拟机运行时的数据区，甚至可以调用寄存器,具有和JVM相同的能力和权限。例如System.currentTimeMillis()。</li></ul></li><li><p><strong>Java堆</strong>，线程共享，存放对象实例和数组，堆空间不断地扩容与回缩会增加系统压力，所以ms和mx一样。逃逸分析导致不是所有对象实例都在堆上分配。</p><ul><li>还保存了对象的其他信息，如Mark Word（存储对象哈希码，GC标志，GC年龄，同步锁等信息），Klass Pointy(指向存储类型元数据的指针）及一些字节对齐补白的填充数据（若实例数据刚好满足8字节对齐，则可不存在补白）</li><li>虚拟机启动时创建，堆内存物理上不一定要连续,只需要逻辑上连续即可。</li><li>可以用JConsole或者 Runtime.maxMemory(), Runtime.totalMemory(), Runtime.freeMemory()来查看Java中堆内存的大小。</li></ul></li><li><p><strong>方法区</strong>，存放已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据.</p><ul><li>线程共享</li><li>永久代，因为要长期存在，jdk8改为元空间，放在本地内存上。</li><li>对方法区的内存回收的主要目标是:对常量池的回收和对类型的卸载。<br><strong>5.1. 运行时常量池，存储方法区中的常量。具备动态性</strong><ul><li>在JDK6时它是方法区的一部分，7又把他放到了堆内存中，8之后出现了元空间，它又回到了方法区。</li><li>String类的intern()方法就能在运行期间向常量池中添加字符串常量。引用在字符串池</li></ul></li></ul></li><li><p><strong>Metaspace</strong>：</p></li></ol><ul><li><p><strong>在JDK8里，Perm 区所有内容中</strong></p><ul><li><p>字符串常量移至堆内存</p></li><li><p>类静态变量随Class对象实例一起放在堆中。</p></li><li><p>其他内容包括类元信息、字段、方法、常量等都移动至元空间。</p></li></ul></li><li><p>特点</p><ul><li>大部分类元数据都在本地内存中分配。用于描述类元数据的“klasses”已经被移除。</li><li>充分利用了Java语言规范：类及相关的元数据的生命周期与类加载器的一致</li><li>每个类加载器都有它的内存区域-元空间</li><li>只进行线性分配</li><li>不会单独回收某个类（除了重定义类 RedefineClasses 或类加载失败）</li><li>没有GC扫描或压缩</li><li>元空间里的对象不会被转移</li><li>如果GC发现某个类加载器不再存活，会对整个元空间进行集体回收</li></ul></li></ul><h2 id="堆外内存"><a href="#堆外内存" class="headerlink" title="堆外内存"></a>堆外内存</h2><p>堆外内存就是把内存对象分配在Java虚拟机的堆以外的内存，这些内存直接受操作系统管理（而不是虚拟机），这样做的结果就是能够在一定程度上减少垃圾回收对应用程序造成的影响。</p><p><strong>缺点</strong><br>就是内存难以控制，使用了堆外内存就间接失去了JVM管理内存的可行性，改由自己来管理，当发生内存溢出时排查起来非常困难。</p><p><strong>创建DirectByteBuffer的时候，通过Unsafe.allocateMemory分配内存、Unsafe.setMemory进行内存初始化，而后构建Cleaner对象用于跟踪DirectByteBuffer对象的垃圾回收，以实现当DirectByteBuffer被垃圾回收时，分配的堆外内存一起被释放。</strong></p><p>java.nio.DirectByteBuffer对象进行堆外内存的管理和使用，它会在对象创建的时候就分配堆外内存。</p><p><strong>Cleaner继承自Java四大引用类型之一的虚引用PhantomReference（众所周知，无法通过虚引用获取与之关联的对象实例，且当对象仅被虚引用引用时，在任何发生GC的时候，其均可被回收），通常PhantomReference与引用队列ReferenceQueue结合使用，可以实现虚引用关联对象被垃圾回收时能够进行系统通知、资源清理等功能。如下图所示，当某个被Cleaner引用的对象将被回收时，JVM垃圾收集器会将此对象的引用放入到对象引用中的pending链表中，等待Reference-Handler进行相关处理。其中，Reference-Handler为一个拥有最高优先级的守护线程，会循环不断的处理pending链表中的对象引用，执行Cleaner的clean方法进行相关清理工作。</strong></p><img src="https://p0.meituan.net/travelcube/9efac865a875c32cf570489332be5d0f131298.png"><p>java.nio.DirectByteBuffer对象在创建过程中会先通过Unsafe接口直接通过os::malloc来分配内存，然后将内存的起始地址和大小存到java.nio.DirectByteBuffer对象里，这样就可以直接操作这些内存。这些内存只有在DirectByteBuffer回收掉之后才有机会被回收，因此如果这些对象大部分都移到了old，但是一直没有触发CMS GC或者Full GC，那么悲剧将会发生，因为你的物理内存被他们耗尽了，因此为了避免这种悲剧的发生，通过-XX:MaxDirectMemorySize来指定最大的堆外内存大小，当使用达到了阈值的时候将调用System.gc来做一次full gc，以此来回收掉没有被使用的堆外内存。</p><p><strong>Java中对堆外内存的操作，依赖于Unsafe提供的操作堆外内存的native方法。</strong></p><p><strong>堆外内存的优点</strong><br>1、减少了垃圾回收<br>因为垃圾回收会暂停其他的工作。对垃圾回收停顿的改善。由于堆外内存是直接受操作系统管理而不是JVM，所以当我们使用堆外内存时，即可保持较小的堆内内存规模。从而在GC时减少回收停顿对于应用的影响。</p><p>2、加快了复制的速度<br>通常在I/O通信过程中，会存在堆内内存到堆外内存的数据拷贝操作，对于需要频繁进行内存间数据拷贝且生命周期较短的暂存数据，都建议存储到堆外内存。</p><p><strong>堆外内存回收的几种方法：</strong></p><ul><li>Full GC，一般发生在年老代垃圾回收以及调用System.gc的时候，但这样不一顶能满足我们的需求。</li><li>手动调用ByteBuffer的cleaner的clean()，内部还是调用System.gc(),所以一定不要-XX:+DisableExplicitGC</li></ul><p>direct buffer归属的的JAVA对象是在堆上且能够被GC回收的，一旦它被回收，JVM将释放direct buffer的堆外空间。前提是没有开DisableExplicitGC，它存在潜在的内存泄露风险。）</p><h2 id="为什么元空间替代方法区"><a href="#为什么元空间替代方法区" class="headerlink" title="为什么元空间替代方法区"></a>为什么元空间替代方法区</h2><ul><li>官方：移除永久代是为融合HotSpot JVM与 JRockit VM而做出的努力，因为JRockit没有永久代，不需要配置永久代。</li><li>由于永久代内存经常不够用或发生内存泄露，爆出异常java.lang.OutOfMemoryError: PermGen</li><li>元空间并不在虚拟机中，而是使用本地内存。，理论上取决于32位/64位系统可虚拟的内存大小。可见也不是无限制的，需要配置参数。</li></ul><ol><li>MetaspaceSize</li></ol><p>初始化的Metaspace大小，控制元空间发生GC的阈值。GC后，动态增加或降低MetaspaceSize。在默认情况下，这个值大小根据不同的平台在12M到20M浮动。使用Java -XX:+PrintFlagsInitial命令查看本机的初始化参数</p><ol start="2"><li>MaxMetaspaceSize</li></ol><p>限制Metaspace增长的上限，防止因为某些情况导致Metaspace无限的使用本地内存，影响到其他程序。在本机上该参数的默认值为4294967295B（大约4096MB）。</p><ol start="3"><li>MinMetaspaceFreeRatio</li></ol><p>当进行过Metaspace GC之后，会计算当前Metaspace的空闲空间比，如果空闲比小于这个参数（即实际非空闲占比过大，内存不够用），那么虚拟机将增长Metaspace的大小。默认值为40，也就是40%。设置该参数可以控制Metaspace的增长的速度，太小的值会导致Metaspace增长的缓慢，Metaspace的使用逐渐趋于饱和，可能会影响之后类的加载。而太大的值会导致Metaspace增长的过快，浪费内存。</p><ol start="4"><li>MaxMetasaceFreeRatio</li></ol><p>当进行过Metaspace GC之后， 会计算当前Metaspace的空闲空间比，如果空闲比大于这个参数，那么虚拟机会释放Metaspace的部分空间。默认值为70，也就是70%。</p><h2 id="元空间的GC"><a href="#元空间的GC" class="headerlink" title="元空间的GC"></a>元空间的GC</h2><p>Full GC时，指向元数据指针都不用再扫描，减少了Full GC的时间<br>很多复杂的元数据扫描的代码（尤其是CMS里面的那些）都删除了<br>元空间只有少量的指针指向Java堆<br>这包括：类的元数据中指向java.lang.Class实例的指针;数组类的元数据中，指向java.lang.Class集合的指针。<br>没有元数据压缩的开销<br>减少了GC Root的扫描（不再扫描虚拟机里面的已加载类的目录和其它的内部哈希表）<br>G1回收器中，并发标记阶段完成后就可以进行类的卸载</p><h2 id="元空间内存分配模型"><a href="#元空间内存分配模型" class="headerlink" title="元空间内存分配模型"></a>元空间内存分配模型</h2><p>绝大多数的类元数据的空间都在本地内存中分配<br>用来描述类元数据的对象也被移除<br>为元数据分配了多个映射的虚拟内存空间<br>为每个类加载器分配一个内存块列表<br>块的大小取决于类加载器的类型<br>Java反射的字节码存取器（sun.reflect.DelegatingClassLoader ）占用内存更小<br>空闲块内存返还给块内存列表<br>当元空间为空，虚拟内存空间会被回收<br>减少了内存碎片</p><h2 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h2><ul><li><p><code>局部变量表</code>：存放<code>编译期可知的基本数据类型，引用类型</code>，returnAddress-（jsr等）字节码指令地址。方法参数，方法内部定义的局部变量都存在这里，一个变量占一个卡槽，相当于一个柜子有很多抽屉，相当于战场。在编译期确定大小，不可改变。</p><pre><code>  如果是非静态方法，则在index[0]位置上存储的是方法所属对象的实例引用，随后存储的是参数和局部变量。  局部变量表：0  this   L基础语法/jvm/JvmModel;</code></pre></li><li><p><code>操作数栈</code>：各种指令往栈中写入和提取信息，JVM的执行引擎是基于栈的执行引擎，其中的栈指的就是操作数栈。</p></li><li><p><code>动态连接</code>：存放这个方法的引用，实现动态特性，多态。每个栈帧中包含一个在运行时常量池中对当前方法的引用，目的是支持方法调用过程的动态连接。Class文件的常量池中存在大量符号引用，<code>字节码中的方法调用指令</code>就以常量池里指向方法的符号引用作为参数。这些符号引用一部分在类加载阶段或第一次使用时解析（静态解析）转化为直接引用，另一部分在每一次运行期间都转化为直接引用(动态连接)</p></li><li><p><code>方法出口</code> ：正常退出和异常退出。都将返回至方法当前被调用的位置。</p><ul><li>正常退出时，主调方法的PC计数器的值可以作为返回地址，栈帧中可能会保存这个值。</li><li>方法异常退出时，返回地址通过异常处理器表来确定，栈帧中不会保存这部分信息。</li></ul></li></ul><h2 id="System-gc-不一定会回收掉垃圾"><a href="#System-gc-不一定会回收掉垃圾" class="headerlink" title="System.gc()不一定会回收掉垃圾"></a>System.gc()不一定会回收掉垃圾</h2><ul><li><p>如果执行方法时，某个变量还处于作用域之内，虚拟机不会回收。</p></li><li><p>局部变量表可以重用，如果后面有变量赋值，就会替换掉原先对象的位置，就可以回收原来的了，但是又新增了一个，，可以用obj =null;置空（就是把变量对应的局部变量表槽清空）就可以回收了。但这个操作经过即时编译器优化后和不加没区别，所以不用，</p></li><li><p>一般只要控制变量在恰当的作用域之内，然后即时编译器会优化。</p></li></ul><h2 id="如何判断对象已经死亡"><a href="#如何判断对象已经死亡" class="headerlink" title="如何判断对象已经死亡"></a>如何判断对象已经死亡</h2><ul><li>引用计数法：未解决循环引用的问题，A引用B，B引用A</li><li>可达性分析：可以达到的就是活的（沿着GCroot往下搜索）</li></ul><h3 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h3><p>真正宣告对象死亡，要有两次标记过程。</p><ol><li>有无可达链，<ul><li>无，第一次标记</li><li>有，不回收</li></ul></li><li>finalize没有被重写或者已经被调用，直接回收。</li><li>被重写或者未被执行，放在这个方法的执行队列，执行的时候可以自救一次。然后对队列中的对象第二次标记，若自救了被移除。否则就回收了。</li></ol><h2 id="在java语言中可以作为GCroot的对象有哪些"><a href="#在java语言中可以作为GCroot的对象有哪些" class="headerlink" title="在java语言中可以作为GCroot的对象有哪些"></a>在java语言中可以作为GCroot的对象有哪些</h2><ul><li>虚拟机栈中的引用对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用对象</li><li>本地方法栈中JNI引用对象</li><li>Java虚拟机内部引用，类加载器，Klass</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><p>强引用 就是类似Object object = new Object()这类的引用。如果一个对象具有强引用就不会被垃圾回收器回收，即使当前内存空间不足 JVM 也不会回收它，而是抛出 OutOfMemoryError 错误使程序异常终止。</p></li><li><p>软引用 是用来描述一些还有用但是并非必须的对象。对于软引用关联的对象，在系统发生内存溢出之前将会把这些对象列入回收范围中进行第二次回收。使用 SoftReference 来创建。</p></li><li><p>弱引用 非必需的对象，比软引用更弱，被弱引用关联的对象只能生存到下一次垃圾回收发生之前。使用 WeakReference 来创建。</p></li><li><p>虚引用 最弱的引用，一个对象是否有虚引用完全不影响其生存时间，为对象设置一个虚引用关联的目的是为了能在这个对象被收集器回收时，收到一个系统的通知。当垃圾回收器准备回收一个对象时如果发现它还有虚引用就会在垃圾回收销毁这个对象然后将这个虚引用加入引用队列。</p></li><li><p>在软引用，弱引用，虚引用的构造函数都有一个引用队列的参数，只不过虚引用时必须的参数，其他的两个引用里面是可选的.</p></li></ul><h3 id="Java-为什么需要不同的引用类型？"><a href="#Java-为什么需要不同的引用类型？" class="headerlink" title="Java 为什么需要不同的引用类型？"></a>Java 为什么需要不同的引用类型？</h3><ul><li>Java的内存回收由虚拟机垃圾回收器决定，无法像C一样手动释放对象，在java中有时候需要控制对象回收时机，所以就诞生了引用类型，可以认为不同引用类型的诞生实际是对 GC 回收时机不可控的一种矛盾妥协；</li><li>可以利用软引用和弱引用解决 OOM 问题。</li><li>通过软引用实现 Java 对象的高速缓存（即我们创建一个类，如果每次频繁操作都重新构建一个实例就会引起大量对象的消耗和 GC，如果通过软引用和 HashMap 结合实现高速缓存就能显著提供性能）weakHashMap，Entry继承弱应用。用于短时间内就过期的缓存。<ul><li>比如我们创建了一Person的类，如果每次需要查询一个人的信息,哪怕是几秒中之前刚刚查询过的，都要重新构建一个实例，这将引起大量Person对象的消耗,并且由于这些对象的生命周期相对较短,会引起多次GC影响性能。</li></ul></li></ul><h3 id="Java-不同引用类型的使用场景？"><a href="#Java-不同引用类型的使用场景？" class="headerlink" title="Java 不同引用类型的使用场景？"></a>Java 不同引用类型的使用场景？</h3><ol><li><p>强引用：用于new对象返回引用。</p></li><li><p>软引用：一般为缓存等，如图片缓存时当内存不足时系统会自动回收不再使用的 Bitmap 而避免 OOM。</p></li><li><p>弱应用：和软引用区别就是你是更在乎内存还是引用的使用频度。WeakReference ，一旦失去最后一个强引用，就会被 GC 回收，而软引用虽然不能阻止被回收，但是可以延迟到 JVM 内存不足的时候。</p></li><li><p>虚引用：必须和引用队列一起使用，其唯一的场景就是跟踪垃圾回收过程，当垃圾回收器准备回收一个对象时如果发现它还有虚引用就会在垃圾回收销毁这个对象之前，将这个虚引用加入关联的引用队列。</p></li></ol><h2 id="Java-PhantomReference-虚引用-幽灵引用-的作用？"><a href="#Java-PhantomReference-虚引用-幽灵引用-的作用？" class="headerlink" title="Java PhantomReference(虚引用/幽灵引用)的作用？"></a>Java PhantomReference(虚引用/幽灵引用)的作用？</h2><ul><li>虚引用的作用就是在 GC 要回收前， GC 收集器把这个对象添加到 ReferenceQueue 中，这样我们如果检测到 ReferenceQueue 中有我们感兴趣的对象时则说明 GC 将要回收这个对象了，此时我们可以在 GC 回收之前做一些其他事情。</li><li>因为在 Java 中 finalize 方法本来是用来在对象被回收的时候来做一些操作的，但是对象被 GC 垃圾收集器什么时候回收是不固定的，所以 finalize 方法就很尴尬，故虚引用就可以解决这个问题，<pre class="line-numbers language-java"><code class="language-java">ReferenceQueue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">,</span>一个数组。PhantomReference pr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span> <span class="token punctuation">(</span>object<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="GC策略的选择"><a href="#GC策略的选择" class="headerlink" title="GC策略的选择"></a>GC策略的选择</h2><p>使用SerialGC的场景：<br>1、如果应用的堆大小在100MB以内。<br>2、如果应用在一个单核单线程的服务器上面，并且对应用暂停的时间无需求。<br>使用ParallelGC的场景:<br>Parallel收集器 采用多线程来通过扫描并压缩堆 特点：停顿时间短，回收效率高，对吞吐量要求高。如果需要应用在高峰期有较好的性能，但是对应用停顿时间无高要求（比如：停顿1s甚至更长）。<br>使用G1、CMS场景:<br>1、对应用的延迟有很高的要求。<br>2、如果内存大于6G请使用G1。</p><h2 id="GC连环炮"><a href="#GC连环炮" class="headerlink" title="GC连环炮"></a>GC连环炮</h2><ol><li><p>什么时候一个对象会被GC？<br>当没有任何对象的引用指向该对象时 + 在下次垃圾回收周期来到时，对象才会被回收。</p></li><li><p>为什么要在这种时候对象才会被GC？<br>因为JVM会自动回收没有被引用的对象来释放空间，从而解决内存不足问题。</p></li><li><p>GC策略都有哪些分类？<br>1、标记-清除算法。<br>2、复制算法。<br>3、标记整理算法。</p></li><li><p>这些策略分别都有什么优势and劣势？都适用于什么场景？<br>1、标记-清除算法采用从根集合进行扫描，对存活的对象进行标记，标记完毕后再扫描整个空间中未被标记的对象，对其进行直接回收。其不需要进行对象的移动，并且仅对不存活的对象进行处理，在存活的对象比较多的情况下极为高效，但由于标记-清除算法只回收不存活的对象，并没有对还存活的对象进行整理，因此会导致内存碎片。</p></li></ol><p>2、复制算法将内存划分为两个分区，使用此算法时，所有动态分配的对象都只能分配在其中一个区间(活动区间)，而另外一个区间(空间区间)则是空闲区间。其采用从根集合扫描，将存活的对象复制到空闲区间，当扫描完毕活动区间后，会将活动区间一次性全部回收，此时原本的空闲区间变成了活动区间，下次GC的时候又会重复刚才的操作，以此循环。另外，复制算法在存活对象比较少的时候，极为高效，但是带来的成本是牺牲一半的内存空间用于进行对象的移动，所以复制算法的使用场景必须是对象的存活率非常低才行，而且最重要的是我们需要克服50%内存的浪费。</p><p>3、标记整理算法采用标记-清除算法一样的方式进行对象的标记、清除，但在回收不存活的对象占用的空间后，会将所有存活的对象往左端空闲空间移动，并更新对应的指针，其算法是在标记-清除算法之上，又进行了对象的移动排序整理，因此成本更高，但却解决了内存碎片的问题。</p><h2 id="虚拟机内存的分配策略"><a href="#虚拟机内存的分配策略" class="headerlink" title="虚拟机内存的分配策略"></a>虚拟机内存的分配策略</h2><ul><li>对象优先在eden区分配</li><li>大对象直接进入老年代（长的数组，字符串）<code>-XX:PretenureSizeThreshold</code>参数，避免在新生代来回复制。</li><li>长期存活的对象进入老年代， 在yong gc复制中，判断对象年龄（在对象头中），默认15，</li><li>当在survivor空间中相同年龄的对象大小的总和大于survivor空间的一半，年龄大于等于改年龄的对象就可以直接进入老年代。</li></ul><h2 id="空间担保策略"><a href="#空间担保策略" class="headerlink" title="空间担保策略"></a>空间担保策略</h2><ul><li><p><code>发生young gc之前</code>，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有的对象总空间，如果大于，young gc安全。</p></li><li><p><code>如果不成立，则检查虚拟机的参数，是否允许担保失败，jdk6.24以后这个参数了不起作用了，如果允许</code>，就检查老年代最大可用的连续空间是否大于历次晋升到老年代的平均大小，如果大于，则尝试冒险进行一次young gc，如果小于或者不允许担保失败，则要进行一次full gc。</p></li><li><p>两个条件，<code>jdk7以后只要一个不满足就会fullgc</code></p><ul><li>老年代最大连续可用空间 &gt; 新生代所有对象大小</li><li>老年代最大连续可用空间 &gt; 历次晋升到老年代的平均大小—经验值。</li></ul></li></ul><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><ol><li>标记-清除算法，标记和清除<code>执行效率</code>随对象数量增加而降低，<code>存在大量内存空间碎片</code>，大量不连续的内存碎片。</li><li>标记-复制算法，两块空间，一个满了就把活的复制到另一块空间，直接清除这一块死的，<code>解决了执行效率，出现大量复制，要有额外的空间担保，但是将内存缩小了一半</code></li><li>标记-整理算法，标记完成后，将所有的存活的对象向一端移动，然后清理掉边界以为外的内存。<ul><li>虚拟机平时标记-清除, 当空间碎片化程度不能容忍大对象分配时，就用标记整理算法。CMS收集器。</li></ul></li><li>分代收集理论，新生代-老年代使用不同的算法。<ul><li>新生代：标记-复制。</li><li>老年代：标记-整理 或者 标记-清除，对象存活率高，没有额外空间担保。</li></ul></li></ol><h2 id="CMS垃圾收集器"><a href="#CMS垃圾收集器" class="headerlink" title="CMS垃圾收集器"></a>CMS垃圾收集器</h2><ol><li>初始标记，标记GCRoots直接关联的对象<ul><li>stw，时间短</li></ul></li><li>并发标记，从直接关联的对象遍历对象图<ul><li>并发，时间长。</li><li>增量更新</li></ul></li><li>重新标记，修正并发标记的部分对象标记。<ul><li>stw，时间短。</li></ul></li><li>并发清除。</li></ol><ul><li>只有一份卡表，使用写后屏障维护卡表，内存占用小。</li></ul><ol start="5"><li>缺点：<ul><li>并发阶段占用线程资源<code>降低吞吐量</code>，</li><li><code>无法处理浮动垃圾</code>，并发阶段用户线程产生的。需要预留内存供用户程序使用，若内存不足，临时使用SerialOld替代FullGc：标记整理，解决。stw。</li><li><code>内存碎片</code>，经过了N次Full GC过后再进行一次内存整理，默认每次进入FullGc前都会碎片整理，之前是进入之后才整理。jdk9后都不用了。</li></ul></li></ol><ul><li><p>concurrent mode failure产生的原理：CMS并发处理阶段用户线程还在运行中，伴随着程序运行会有新的垃圾产生，CMS无法处理掉它们（没有标记），只能在下一次GC的时候处理。同样的，用户线程运行就需要分配新的内存空间，为此，CMS收集器并不会在老年代全部被填满以后在进行收集，会预留一部分空间提供并发收集时的程序运行使用。即使是这样，还是会存在CMS运行期间预留的内存无法满足程序需求，就会出现”Concurrent Mode Failure”失败，这是，虚拟机将会启动备案操作：临时启动Serial Old 收集器来重新进行老年代的垃圾收集，Serial Old收集器会Stop the world，这样会导致停顿时间过长</p></li><li><p>同样的，CMS收集结束后会有大量的碎片空间差生，也会给大对象分配带来麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够多的连续空间来分配当前对象，不得不提前触发一次Full GC</p></li></ul><h2 id="CMS为什么要2次STW"><a href="#CMS为什么要2次STW" class="headerlink" title="CMS为什么要2次STW?"></a>CMS为什么要2次STW?</h2><ol><li>答CMS过程</li><li>分析为什么<ul><li>垃圾回收回收先要第一次标记对象，但是第二个过程是并发标记，当GC线程标记好了一个对象的时候，此时我们程序的线程又将该对象重新加入了“关系网”中，当执行二次标记的时候，该对象也没有重写finalize()方法，因此回收的时候就会回收这个不该回收的对象。 </li><li>虚拟机的解决方法就是在一些特定指令位置设置一些“安全点”，当程序运行到这些“安全点”的时候就会暂停所有当前运行的线程（Stop The World 所以叫STW），暂停后再找到“GC Roots”进行关系的组建，进而执行标记和清除。 </li></ul></li></ol><p>这些特定的指令位置主要在：<br>1、循环的末尾<br>2、方法临返回前 / 调用方法的call指令后<br>3、可能抛异常的位置</p><h2 id="CMS为什么不用标记-整理算法？"><a href="#CMS为什么不用标记-整理算法？" class="headerlink" title="CMS为什么不用标记-整理算法？"></a>CMS为什么不用标记-整理算法？</h2><p>分代式GC里，年老代常用mark-sweep；或者是mark-sweep/mark-compact的混合方式，一般情况下用mark-sweep，统计估算碎片量达到一定程度时用mark-compact。这是因为传统上大家认为年老代的对象可能会长时间存活且存活率高，或者是比较大，这样拷贝起来不划算，还不如采用就地收集的方式。Mark-sweep、mark-compact、copying这三种基本算法里，只有mark-sweep是不移动对象（也就是不用拷贝）的，所以选用mark-sweep。 </p><p>关于时间开销：<br>mark-sweep：mark阶段与活对象的数量成正比，sweep阶段与整堆大小成正比<br>mark-compact：mark阶段与活对象的数量成正比，compact阶段与活对象的大小成正比<br>copying：与活对象大小成正比</p><h2 id="停顿时间和吞吐量意思"><a href="#停顿时间和吞吐量意思" class="headerlink" title="停顿时间和吞吐量意思"></a>停顿时间和吞吐量意思</h2><p>停顿时间主要是指：gc会发生停顿，在扫描时，移动对象也会发生停顿。<br>吞吐量就是：程序吞吐量，内存碎片化高，分配和访问内存时会比较慢。</p><h2 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h2><ul><li>大小相等的独立区域Region</li><li>Humongous存储大对象</li><li>一般在young GC时，还是采用的复制</li></ul><p><strong>过程</strong></p><ol><li>初始标记，增加了修改TAMS指针的值，保证用户线程正确分配对象。<ul><li>stw，时间短，借用young GC的时候同步完成的。</li></ul></li><li><strong>并发标记</strong>，扫描对象图<ul><li>时间长，结束后重新处理TAMS下有引用变动的对象</li></ul></li><li>最终标记<ul><li>stw，<strong>多线程并行</strong>，处理并发后仍留下来的那部分少量SATB记录，也就是原始快照的处理。</li></ul></li><li>筛选回收，跟新region的统计数据，计算回收价值，根据期望停顿时间建立回收集，<ul><li>把决定回收的那部分空间中存活对象<strong>复制</strong>到空的region。清理掉整个旧空间。</li><li>stw，涉及对象移动，<strong>多线程并行</strong>。只是收集部分空间。</li><li>和用户并发的实现在ZGC中。</li></ul></li></ol><p>G1的写屏障主要是放在消息队列里执行的，减少执行负载，因为g1写屏障比较麻烦。</p><p><strong>优点</strong></p><ul><li>不产生内存碎片</li><li>可以精确控制停顿时间，在不牺牲吞吐量前提下，实现低停顿垃圾回收。</li><li>分代收集：不需要与其他收集器配合就能独立管理整个GC堆。新生代老年代是动态的区域集合，region是单次回收的最小单元。</li><li>并发并行：充分利用cpu多核，用多个cpu缩短stop the world</li><li>空间整合：<strong>整体上是标记整理，局部是标记复制</strong>，不会产生空间碎片，有利于程序长时间运行</li><li>可预测停顿模型：用回收效果的衰减平均值，G1记录每个Region的回收价值，维护一个优先级列表，根据信息预测在可接受的停顿时间下，怎么组成回收集效益最高。他可以有计划的避免在整个java堆中进行全区域的垃圾收集。</li><li>记忆集避免全堆扫描GC Roots。具体用卡表实现的。</li><li>采用原始快照(SATB)，设置两个指针TAMS，划分出来用于新对象分配。</li><li>G1收集器之前的收集器收集的范围都是新生代或者老年代，而G1不是。虽然保留了新生代老年代概念，但是新生代老年代是动态的区域集合</li><li>G1里面不同region的对象引用以及其他收集器的新生代与老年代的之间的对象引用，虚拟机都是通过remembered set来避免全堆扫描的。具体是利用卡表实现的。</li><li>初始标记stw，并发标记，最终标记 并行；筛选回收 并行。</li></ul><p><strong>缺点</strong></p><ul><li>内存占用高，每个region都有卡表，实现复杂</li><li>执行负载高<ul><li>G1用写后屏障维护卡表，写前屏障跟踪指针变化情况（为了实现原始快照，但减少了并发标记和重新标记的消耗）</li></ul></li></ul><h2 id="Shenandoah-（谢楠多厄）-具有超低停顿时间的垃圾回收算法"><a href="#Shenandoah-（谢楠多厄）-具有超低停顿时间的垃圾回收算法" class="headerlink" title="Shenandoah （谢楠多厄） 具有超低停顿时间的垃圾回收算法"></a>Shenandoah （谢楠多厄） 具有超低停顿时间的垃圾回收算法</h2><ul><li><p>采用和G1相同的内存布局，存放大对象的Humongous</p></li><li><p>默认回收策略也一样。</p></li><li><p>通过与正在运行的Java程序同时执行更多垃圾收集工作来减少GC暂停时间。Shenandoah同时完成大部分GC工作，包括并发压缩，这意味着它的暂停时间不再与堆的大小成正比。收集200 GB堆或2 GB堆的垃圾应具有相同的可预测暂停行为。</p></li></ul><p><strong>过程</strong></p><ol><li>初始标记，stw，停顿时间和堆大小无关，只和GcRoots数量有关。</li><li><code>并发标记</code>，遍历对象图，并发，标记可达对象。</li><li>最终标记：和G1一样，处理剩余的SATB(原始快照中的)，统计出回收价值最高的region，构成回收集，stw。</li><li>并发清理：清理那些没有活对象的区域。</li><li><code>并发回收</code>：把回收集中存活对象复制到未使用的region，通过读屏障和转发指针解决对象移动的并发问题。</li><li>初始引用更新：线程集合点，确保所有收集线程都已经完成对象移动任务。stw</li><li><code>并发引用更新</code>：堆中所指旧对象引用修正到新的地址，按照内存物理地址的顺序，先行搜索出引用类型，修改即可。</li><li>最终引用更新：修正GC Roots的引用，最后一次stw。</li><li>并发清理：回收集的region没有存活对象了，在调用一次并发清理。</li></ol><p><strong>比较</strong></p><ol><li>运行时间最长，运行负担高，吞吐量下降。</li><li>延迟时间短</li></ol><h2 id="ZGC收集器"><a href="#ZGC收集器" class="headerlink" title="ZGC收集器"></a>ZGC收集器</h2><p>Oracle创建JEP 333 将ZGC提交给openJDk，推动其进入openjdk 11.</p><ul><li>实现在不太影响吞吐量的条件下，变为低延迟。<br>ZGC的内存布局也是region，但是具有动态性–动态创建和销毁，动态的区域容量大小。<br>分为大中小型region。</li><li>大型：容量动态，只放一个大对象（4MB以上的），不会被重新分配。</li></ul><p><strong>并发整理/回收的实现</strong></p><ul><li>读屏障 + 染色指针技术</li></ul><h2 id="各种回收器，各自优缺点，重点CMS、G1"><a href="#各种回收器，各自优缺点，重点CMS、G1" class="headerlink" title="各种回收器，各自优缺点，重点CMS、G1"></a>各种回收器，各自优缺点，重点CMS、G1</h2><ul><li><p>Serial收集器，串行收集器是最古老，最稳定以及效率高的收集器，但可能会产生较长的停顿，只使用一个线程去回收。</p></li><li><p>ParNew收集器，ParNew收集器其实就是Serial收集器的多线程版本。</p></li><li><p>Parallel收集器，Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。</p></li><li><p>Parallel Old收集器，Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程“标记－整理”算法</p></li><li><p>CMS收集器，CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它需要消耗额外的CPU和内存资源，在CPU和内存资源紧张，CPU较少时，会加重系统负担。CMS无法处理浮动垃圾。CMS的“标记-清除”算法，会导致大量空间碎片的产生。</p></li><li><p>G1收集器，G1 (Garbage-First)是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足GC停顿时间要求的同时,还具备高吞吐量性能特征。</p></li></ul><h2 id="stackoverflow错误，permgen-space错误"><a href="#stackoverflow错误，permgen-space错误" class="headerlink" title="stackoverflow错误，permgen space错误"></a>stackoverflow错误，permgen space错误</h2><p>stackoverflow错误主要出现：</p><p>在虚拟机栈中(线程请求的栈深度大于虚拟机栈锁允许的最大深度)<br>permgen space错误(针对jdk之前1.7版本)：</p><p>大量加载class文件<br>常量池内存溢出</p><h2 id="Java类文件结构"><a href="#Java类文件结构" class="headerlink" title="Java类文件结构"></a>Java类文件结构</h2><ul><li>任何一个Class文件都对应一个唯一的一个类或接口，但是类或接口也可以动态生成，直接送到类加载器中，不用放在文件里。</li><li>Class文件常量池<ul><li>字面量</li><li>符号引用，当虚拟机做类加载时，会从常量池获取符号引用，再在类创建时或运行时解析、翻译到具体的内存地址。</li></ul></li><li>Constant-Utf8-info用于存储字面量，方法，字段的名称。</li><li>Constant-String-info，Constant-Class-info，里边一个index，实际上字面量放在上面的utf中。</li></ul><h2 id="类和接口初始化的特例"><a href="#类和接口初始化的特例" class="headerlink" title="类和接口初始化的特例"></a>类和接口初始化的特例</h2><ul><li>常量在编译阶段会存入调用类的常量池中，本质上没有直接引用到定义常量的类，所以不会触发定义常量的类的初始化。</li><li>在编译阶段通过常量传播优化，将常量值直接放在调用类的常量池中。所以编译之后的Class文件没有任何关联。</li></ul><p><strong>接口特例</strong></p><ul><li>jdk8接口中如果加入默认方法，如果有实现类要初始化，必须先初始化接口</li><li>接口初始化不要求父接口全部完成了初始化。只有真正用到了才会。</li><li>编译器为接口生成类构造器，初始化常量。</li></ul><h2 id="java的类加载"><a href="#java的类加载" class="headerlink" title="java的类加载"></a>java的类加载</h2><p>类加载时机<br>什么情况下虚拟机需要开始加载一个类呢？虚拟机规范中并没有对此进行强制约束，这点可以交给虚拟机的具体实现来自由把握。</p><ul><li><p><code>加载</code> 需要做三件事，根据全限定名获取类的二进制字节流，将<strong>字节流代表的静态存储对象转化为方法区运行时的数据结构</strong>。在内存中生成一个代表这个类的class对象，作为方法区各种数据访问的入口。加载结束后生成Class对象放在堆中，提供了访问。<strong>查找并加载类的二进制数据，在Java堆中也创建一个java.lang.Class类的对象。</strong></p></li><li><p><code>验证</code> 保证class文件的字节流中包含的信息符合当前虚拟机的要求。文件格式的验证，元数据的验证，字节码验证，符号引用验证–在解析阶段发生。不是必须的。</p></li><li><p><code>准备</code> 为类变量分配内存以及设置初始值就是默认值。jdk8及以后，类变量随着Class对象一起放在Java堆中。真正的赋值操作是在初始化阶段，把类变量放在类构造器方法中。如果是final，准备阶段就赋值了。</p></li><li><p><code>解析</code> 解析阶段是把常量池内的符号引用替换为直接引用的过程。</p><ul><li>符号引用和虚拟机内存布局无关</li><li>直接引用，是直接指向内存地址的，和内存布局有关。</li></ul></li><li><p><code>初始化</code> 类的初始化是类加载的最后一步。初始化阶段才开始执行类中定义的java程序代码</p></li></ul><p><a href="https://www.cnblogs.com/aspirant/p/7200523.html">https://www.cnblogs.com/aspirant/p/7200523.html</a></p><h2 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h2><ul><li>通过一个类的全限定名获取类的二进制字节流，这个动作在JVM外部实现，让应用程序自己决定如何获取所需的类，实现这个动作的代码叫做“类加载器”。</li><li>只用于实现类的加载动作。</li><li>对于任意一个类，必须由加载它的类加载器和类本身决定在JVM的唯一性。<ul><li>类加载器不一样，那这两个类就不一样。</li></ul></li></ul><h2 id="Java类加载器的双亲委派模型"><a href="#Java类加载器的双亲委派模型" class="headerlink" title="Java类加载器的双亲委派模型"></a>Java类加载器的双亲委派模型</h2><ul><li><p>启动类加载器（Bootstrap Class Loader），无法被应用程序使用，c++编写。java.*</p></li><li><p>扩展类加载器（Extension Class Loader），\lib\ext;开发者可以直接用它加载Class文件。</p></li><li><p>应用程序类加载器（Application），默认加载用户类路径上的。默认代码类加载器</p></li><li><p>用户自定义类加载器<br>BootStrapClassLoader &lt;- ExtClassLoader &lt;- AppClassLoader &lt;- 自定义类加载器</p></li><li><p>双亲委派模型要求除了顶层的启动类加载器外，其余的都要有父类加载器。</p></li><li><p>通常使用组合关系复用父加载器的代码。他们之间不是继承关系，而是组合关系</p></li></ul><p><strong>工作过程：</strong></p><ul><li>如果一个类加载器收到了类加载的请求，首先不会自己尝试加载这个类，而是先请求父加载器去加载，每一层的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，父不能加载抛异常（ClassNotFoundException）回到子去加载。</li><li>保证了Java程序运行的稳定性，例如Object类在程序的各种类加载器环境中都能保证是同一个类，要是任由类加载器随便加载，就会出现同名的类，就乱套了。Java类型体系中最基础的行为就无法保证了。</li></ul><ul><li>如果有一个和Object名称相同的，其他也一样，可以正常编译，但不能运行。</li><li>双亲委派逻辑在loadClass()方法中。是线程安全的。java.lang.ClassLoader.</li></ul><p><strong>好处：防止内存中出现多份同样的字节码(安全性角度)</strong></p><p><strong>特别说明：</strong><br>类加载器在成功加载某个类之后，会把得到的 java.lang.Class类的实例缓存起来。下次再请求加载该类的时候，类加载器会直接使用缓存的类的实例，而不会尝试再次加载。</p><h3 id="双亲机制的破坏"><a href="#双亲机制的破坏" class="headerlink" title="双亲机制的破坏"></a>双亲机制的破坏</h3><ol><li>重写loadClass()方法,不能保证双亲委派机制，后来多了protected findClass()。编写类加载逻辑时，尽量使用这个方法，避免破坏双亲委派机制。</li><li>当基础类型（被启动类加载器加载）要访问用户代码时，启动类加载器不认识这些代码，也不会去加载。线程上下文类加载器默认是Appliaction Loader，通过线程上下文加载器访问用户代码，jdk6加入了ServiceLoader类，用来责任链模式。</li><li>动态化热部署。例如OSGI。jdk9引入模块化，但没有运行时部署和替换就很糟糕。</li></ol><h2 id="jdk9的双亲委派机制"><a href="#jdk9的双亲委派机制" class="headerlink" title="jdk9的双亲委派机制"></a>jdk9的双亲委派机制</h2><ul><li>实现了模块化，依赖于可配置的封装隔离机制。</li><li>分为类路径和模块路径。<ul><li>在类路径下的被包为一个匿名模块。</li></ul></li><li>模块有自己的访问权限，模块里边的还有自己的访问权限。</li><li>扩展类加载换成平台类加载器。因为整个JDK都基于模块化构建，java类库已经天然的满足了可扩展的需求。</li></ul><p><strong>过程：</strong></p><ul><li>当平台类加载器及应用程序类加载器收到类加载请求，在委派给父类加载器之前，先看属不属于一个系统模块，如果有这样的归属关系，优先委派给负责那个模块的加载器完成。</li></ul><h2 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h2><ul><li><p>Launcher$ExtClassLoader和Launcher$AppClassLoader都是URLClassLoader的子类，但是他们的实现又是有一点不同的。通过JD反编译过来会看到他俩区别。</p></li><li><p>Launcher$ExtClassLoader的实现是遵循的双亲委派模型，它重写的是findClass方法。加载的类是属于$JRE_HOME/lib/ext下面的扩展类。Sun公司肯定不会写两个或者多个具有相同全限定名的类、但是功能却不相同的类的。一般是系统的，不允许一样。</p></li><li><p>Launcher$AppClassLoader的实现是没有遵循双亲委派模型的，它重写的是loadClass方法。Launcher$AppClassLoader是用于加载各个不同应用下面的类，同一个JVM中可以同时存在多个应用。如容器插件应用场景就适合，要允许不同的插件增加到容器中，但不同插件中难免有相同的类，所以可以。用不同的类加载器加载。就不一样了。</p></li><li><p>自定义类加载器可以被卸载，GC的时机我们是不可控的，那么同样的我们对于Class的卸载也是不可控的。<br>JVM中的Class只有满足以下三个条件，才能被GC回收，也就是该Class被卸载（unload）：</p></li></ul><ol><li>该类所有的实例都已经被GC。</li><li>该类的java.lang.Class对象没有在任何地方被引用。</li><li>加载该类的ClassLoader实例已经被GC。<br>JVM自带的类加载器所加载的类在虚拟机的整个生命周期，会一直引用这些类加载器，<br>而这些类加载器则会始终引用它们所加载的类的Class对象。因此这些Class对象始终是可触及的，不会被卸载。</li></ol><h2 id="一个类的静态块是否可能被加载2次"><a href="#一个类的静态块是否可能被加载2次" class="headerlink" title="一个类的静态块是否可能被加载2次"></a>一个类的静态块是否可能被加载2次</h2><p>可以，用自己的的类加载器重写loadClass方法。</p><ul><li><p>loadClass线程安全，findClass线程不安全（protected）</p></li><li><p>definedClass：definedClass在findClass中使用，通过调用传进去一个Class文件的字节数组，就可以方法区生成一个Class对象，也就是findClass实现了类加载的功能了。</p></li><li><p>resolveClass：<strong>Class载入必须链接（link），链接指的是把单一的Class加入到有继承关系的类树中</strong>。这个方法给Classloader用来链接一个类，如果这个类已经被链接过了，那么这个方法只做一个简单的返回。否则，这个类将被按照 Java规范中的Execution描述进行链接。</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> 基础语法<span class="token punctuation">.</span>loadertest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiXiwen * @date 2020/2/12 16:16 */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"Duplicates"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ClassLoader loader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    String fileName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>                    InputStream is <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> is<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>is<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        ClassLoader loader2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    String fileName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>                    InputStream is <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> is<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>is<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> loader1<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"基础语法.loadertest.Hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj1 <span class="token operator">=</span> loader2<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"基础语法.loadertest.Hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> 基础语法<span class="token punctuation">.</span>loadertest<span class="token punctuation">.</span>Hello<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1 <span class="token keyword">instanceof</span> 基础语法<span class="token punctuation">.</span>loadertest<span class="token punctuation">.</span>Hello<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断不出来，不知道</span>        <span class="token comment" spellcheck="true">//System.out.println(obj instanceof obj1);</span>        ClassLoader loader2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">package</span> 基础语法<span class="token punctuation">.</span>loadertest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author LiXiwen * @date 2020/2/12 16:26 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static moudle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"from v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类的实例化顺序"><a href="#类的实例化顺序" class="headerlink" title="类的实例化顺序"></a>类的实例化顺序</h2><p>1． 父类静态成员和静态初始化块 ，按在代码中出现的顺序依次执行<br>2． 子类静态成员和静态初始化块 ，按在代码中出现的顺序依次执行<br>3． 父类实例成员和实例初始化块 ，按在代码中出现的顺序依次执行<br>4． 父类构造方法<br>5． 子类实例成员和实例初始化块 ，按在代码中出现的顺序依次执行<br>6． 子类构造方法</p><h2 id="JVM垃圾回收机制，何时触发MinorGC等操作"><a href="#JVM垃圾回收机制，何时触发MinorGC等操作" class="headerlink" title="JVM垃圾回收机制，何时触发MinorGC等操作"></a>JVM垃圾回收机制，何时触发MinorGC等操作</h2><p>当young gen中的eden区分配满的时候触发MinorGC(新生代的空间不够放的时候).</p><h2 id="基于栈的指令集和基于寄存器的指令集"><a href="#基于栈的指令集和基于寄存器的指令集" class="headerlink" title="基于栈的指令集和基于寄存器的指令集"></a>基于栈的指令集和基于寄存器的指令集</h2><ul><li>基于栈的，可移植，但是栈是基于内存的，频繁的栈访问意味着内存访问，会慢一下，因为产生的指令会多，但是后面会有编译器，JIT优化。还有栈顶缓存。</li><li>寄存器就是快。</li></ul><h2 id="tomcat类加载器"><a href="#tomcat类加载器" class="headerlink" title="tomcat类加载器"></a>tomcat类加载器</h2><p>从上到下，</p><pre class="line-numbers language-java"><code class="language-java">                                                          <span class="token operator">&lt;</span><span class="token operator">--</span> <span class="token function">Catalina</span><span class="token punctuation">(</span><span class="token operator">/</span>server<span class="token punctuation">)</span> 启动类加载器 <span class="token operator">&lt;</span><span class="token operator">--</span> 扩展类加载器 <span class="token operator">&lt;</span><span class="token operator">--</span> 应用程序类加载器 <span class="token operator">&lt;</span><span class="token operator">--</span>Common                                                          <span class="token operator">&lt;</span><span class="token operator">--</span> Shared <span class="token operator">&lt;</span><span class="token operator">--</span>WebApp <span class="token operator">&lt;</span><span class="token operator">--</span> Jsp类加载器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>tomcat6之后，不指定catalina和shared目录全部用Common类加载器。<br>Common可以被Tomcat和所有Web应用程序用。<br>Catalina，server目录下，只被tomcat用，web程序看不到。<br>Shared，被web程序用，tomcat自己不可见。<br>WebApp，在web-info目录下，只被该web程序使用。</p><h2 id="Spring-如何访问并不在其加载范围内的用户程序呢？"><a href="#Spring-如何访问并不在其加载范围内的用户程序呢？" class="headerlink" title="Spring 如何访问并不在其加载范围内的用户程序呢？"></a>Spring 如何访问并不在其加载范围内的用户程序呢？</h2><ul><li>使用线程上下文类加载器来实现的啊！这个上下文类加载器能加载应用程序能加载的类。仔细看源码你会发现，spring加载类所用的classloader都是通过Thread.currentThread().getContextClassLoader()来获取的，而当线程创建时会默认 setContextClassLoader(AppClassLoader)，即spring中始终可以获取到这个AppClassLoader(在tomcat里就是WebAppClassLoader)子类加载器来加载bean，以后任何一个线程都可以通过getContextClassLoader()获取到WebAppClassLoader来getbean了</li></ul><h2 id="动态连接和方法调用的理解"><a href="#动态连接和方法调用的理解" class="headerlink" title="动态连接和方法调用的理解"></a>动态连接和方法调用的理解</h2><ul><li>每个栈帧中都有一个指向运行时常量池中改方法的引用，为了方便方法调用时的动态连接。</li><li>静态解析：一部分符号引用在类加载时变为直接引用。</li><li>动态连接：一部分每次运行期间都转化为直接引用。</li></ul><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><ul><li>不等同于代码被执行，而是确定调用方法的版本（确定用哪一个方法）。</li></ul><h3 id="分派"><a href="#分派" class="headerlink" title="分派"></a>分派</h3><p>静态，动态，<br>单分派，多分派<br>互相可以组合。<br>Java是静态多分派，动态单分派的语言。</p><ul><li>静态方法也可以重载，选择重载版本的过程也是通过静态分派完成的。静态方法在编译器确定，类加载期就进行解析。</li></ul><p><strong>静态分派和重载</strong><br>重载依赖两个变量，一个是方法的接收者，一个是传入参数的数量和数据类型。</p><ul><li>重载根据<strong>参数的静态类型</strong>而不是实际类型作为判断依据的。</li></ul><pre class="line-numbers language-java"><code class="language-java">Human man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Human就是静态类型，<br>Man是变量的实际类型。</p><ul><li><p>区别，静态类型的变化只在使用时发生，变量本身的静态类型不会被改变。最终的静态类型在编译器可知。实际类型变化的结果在运行期才可以确定，编译器并不知道一个对象的实际类型是什么。</p></li><li><p>所有依赖静态类型来决定方法版本的分派动作，都是静态分派。发生在编译阶段。</p></li></ul><p><strong>动态分派和重写</strong><br>重写的本质：</p><ul><li>在把符号引用转为直接引用时。根据方法接收者的实际类型来选择方法版本。<br>对字段无效，当子类和父类有相同字段时，虽然在子类的内存中两个字段都会存在，但是子类的字段会屏蔽父类的同名字段。</li></ul><p><strong>单分派：</strong><br>方法的接收者和方法的参数叫方法的宗量。<br>编译器的选择过程：静态分派，依据两点：接收者和参数（都是判断静态类型，实际类型不会影响）</p><h3 id="虚拟机动态分派的实现"><a href="#虚拟机动态分派的实现" class="headerlink" title="虚拟机动态分派的实现"></a>虚拟机动态分派的实现</h3><p>动态分派的方法版本需要在接收者类型的方法元数据中搜索合适的目标方法，为了减少消耗，所以在方法区建立一个虚方法表(vtable)，还一个接口方法表。使用索引代替元数据查找提高性能。<br>vtable放着各个方法的实际入口地址。如没重写，父子地址一样，否则各有各的类型数据。</p><h2 id="Class对象被加载的时机"><a href="#Class对象被加载的时机" class="headerlink" title="Class对象被加载的时机"></a>Class对象被加载的时机</h2><ul><li><p>某个类的 class 文件在被 classloader 加载后，会生成对应的 Class 对象，之后就可以创建该类的实例。</p></li><li><p>在使用一个类时，类加载器首先首先检查这个类的Class对象是否被加载，如果还没加载，类加载器根据类名查找class文件(编译后Class对象被保存在同名的.class文件中)，在这个类的字节码文件被加载时，它们必须接受相关验证，然后会被加载到内存，Class对象也就到内存去了。(毕竟.class字节码文件保存的就是Class对象)，同时也就可以被用来创建这个类的所有实例对象。</p></li></ul><h2 id="卸载时机"><a href="#卸载时机" class="headerlink" title="卸载时机"></a>卸载时机</h2><p>JVM中的Class只有满足以下三个条件，才能被GC回收，也就是该Class被卸载（unload）</p><ul><li>该类所有的实例都已经被GC，也就是JVM中不存在该Class的任何实例。</li><li>加载该类的ClassLoader已经被GC。</li><li>该类的java.lang.Class 对象没有在任何地方被引用，如不能在任何地方通过反射访问该类的方法 </li></ul><h2 id="Class-forName和getClass-和-class"><a href="#Class-forName和getClass-和-class" class="headerlink" title="Class.forName和getClass()和.class"></a>Class.forName和getClass()和.class</h2><ul><li><p>调用Class.forName()方法获取Class对象的引用，这样做的好处是<strong>无需通过持有该类的实例对象引用而去获取Class对象</strong>，装入类，并做初始化。</p></li><li><p>通过一个实例对象获取一个类的Class对象, getClass()是从顶级类Object继承而来的，它将返回表示该对象的实际类型的Class对象引用。返回引用运行时真正所指的对象（因为子对象的引用可能会赋给父对象的引用变量中）所属的类的 Class 对象。</p></li><li><p>Class字面常量获取Class对象，这种方式相对前面两种方法更加简单，更安全。因为它在编译器就会受到编译器的检查同时由于无需调用forName方法效率也会更高。因为通过字面量的方法获取Class对象的引用不会自动初始化该类。 </p><ul><li>Class.class 的形式会使 JVM 将使用类装载器将类装入内存（前提是类还没有装入内存），不做类的初始化工作，返回 Class 对象。</li><li>我们获取字面常量的Class引用时，触发的应该是加载阶段，因为在这个阶段Class对象已创建完成。</li></ul></li></ul><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h2 id="Java的泛型"><a href="#Java的泛型" class="headerlink" title="Java的泛型"></a>Java的泛型</h2><p>泛型的本质是参数化类型或参数化多态的应用。就是将操作的数据类型指定为方法签名中的一种特殊参数。<br>java的泛型是类型擦除式泛型。直接把已有的类型泛型化。</p><pre class="line-numbers language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span>编译后的字节码都变成ArrayList（裸类型）。只在元素访问时从Object到需要类型的强制转换。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>不支持基本类型与Object的强转，所以只能用包装类型，无法避免自动拆箱与自动装箱。</li><li>运行期不能获取到泛型类型信息。</li><li>重载时也会有问题，<pre class="line-numbers language-java"><code class="language-java"><span class="token function">method</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span><span class="token function">method</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">)</span>无法重载，因为编译器会转为List。不能被编译。如果在方法中加个返回值就可以重载了，但重载不根据返回值来确定。只能在jdk6的javac编译器才可以编译成功。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>具体原因：只有加了不同返回值才能共存在一个Class文件中。在Class文件格式中，只要是描述符不是完全一致的两个方法就可以共存。</li><li><strong>擦除仅仅是对方法的Code属性中的字节码进行擦除，实际上元数据中还是保留了泛型信息，这也是在编码时可以通过反射手段取得参数化类型的根本依据。</strong></li></ul><h2 id="前端编译，后端编译，编译优化"><a href="#前端编译，后端编译，编译优化" class="headerlink" title="前端编译，后端编译，编译优化"></a>前端编译，后端编译，编译优化</h2><p>前端编译器：把<em>.java转换为</em>.class文件的过程。：javac编译器，用于泛型。<br>JVM的即时编译器（JIT）：运行期把字节码转为本地机器码的过程。HotSpot虚拟机的c1，c2编译器，Graal编译器。<br>静态的提前编译器：直接把程序编译成和目标机器指令集相关的二进制代码。</p><h2 id="解释器和编译器"><a href="#解释器和编译器" class="headerlink" title="解释器和编译器"></a>解释器和编译器</h2><ol><li>解释器用于快速启动执行程序，省去编译时间，立即运行。</li><li>随着时间推移，编译器会优化代码，把代码编译成本地代码，减少解释器的中间损耗。</li><li>解释器节约内存</li><li>解释器可以作为编译器激进优化的逃生门，如果类的继承结构出现变化，要通过逆优化退回到解释状态继续执行。</li></ol><h2 id="即时编译器"><a href="#即时编译器" class="headerlink" title="即时编译器"></a>即时编译器</h2><ul><li>客户端编译器，c1，运行在虚拟机-client模式，获取更高的编译速度，可采用简单优化给服务端争取更多编译时间。</li><li>服务端编译器，c2，-server模式，获取更好的编译质量。</li><li>Graal，jdk10，目标是替代c2.</li></ul><h2 id="分层编译"><a href="#分层编译" class="headerlink" title="分层编译"></a>分层编译</h2><ul><li>出现之前，解释器和任意一个编译器搭配执行，通常指定jvm工作模式。-Xint，-Xcomp。</li><li>为了在启动速度和运行效率达到平衡，因为服务端编译器时间长，</li><li>解释器可能会为编译器收集性能监控信息。</li></ul><p><strong>过程：</strong></p><ul><li>第0层：程序纯解释执行，不开性能监控。</li><li>1：用客户端编译器将字节码编译为本地代码来运行，进行简单可靠的稳定优化，不开性能监控。</li><li>2：客户端编译器执行，只开启方法及回边次数统计等有限功能。</li><li>3：客户端执行，开启全部监控。</li><li>4：服务端把字节码编译成本地代码，时间长，可能利用性能监控信息进行激进优化。</li></ul><h2 id="编译对象和触发条件"><a href="#编译对象和触发条件" class="headerlink" title="编译对象和触发条件"></a>编译对象和触发条件</h2><p><strong>即时编译器的目标：</strong><br>被多次调用的方法，<br>被多次执行的循环体。</p><ul><li>编译对象：这俩都是整个方法体，第一个是标准的即时编译方式，第二个又叫栈上替换，就是执行入口不一样，因为方法栈帧还在栈上，就被替换了。</li><li>触发条件：<ul><li>判断是不是热点代码<ul><li>基于采样的热点探测</li><li>基于计数器的热点探测，HotSpot用的。<ul><li>方法调用计数器，有热度衰减（在gc顺便做的），一定时间内相对的执行频率。不是绝对调用次数。</li><li>回边计数器（就是循环体执行的次数），因为循环就有控制流向后跳转的指令。超过阈值，提交栈上替换编译请求，计数器值调低一些，让解释器继续执行，可以等待编译器编译完成。计数器没有热度衰减，会溢出，就把计数器值调到溢出状态，下次如果再执行，就会触发标准编译。</li></ul></li></ul></li><li>判断是否触发即时编译<ul><li>两个计数器值得和超过某个计数器的阈值。</li></ul></li></ul></li></ul><h2 id="编译优化"><a href="#编译优化" class="headerlink" title="编译优化"></a>编译优化</h2><ol><li>方法内联：一是去除方法调用的成本（查找方法版本，建立栈帧），二是为其它优化建立良好的基础。</li><li>冗余访问消除</li><li>复写传播</li><li>无用代码消除</li></ol><h3 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h3><ul><li>就是把目标方法的代码原封不动的复制到发起调用的方法里，避免发生真实的方法调用。</li><li>非虚方法：直接内联，一定是安全的。私有方法，静态方法，父类方法，实例构造器，final方法，在编译时就可以，</li><li>虚方法，运行期才知道，多态选择，依赖JIT。</li></ul><p><strong>解决虚方法内联，引入类型继承关系分析CHA，确定在目前已加载的类中，某个接口是否有多于一种的实现，子类啥的，子类是否覆盖虚方法了</strong></p><ul><li><p>守护内联：CHA只查到一个版本，假设就是现在这样，然后内联。属于激进预测优化，预留逃生门。发生变化就退回到解释状态继续执行。</p></li><li><p>内联缓存：有多个版本，方法调用真实发生，但比直接查虚方法表块。在未发生调用之前，为空，第一次调用，缓存记录每个调用方法版本，如果一样就是单态内连缓存，仅多了一次类型判断。<br>如果出现不一致，就退化成超多态内联缓存，开销相当于查虚方法表。</p></li></ul><h3 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h3><ul><li>分析对象作用域，当一个对象在方法里面被定义后，他可能被外部方法引用，是方法逃逸。还可能被外部线程访问到，线程逃逸。</li><li>栈上分配：如果对象不会逃逸出线程，就栈上分配对象，不能保证不逃出方法。不支持线程逃逸。</li><li>标量替换: （基本类型+ref是标量），聚合量（对象，数据可以继续分解）。如果一个对象不会被方法外部访问，并且这个对象可以拆散，程序执行可能直接创建这个方法使用的成员变量（在栈上），不创建对象，不允许逃逸出方法。</li><li>同步消除，如果一个变量不会逃逸出线程，那读写就无竞争，同步措施就可以去掉。</li></ul><p>随着JIT编译器的发展，在编译期间，如果JIT经过逃逸分析，发现有些对象没有逃逸出方法，那么有可能堆内存分配会被优化成栈内存分配。但是这也并不是绝对的。就像我们前面看到的一样，在开启逃逸分析之后，也并不是所有User对象都没有在堆上分配。</p><h3 id="公共子表达式消除"><a href="#公共子表达式消除" class="headerlink" title="公共子表达式消除"></a>公共子表达式消除</h3><ul><li>如果一个表达式E被计算过了，并且从之前到现在E中变量值都不变，这就是公共子表达式。<ul><li>局部公共子表达式消除：仅限于程序基本块内</li><li>全局<del>~</del>: 涵盖多个基本块。</li></ul></li></ul><h3 id="数组边界检查消除"><a href="#数组边界检查消除" class="headerlink" title="数组边界检查消除"></a>数组边界检查消除</h3><ul><li>编译器分析数据流，如果确定不会越界，就可以把数组上下界检查消除掉。就是尽可能把运行期检查放到编译器去完成。</li></ul><h3 id="避开的处理思路–隐式异常处理"><a href="#避开的处理思路–隐式异常处理" class="headerlink" title="避开的处理思路–隐式异常处理"></a>避开的处理思路–隐式异常处理</h3><p>Java中空指针和除数为0都是这个思路。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> foo<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPOintException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>变为下面的<span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> foo<span class="token punctuation">.</span>value<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>segment_fault<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">uncommon_trap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>虚拟机注册一个进程层面的异常处理器，并非真的trycatch语句的异常处理器。</li><li>如果不空，不会额外判空开销。</li><li>空了，就会转到异常处理器中恢复中断并抛出空指针异常。进入异常处理器过程涉及到进程从用户态转到内核态中处理的过程，结束后再回到用户态，远比一次判空要慢</li><li>虚拟机会根据情况自己优化。</li></ul><h2 id="Java中的对象创建有多少种方式？"><a href="#Java中的对象创建有多少种方式？" class="headerlink" title="Java中的对象创建有多少种方式？"></a>Java中的对象创建有多少种方式？</h2><p>new关键字<br>反射机制创建对象： User.class.newInstance();<br>或者使用Constructor类的newInstance：<br>Constructor<User> constructor = User.class.getConstructor();<br>User user = constructor.newInstance();<br>还可以使用clone方法和反序列化的方式</User></p><h2 id="new-A"><a href="#new-A" class="headerlink" title="new A()"></a>new A()</h2><p>执行 new A() 的时候，JVM native 层里发生了什么。首先，如果这个类没有被加载过，JVM 就会进行类的加载，并在 JVM 内部创建一个 instanceKlass 对象表示这个类的运行时元数据（相当于 Java 层的 Class 对象）。到初始化的时候（执行 invokespecial A::<init>），JVM 就会创建一个 instanceOopDesc 对象表示这个对象的实例，然后进行 Mark Word 的填充，将元数据指针指向 Klass 对象，并填充实例变量。</init></p><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><p>1、虚拟机遇到new指令，到常量池定位到这个类的符号引用。<br>2、检查符号引用代表的类是否被加载、解析、初始化过。<br>3、虚拟机为对象分配内存。<br>4、虚拟机将分配到的内存空间都初始化为零值。<br>5、虚拟机对对象进行必要的设置。<br>6、执行方法，成员变量进行初始化。</p><ol><li>检查常量池中是否有要创建的这个对象所属类的符号引用<ul><li>若无,说明这个类还没有被定义!抛ClassNotFoundException</li><li>若有,转2</li></ul></li><li>检查这个符号引用所代表的类是否已被JVM加载<ul><li>若否,就找该类的class文件,并加载进方法区</li><li>若是,转3</li></ul></li><li>根据方法区中该类的信息确定该类所需的内存大小<ul><li>一个对象所需的内存大小是在这个对象所属类被定义完就能确定的!且一个类所生产的所有对象的内存大小是一样的!</li><li>JVM在一个类被加载进方法区的时候就知道该类生产的每一个对象所需要的内存大小</li></ul></li><li>从堆中划分一块对应大小的内存空间给新的对象,分配堆中内存有两种方式<ul><li><code>指针碰撞</code>(Bump the Pointer)<ul><li>如果JVM的垃圾收集器采用<code>复制算法或标记-整理算法,有压缩整理过程的收集器</code>,那么<code>堆中空闲内存是完整的区域</code>,并且空闲内存和已使用内存之间由一个指针标记。那么当为一个对象分配内存时,只需移动指针即可.因此,这种在完整空闲区域上通过移动指针来分配内存的方式就叫做”指针碰撞”</li></ul></li><li><code>空闲列表</code> (Free List)<ul><li>如果JVM的GC器采用<code>标记-清除算法</code>,那么<code>堆中空闲区域和已使用区域交错</code>，因此需要用一张“空闲列表”来记录堆中哪些区域是空闲区域，从而在创建对象的时候根据这张“空闲列表”找到空闲区域，并分配内存</li></ul></li></ul></li><li>把对象的实例字段初始化为零值。</li><li>设置对象头</li><li>调用对象的构造函数进行初始化</li></ol><h2 id="指针碰撞并发或Java对象的内存分配过程是如何保证线程安全的？"><a href="#指针碰撞并发或Java对象的内存分配过程是如何保证线程安全的？" class="headerlink" title="指针碰撞并发或Java对象的内存分配过程是如何保证线程安全的？"></a>指针碰撞并发或Java对象的内存分配过程是如何保证线程安全的？</h2><ol><li>同步处理—：虚拟机采用CAS+失败重试保证更新操作的原子性。</li><li>把内存分配的动作按照线程划分在不同空间，本地线程分配缓冲TLAB，本地缓冲用完了再同步锁定处理分配新的。<ul><li>TLAB仅作用于新生代的Eden Space，对象被创建的时候首先放到这个区域，但是新生代分配不了内存的大对象会直接进入老年代。因此在编写Java程序时，通常多个小的对象比大的对象分配起来更加高效。</li></ul></li></ol><h2 id="i-和-i的区别"><a href="#i-和-i的区别" class="headerlink" title="i++和++i的区别"></a>i++和++i的区别</h2><ul><li><p>i++并非原子操作。即使通过volatile关键字进行修饰，多个线程同时写的话，也会产生数据互相覆盖的问题.</p></li><li><p>iload_1 : 从局部变量表的第1号抽屉里取出一个数, 压入栈顶。</p></li><li><p>istore_1 : 弹出栈顶元素，放到局部变量表1处卡槽。</p></li><li><p>iinc：在卡槽中进行自加。</p></li><li><p>iconst_0: 把0压入栈顶。</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">:</span> iconst_0             把<span class="token number">0</span>压入栈顶<span class="token number">1</span><span class="token operator">:</span> istore_1             弹出栈顶值<span class="token number">0</span>，并放到<span class="token number">1</span>号抽屉。也就是i<span class="token number">2</span><span class="token operator">:</span> iload_1              取出<span class="token number">1</span>号抽屉的<span class="token number">0</span>压到栈顶<span class="token number">3</span><span class="token operator">:</span> iinc          <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>   在抽屉中自加<span class="token number">6</span><span class="token operator">:</span> istore_2             弹出栈顶值<span class="token number">0</span>，放到抽屉<span class="token number">2</span>，也就是x                y <span class="token operator">=</span> <span class="token operator">++</span>i 的操作<span class="token number">7</span><span class="token operator">:</span> iinc          <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>   先在抽屉中自加 <span class="token number">10</span><span class="token operator">:</span> iload_1             取出抽屉<span class="token number">1</span>的<span class="token number">1</span>，放到栈顶<span class="token number">11</span><span class="token operator">:</span> istore_3            pop栈顶值，放到<span class="token number">3</span>号抽屉，就是y<span class="token number">12</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">javap <span class="token operator">-</span>v <span class="token operator">-</span>c <span class="token operator">-</span>l 类名<span class="token operator">-</span>v：输出行号、本地变量表信息、反编译汇编代码，还会输出当前类用到的常量池等信息。<span class="token operator">-</span>l：输出行号和本地变量表信息<span class="token operator">-</span>c：会对当前<span class="token keyword">class</span>字节码进行反编译生成汇编代码<span class="token keyword">return</span> z<span class="token punctuation">;</span> iload_3放到栈顶，然后返回。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内存溢出和内存泄漏"><a href="#内存溢出和内存泄漏" class="headerlink" title="内存溢出和内存泄漏"></a>内存溢出和内存泄漏</h2><p>内存泄漏的原因很简单：</p><ul><li>对象是可达的(一直被引用)</li><li>但是对象不会被使用</li></ul><p>常见的内存泄漏例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Set set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置为空，这对象我不再用了</span>        object <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 但是set集合中还维护这obj的引用，gc不会回收object对象</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决这个内存泄漏问题也很简单，将set设置为null，那就可以避免上诉内存泄漏问题了。其他内存泄漏得一步一步分析了。</p><p>内存溢出的原因：</p><ul><li>内存泄露导致堆栈内存不断增大，从而引发内存溢出。</li><li>大量的jar，class文件加载，装载类的空间不够，溢出</li><li>操作大量的对象导致堆内存空间已经用满了，溢出</li><li>nio直接操作内存，内存过大导致溢出</li></ul><p>解决：</p><ul><li><p>查看程序是否存在内存泄漏的问题</p></li><li><p>设置参数加大空间</p></li><li><p>代码中是否存在死循环或循环产生过多重复的对象实体、</p></li><li><p>查看是否使用了nio直接操作内存。</p></li><li><p>内存溢出：程序申请内存时，没有足够内存了。OOM，栈内存越界也是常见的内存溢出。</p></li><li><p>内存泄漏：程序申请内存后，无法正确释放，就和借钱不还一样。一次内存泄漏可以忽略，但是很多次造成内存减少，OOM。不再会被使用的对象的内存不能被回收，就是内存泄露。<strong style="color:red">如果长生命周期的对象持有短生命周期的引用，就很可能会出现内存泄露。</strong></p><ul><li>在类中声明一个字段，在方法中new，但是本想让作用域是方法，却要等到类的实例销毁才能释放这个字段对象。</li><li>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收；</li><li>内部类持有外部类，</li><li>单例模式导致的内存泄露，它是一个长生命周期的对象。如果这个对象持有其他对象的引用，也很容易发生内存泄露。</li><li>改变哈希值，当一个对象被存储进HashSet集合中以后，就不能修改这个对象中的那些参与计算哈希值的字段了。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Simple</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Object object<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//...其他代码</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><strong>内存溢出解决</strong></p><ul><li>调整JVM参数</li><li>Heap Size 最大不要超过可用物理内存的 80％，一般的要将 -Xms和 -Xmx选项设置为相同，而 -Xmn为 1/4的 -Xmx值。<ul><li>-Xmn 此参数硬性规定堆空间的新生代空间大小，推荐设为堆空间大小的1/4。</li></ul></li><li>-Xss 单个线程堆栈大小值；JDK5.0 以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。</li></ul><p><strong>内存泄漏解决</strong></p><ul><li>尽量减小对象的作用域.</li><li>赋值为null，不管GC何时会开始清理，我们都应及时的将无用的对象标记为可被清理的对象。</li></ul><h2 id="说说线程栈"><a href="#说说线程栈" class="headerlink" title="说说线程栈"></a>说说线程栈</h2><p>这里的线程栈应该指的是虚拟机栈吧…</p><p>JVM规范让每个Java线程拥有自己的独立的JVM栈，也就是Java方法的调用栈。</p><p>当方法调用的时候，会生成一个栈帧。栈帧是保存在虚拟机栈中的，栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息</p><p>线程运行过程中，只有一个栈帧是处于活跃状态，称为“当前活跃栈帧”，当前活动栈帧始终是虚拟机栈的栈顶元素。</p><p>通过jstack工具查看线程状态<br>jps -l 查看id<br>jstack -l 线程id</p><h2 id="JVM-出现-fullGC-很频繁，怎么去线上排查问题？"><a href="#JVM-出现-fullGC-很频繁，怎么去线上排查问题？" class="headerlink" title="JVM 出现 fullGC 很频繁，怎么去线上排查问题？"></a>JVM 出现 fullGC 很频繁，怎么去线上排查问题？</h2><p><strong>这题就依据full GC的触发条件来做：</strong></p><ul><li><p>如果有perm gen的话(jdk1.8就没了)，要给perm gen分配空间，但没有足够的空间时，会触发full gc。     </p><ul><li>所以看看是不是perm gen区的值设置得太小了。</li></ul></li><li><p>System.gc()方法的调用     - 这个一般没人去调用吧<del>~</del></p></li><li><p>当统计得到的Minor GC晋升到旧生代的<strong>平均大小大于老年代的剩余空间</strong>，则会触发full gc(这就可以从多个角度上看了)     </p></li><li><p>是不是<strong>频繁创建了大对象(也有可能eden区设置过小)(大对象直接分配在老年代中，导致老年代空间不足—&gt;从而频繁gc)</strong></p></li><li><p>是不是<strong>老年代的空间设置过小了</strong>(Minor GC几个对象就大于老年代的剩余空间了)</p></li></ul><p>首先根据使用的垃圾收集器分析fullGC的出现情况，<br>然后可以加参数打印日志排查</p><pre class="line-numbers language-java"><code class="language-java">在线上开启 <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>HeapDumpBeforeFullGC。JVM在执行dump操作的时候是会发生stop the word事件的，也就是说此时所有的用户线程都会暂停运行。为了在此期间也能对外正常提供服务，建议采用分布式部署，并采用合适的负载均衡算法<span class="token operator">-</span>XX<span class="token operator">:</span>HeapDumpOnOutOfMemoryError<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用jvisualvm 或者mat查看文件。<br>确认导致OOM的对象，就是确定是内存溢出还是内存泄漏。</p><ul><li>如果是内存泄漏，查看泄漏对象到GC Roots的引用链，找到泄漏对象的引用路径，和哪些GCRoots关联，进而找到产生错误的代码位置。</li><li>如果是内存溢出，扩大堆内存，检查对象生命周期等，</li></ul><pre class="line-numbers language-java"><code class="language-java">cat <span class="token operator">/</span>proc<span class="token operator">/</span>meminfo<span class="token punctuation">,</span> 查看总内存，剩余内存cat <span class="token operator">/</span>proc<span class="token operator">/</span>cpuinfo <span class="token punctuation">,</span> 查看linux系统的CPU型号、类型以及大小查看物理CPU个数cat <span class="token operator">/</span>proc<span class="token operator">/</span>cpuinfo<span class="token operator">|</span> grep <span class="token string">"physical id"</span><span class="token operator">|</span> sort<span class="token operator">|</span> uniq<span class="token operator">|</span> wc <span class="token operator">-</span>l查看每个物理CPU中core的个数<span class="token punctuation">(</span>即核数<span class="token punctuation">)</span>cat <span class="token operator">/</span>proc<span class="token operator">/</span>cpuinfo<span class="token operator">|</span> grep <span class="token string">"cpu cores"</span><span class="token operator">|</span> uniqtop<span class="token punctuation">,</span> CPU负载信息Load Average的值应该 小于 CPU个数<span class="token operator">*</span>核数<span class="token operator">*</span><span class="token number">0.7</span>，Load Average会有<span class="token number">3</span>个状态平均值，分别是<span class="token number">1</span>分钟、<span class="token number">5</span>分钟和<span class="token number">15</span>分钟平均Load。查看磁盘信息<span class="token number">1</span>）fdisk <span class="token operator">-</span>l<span class="token number">2</span>）iostat <span class="token operator">-</span>x <span class="token number">10</span>    查看磁盘IO的性能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Object-null和GC"><a href="#Object-null和GC" class="headerlink" title="Object=null和GC"></a>Object=null和GC</h2><ul><li>一般都是保证局部变量在正确的作用域内，JVM会自己回收。如果赋值null，会被JIT优化掉。</li><li>当遇到局部代码段中已经申请许多占用空间的对象，这些对象在其作用域内的后续代码中还需要执行相对较长的时间，并且这块内存的确在后面就不会再使用了的时候，可以手工将一些大对象的引用设置为null，这样一来，GC很快就会认为它是垃圾。通常，在这种情况下将对象的引用设置为null才会对JVM有好处。</li></ul><h2 id="Xss与线程个数"><a href="#Xss与线程个数" class="headerlink" title="Xss与线程个数"></a>Xss与线程个数</h2><p>Xss越大，每个线程大小越大，占用的内存越多，能容纳的线程就越少；<br>Xss越小，则递归的深度越小，容易出现栈溢出 java.lang.StackOverflowError。</p><p>java线程数决定因素</p><pre><code>(MaxProcessMemory - JVMMemory – ReservedOsMemory) / (ThreadStackSize) = Number of threadsMaxProcessMemory : 进程的最大寻址空间JVMMemory : JVM内存ReservedOsMemory : 保留的操作系统内存，如Native heap，JNI之类，一般100多MThreadStackSize : 线程栈的大小，jvm启动时由Xss指定</code></pre><h2 id="泛型和Object和"><a href="#泛型和Object和" class="headerlink" title="泛型和Object和?"></a>泛型和Object和?</h2><ul><li>泛型：目的是限定参数的某种类型，也即是参数化类型，参数化多态。是类型的一种泛指</li><li><code>List&lt;T&gt; 和 List&lt;Object&gt; 没有区别，这里边的Object只是个代号而已，不是父类Object</code></li></ul><p><strong style="background:yellow">Object和T区别：</strong></p><ol><li>Object范围非常广，而T从一开始就会限定这个类型（包括它可以限定类型为Object）</li><li>Object由于它是所有类的父类，所以会强制类型转换，而T从一开始在编码时（<strong>注意是在写代码时</strong>）就限定了某种具体类型，所以它不用强制类型转换。（<strong>之所以要强调在写代码时是因为泛型在虚拟机中会被JVM擦除掉它的具体类型信息</strong>）。</li><li>从反射方面来说，在运行时,返回一个T的实例时,不需要经过强制转换,然后Object则需要经过转换才能得到。</li></ol><pre class="line-numbers language-java"><code class="language-java">IList1<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IList1</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IList2 list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IList2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> list2<span class="token punctuation">.</span><span class="token function">getOb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>若是 ?</strong><ul><li>代表这是个不确定类型，</li><li>如果只用”?”那么它和Object是一样的。</li><li>它能缩小一个不确定的范围，利用类似”? extends Test”，这就意味着只接收接收Test类的继承类。</li><li><code>&lt;? extends T&gt;：是指 “上界通配符,</code> ?代表容器里的元素类型的父类都是T，但是具体什么类型不知道，<strong>禁止做插入操作，只做读取</strong>。</li><li><code>&lt;? super T&gt;：是指 “下界通配符</code>: ?代表容器里的元素类型，由于只规定了元素必须是B的超类，导致元素没有明确统一的“根”（除了Object这个必然的根）,只能存，取出必须转为Object。</li><li><code>Collection的方法boolean removeAll(Collection&lt;?&gt; c);</code></li></ul></li></ul><h2 id="Collection和Collections的区别。"><a href="#Collection和Collections的区别。" class="headerlink" title="Collection和Collections的区别。"></a>Collection和Collections的区别。</h2><p>Collection是集合类的上级接口，继承他的接口主要有Set和List.</p><p>Collections是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。</p><h2 id="java对象模型"><a href="#java对象模型" class="headerlink" title="java对象模型"></a>java对象模型</h2><ul><li><code>一个Java对象包含三部分：对象头、实例数据和对齐填充。</code></li><li>OOP-Klass Model。OOP指的是普通对象指针，而Klass用来描述对象实例的具体类型。</li><li><code>为什么HotSpot要设计一套oop-klass model呢？答案是：HotSopt JVM的设计者不想让每个对象中都含有一个vtable（虚函数表）</code><ul><li>多态是一种方法的动态绑定，实现运行时的类型决定对象的行为。表现形式是父类指针或引用指向子类对象，在这个指针上调用的方法使用子类的实现版本。</li><li><code>虚拟机动态分派的实现就是依赖虚方法表或接口方法表。</code></li><li><code>每个Klass都有一个虚方法表或者接口方法表，存放着方法的实际入口地址</code>。如果子类没有重写方法，那么和父类虚方法表中的入口地址一样，都指向父类的实现入口地址，对于重写的方法，子类的虚方法表会被替换为子类的实现版本入口地址。</li><li>例如Father有h(QQ)和h(360),Son重写了父类这两个方法。那么在Son和Father的类型元数据中就会有相同的继承自Object的clone方法等，但是重写的这部分就指向了自己实现的地址。</li><li>在Java中，<code>在运行时会维持类型信息以及类的继承体系</code>。每一个类会在方法区(jdk8及以后在元空间)中对应一个数据结构用于存放类的信息，可以通过Class对象访问这个数据结构。其中，类型信息具有superclass属性指示了其超类，以及这个类对应的方法表（其中只包含这个类定义的方法，不包括从超类继承来的）。而每一个在堆上创建的对象，都具有一个指向方法区类型信息数据结构的指针，通过这个指针可以确定对象的类型。<ul><li>类型信息就是元数据啥的，虚方法表等。</li><li>类的继承体系，为了解决虚方法的内联问题，引入了类型继承关系分析技术（CHA），用于确定在目前已加载的类中，是否有多于一种的实现，某个类是否存在子类，接口是否有多实现，子类是否覆盖了父类的虚方法等信息。书上p417。</li></ul></li></ul></li></ul><p><strong>OOP体系</strong></p><ul><li><p>typedef class   oopDesc* ，定义了oops共同基类，下面还有很多，在基类里面有， _mark , _metadata。</p></li><li><p><code>当我们使用new创建一个Java对象实例的时候，JVM会创建一个instanceOopDesc对象来表示这个Java对象。</code></p></li><li><p><code>同理，当我们使用new创建一个Java数组实例的时候，JVM会创建一个arrayOopDesc对象来表示这个数组对象。</code></p></li><li><p><code>instanceOopDesc实际上就是继承了oopDesc，并没有增加其他的数据结构，也就是说instanceOopDesc中主要包含以下几部分数据</code>：</p><ul><li><code>markOop _mark和union _metadata</code></li><li><code>以及一些不同类型的 field</code>。</li></ul></li><li><p>一个Java对象包含三部分数据：</p><ul><li>对象头：_mark和_metadata</li><li>实例数据 ：保存在oopDesc中定义的各种field中。</li><li>对齐填充`：</li></ul></li></ul><p><strong>分析对象头</strong></p><ul><li>_mark 成员，也是Mark Word ，允许压缩。它用于存储对象的运行时记录信息，如哈希值、GC 分代年龄(Age)、锁状态标志（偏向锁、轻量级锁、重量级锁）、线程持有的锁、偏向线程 ID、偏向时间戳等。</li><li>_metadata ：元数据指针，它是联合体（共用体），可以表示未压缩的 Klass 指针(_klass)和压缩的 Klass 指针（_compressed_klass）。对应的 klass 指针指向一个存储类的元数据的 Klass 。</li></ul><p>下面是重要的三个。</p><pre class="line-numbers language-cpp"><code class="language-cpp">klassOop的一部分，用来描述语言层的类型<span class="token keyword">class</span>  <span class="token class-name">Klass</span><span class="token punctuation">;</span>在虚拟机层面描述一个Java类<span class="token keyword">class</span>   <span class="token class-name">instanceKlass</span><span class="token punctuation">;</span>专有instantKlass，表示java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Class的Klass<span class="token keyword">class</span>     <span class="token class-name">instanceMirrorKlass</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>instanceKlass是一个数据结构用来存储各种类元信息，比如：虚方法表，类的名称、方法信息、字段信息包括类的名称、方法信息、字段信息。</li><li>MirrorKlass则是相当于instanceKlass的一个实例，对应着java的Class对象，存放在堆中，就是new了一个上面的对象，方便用来访问类元数据。所谓加载的类信息，就是给每一个被加载的类都创建了一个 instantKlass对象么。</li></ul><p>假如有这样的A类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么在JDK 6或之前的HotSpot VM里：</p><pre><code>Java object      InstanceKlass       Java mirror [ _mark  ]                          (java.lang.Class instance) [ _klass ] --&gt; [ ...          ] &lt;-\               [ fields ]     [ _java_mirror ] --+&gt; [ _mark  ]                [ ...          ]   |  [ _klass ]                [ A.value      ]   |  [ fields ]                                    \ [ klass  ]</code></pre><p>而在JDK 7或之后的HotSpot VM里：</p><pre><code>Java object      InstanceKlass       Java mirror [ _mark  ]                          (java.lang.Class instance) [ _klass ] --&gt; [ ...          ] &lt;-\               [ fields ]     [ _java_mirror ] --+&gt; [ _mark   ]                [ ...          ]   |  [ _klass  ]                                   |  [ fields  ]                                    \ [ klass   ]                                      [ A.value ]</code></pre><p>可以看到这个A.value静态字段就在java.lang.Class对象的末尾存着了。</p><ol><li>java Object为堆中的实例对象 </li><li>InstanceKlass为加载阶段，类的元数据 </li><li>JAVA mirror为加载阶段生成的元数据对应的Class对象</li></ol><ul><li><p><code>每个Java对象的对象头里，_klass字段会指向一个VM内部用来记录类的元数据用的InstanceKlass对象；InsanceKlass里有个_java_mirror字段，指向该类所对应的Java镜像——java.lang.Class实例。HotSpot VM会给Class对象注入一个隐藏字段“klass”，用于指回到其对应的InstanceKlass对象。这样，klass与mirror之间就有双向引用，可以来回导航。</code></p></li><li><p>这个模型里，<code>java.lang.Class实例并不负责记录真正的类元数据，而只是对VM内部的InstanceKlass对象的一个包装供Java的反射访问用</code>。</p></li><li><p>在JDK 6及之前的HotSpot VM里，静态变量保存在类的元数据（InstanceKlass）的末尾。而从JDK 7开始的HotSpot VM，静态变量则是保存在类的Java镜像（java.lang.Class实例）的末尾。</p></li></ul><p><strong>静态字段的“偏移量”就是：</strong></p><ul><li>JDK 6或之前：相对该类对应的InstanceKlass（实际上是包装InstanceKlass的klassOopDesc）对象起始位置的偏移量.</li><li>JDK 7或之后：相对该类对应的java.lang.Class对象起始位置的偏移量。</li></ul><h3 id="HotSpot-VM里的InstanceKlass和java-lang-Class实例都是放哪里的呢？"><a href="#HotSpot-VM里的InstanceKlass和java-lang-Class实例都是放哪里的呢？" class="headerlink" title="HotSpot VM里的InstanceKlass和java.lang.Class实例都是放哪里的呢？"></a>HotSpot VM里的InstanceKlass和java.lang.Class实例都是放哪里的呢？</h3><p>在JDK 7或之前的HotSpot VM里，InstanceKlass是被包装在由GC管理的klassOopDesc对象中，存放在GC堆中的所谓Permanent Generation（简称PermGen）中。</p><p>从JDK 8开始的HotSpot VM则完全移除了PermGen，改为在native memory里存放这些元数据。新的用于存放元数据的内存空间叫做Metaspace，InstanceKlass对象就存在这里。至于java.lang.Class对象，它们从来都是“普通”Java对象，跟其它Java对象一样存在普通的Java堆（GC堆的一部分）里。</p><h2 id="JVM总结"><a href="#JVM总结" class="headerlink" title="JVM总结"></a>JVM总结</h2><ul><li><a href="https://my.oschina.net/u/3777556/blog/1844622">https://my.oschina.net/u/3777556/blog/1844622</a></li><li><a href="https://www.zhihu.com/people/xia-qi-40-38/posts?page=2">https://www.zhihu.com/people/xia-qi-40-38/posts?page=2</a></li></ul><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="java的对象头"><a href="#java的对象头" class="headerlink" title="java的对象头"></a>java的对象头</h2><ul><li><p><code>_mark 成员</code>，也是<code>Mark Word</code> ，允许压缩。它用于存储对象的运行时记录信息，如哈希值、GC 分代年龄(Age)、锁状态标志（偏向锁、轻量级锁、重量级锁）、线程持有的锁、偏向线程 ID、偏向时间戳等。</p></li><li><p><code>_metadata</code> ：<code>元数据指针</code>，它是联合体（共用体），可以表示未压缩的 Klass 指针(_klass)和压缩的 Klass 指针（_compressed_klass）。对应的 klass 指针指向一个存储类的元数据的 Klass 。</p></li><li><p>如果是数组类型 用3个字宽（3*4字节）即12位存储，32位Mark word , 32位存储到对象类型数据的指针，32位存储数组长度。如果普通对象，没有数组长度，用2个字宽存储。</p></li><li><p>synchronized的锁是存在java对象头里面的。</p></li><li><p>锁标志位 00 轻量级锁 ；01偏向锁 10重量级锁；GC标志11。因为有5种状态，又加了一个是否偏向的的Bit。</p></li></ul><blockquote><p>在32位的HotSpot虚拟机 中对象未被锁定的状态下，Mark Word的32个Bits空间中的25Bits用于存储对象哈希码(HashCode)，4Bits用于存储对象分代年龄，2Bits用于存储锁标志位，1Bit固定为0，表示非偏向锁。</p></blockquote><ul><li><p><code>Java对象的存储</code>：对象的实例（instantOopDesc)保存在堆上，对象的元数据（instantKlass）保存在方法区，对象的引用保存在栈上。</p></li><li><p>对象有三部分数据</p><ul><li>对象头，实例数据，对齐填充。</li></ul></li></ul><h2 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h2><ul><li>java内存模型是为了用来屏蔽掉各种硬件和操作系统的内存访问的差异，实现java在个平台都能达到一致性的内存访问效果。</li></ul><p><strong>内存模型</strong>：为了保证共享内存的正确性（可见性、有序性、原子性），内存模型定义了共享内存系统中多线程程序读写操作行为的规范。通过这些规则来规范对内存的读写操作，从而保证指令执行的正确性。它与处理器有关、与缓存有关、与并发有关、与编译器也有关。他解决了CPU多级缓存、处理器优化、指令重排等导致的内存访问问题，保证了并发场景下的一致性、原子性和有序性。</p><p><strong>内存模型解决并发问题主要采用两种方式</strong>：<code>限制处理器优化和使用内存屏障。</code></p><p><strong>CPU和缓存一致性：有L1,L2,L3,一般每个核心会有自己的L1(甚至L2)，共享L3。首先从一级缓存中查找，如果没有找到再从二级缓存中查找，如果还是没有就从三级缓存或内存中查找。</strong></p><p><strong>在多核CPU，多线程下，会发生</strong>, <strong><code>缓存一致性问题</code></strong>, <strong>由于多核是可以并行的，可能会出现多个线程同时写各自的缓存的情况，而各自的cache之间的数据就有可能不同。</strong></p><p><strong>处理器优化和指令重排问题，</strong></p><ul><li>为了使处理器内部的运算单元能够尽量的被充分利用，处理器会对输入代码<strong>乱序执行</strong></li><li>编译器优化重排序，指令集并行重排序，内存系统重排序。指令集重排序导致原子性。</li></ul><p><strong style="color:red">缓存一致性问题其实就是可见性问题。而处理器优化是可以导致原子性问题的。指令重排即会导致有序性问题。</strong></p><ul><li><p>java内存模型的主要目的是定义程序中各种变量的访问规则，把值存到内存和取内存值，不包括线程私有的那部分数据。包括了实例字段，静态字段，和构成数组对象的元素。</p></li><li><p>所有的变量存在主内存，是虚拟机内存的一部分。</p></li><li><p>每个java线程都有自己的工作内存。线程的工作内存中保存了该线程中是用到的变量的主内存副本拷贝。对变量操作都在工作内存中，然后同步到主内存。</p></li><li><p>如果要和jvm内存区域相对应，则主内存对应堆中的对象实例数据部分，工作内存对应栈，更基础的层次看，主内存直接对应物理硬件的内存，工作内存可能在寄存器和高速缓存中。</p></li><li><p>java内存之间的交互使用了8种操作，Lock（锁定），unclock，read，load（载入），use（使用），assign（赋值），store存储，write（写入）。</p></li><li><p>Java内存模型把内存屏障分为LoadLoad、LoadStore、StoreLoad和StoreStore，通过写内存屏障来禁止指令的重排序</p></li><li><p>volatile：<code>第一个是对所有线程立即可见</code>，原子操作线程不安全，因为分成几个字节码指令，一个字节码可能对应多个机器指令，会有把旧值写回到主内存的风险。<code>第二个是禁止指令重排序优化。</code>加了一个lock指令，将本处理器的缓存写入了内存，引起别的内核值无效化，保证之前的动作都已经完成，另一种意义也是禁止指令重排序。通过加入内存屏障和禁止指令重排序实现。一般是读操作前加load屏障，写操作后加store屏障</p></li><li><p><code>原子性</code>：<strong>原子性是指在一个操作中就是cpu不可以在中途暂停然后再调度，既不被中断操作，要不执行完成，要不就不执行</strong>。字节码指令monitorenter和monitorexit反映到synchronized同步块和方法上。线程不会交叉执行</p></li><li><p><code>可见性</code>：<strong>是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值</strong>。Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值的这种依赖主内存作为传递媒介的方式来实现的。</p><ul><li>volatile，synchronized和final。同步块的可见性由unlock之前，必须把值同步到主内存，final因为修饰的字段一旦被初始化完成，并且构造器的this没有逃出，（不然初始到一半，被外部访问了就不行），其他线程就能看见final值。volatile被其修饰的变量在被修改后可以立即同步到主内存，被其修饰的变量在每次是用之前都从主内存刷新。</li></ul></li><li><p><code>有序性</code>：<strong>即程序执行的顺序按照代码的先后顺序执行</strong>。voatile和synchronized，volatile本身有禁止指令重排序的语义，synchronized由“一个变量同一个时刻只能有一个线程进行lock操作。”</p></li><li><p><code>共享变量：</code>，如果一个变量在多个线程的工作内存中都有拷贝，那这个变量就是这几个线程的共享变量。</p></li><li><p><code>共享变量可见性实现的原理</code> : 把工作内存1中的变量刷新到主内存，将主内存中的值更新到工作内存2中。</p></li></ul><p><strong>Java内存模型（JMM）解决了可见性和有序性的问题，volatile是无法保证复合操作的原子性。而锁解决了原子性的问题。</strong></p><p>与锁相比，<code>volatile变量是一个更轻量级的同步机制</code>，因为在使用这些变量时不会发生上下文切换和线程调度等操作，但是<code>volatile不能解决原子性问题</code>，因此当一个变量依赖旧值时就不能使用volatile变量。因此对于<code>同步最终还是要回到锁机制上来</code>。</p><h2 id="内存模型到底是怎么保证缓存一致性的呢？"><a href="#内存模型到底是怎么保证缓存一致性的呢？" class="headerlink" title="内存模型到底是怎么保证缓存一致性的呢？"></a>内存模型到底是怎么保证缓存一致性的呢？</h2><p>1、通过在总线加LOCK#锁的方式。</p><p>2、通过缓存一致性协议（Cache Coherence Protocol）。</p><p>缓存一致性（Cache Coherence），解决是多个缓存副本之间的数据的一致性问题。</p><p>内存一致性（Memory Consistency），保证的是多线程程序访问内存时可以读到什么值。</p><p>MESI的核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p><h2 id="JVM内存结构-VS-Java内存模型-VS-Java对象模型"><a href="#JVM内存结构-VS-Java内存模型-VS-Java对象模型" class="headerlink" title="JVM内存结构 VS Java内存模型 VS Java对象模型"></a>JVM内存结构 VS Java内存模型 VS Java对象模型</h2><p><strong>JVM内存结构：</strong><br>Java代码是要运行在虚拟机上的，而虚拟机在执行Java程序的过程中会把所管理的内存划分为若干个不同的数据区域，这些区域都有各自的用途。和Java虚拟机的运行时区域有关。</p><p><strong>Java内存模型</strong><br>他只是一个抽象的概念，描述了一组规则或规范，这个规范定义了一个线程对共享变量的写入是对另一个线程是可见的。</p><p>Java的多线程之间是通过共享内存进行通信的，而由于采用共享内存进行通信，在通信过程中会存在一系列如可见性、原子性、顺序性等问题，而JMM就是围绕着多线程通信以及与其相关的一系列特性而建立的模型。JMM定义了一些语法集，这些语法集映射到Java语言中就是volatile、synchronized等关键字。</p><p><strong>Java对象模型</strong><br>Java对象的OOP-Klass模型，即Java对象模型。和Java对象在虚拟机中的表现形式有关。</p><h2 id="线程状态图"><a href="#线程状态图" class="headerlink" title="线程状态图"></a>线程状态图</h2><img src="https://www.hollischuang.com/wp-content/uploads/2018/04/thread.png"><p>对于线程来说，一共有五种状态，分别为：初始状态(New) 、就绪状态(Runnable) 、运行状态(Running) 、阻塞状态(Blocked) 和死亡状态(Dead) 。</p><ul><li>我觉得图中锁池状态和等待队列与阻塞状态，都是OS的阻塞状态。</li><li>阻塞状态的线程是没有释放对象锁的。当I/O交互完成，或sleep()方法完成，或其它调用join()方法的线程执行完毕。阻塞状态的线程就会恢复到可运行状态，此时如果再次获得CPU时间片就会进入运行状态。</li></ul><h2 id="Java线程的实现"><a href="#Java线程的实现" class="headerlink" title="Java线程的实现"></a>Java线程的实现</h2><p>和具体的虚拟机相关。<br>HotSpot，它的每个Java线程都是直接映射到一个OS的原生线程来实现，中间没有额外的间接结构。<br>调度成本高，因为需要在内核态与核心态之间转换。开销来自于响应中断，保护和恢复执行现场的成本，涉及到一系列数据的拷贝。</p><h3 id="Java线程调度"><a href="#Java线程调度" class="headerlink" title="Java线程调度"></a>Java线程调度</h3><p>协同式调度和抢占式调度。</p><ul><li>非抢占式调度：实现简单，线程干完了会通知别的进行切换，线程执行时间不可控。</li><li>抢占式：线程切换不由自己控制，系统控制，java用的这个。Thread.yield()让出cpu权利。</li></ul><h3 id="阻塞和等待的区别"><a href="#阻塞和等待的区别" class="headerlink" title="阻塞和等待的区别"></a>阻塞和等待的区别</h3><ul><li>阻塞状态在等待着获取一个排它锁，这个时间在另外一个线程放弃这个锁的时候发生。</li><li>等待状态是在等待一段时间，或者唤醒动作的发生，在程序等待进入同步区域的时候，线程进入这种状态。</li></ul><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>协程属于线程，即一个线程下面可以开辟多个协程。<br>协同式调度：又叫做协程</p><h2 id="线程安全的实现方法"><a href="#线程安全的实现方法" class="headerlink" title="线程安全的实现方法"></a>线程安全的实现方法</h2><p>互斥同步，非阻塞同步，无同步方案。</p><h3 id="互斥同步"><a href="#互斥同步" class="headerlink" title="互斥同步"></a>互斥同步</h3><p>线程阻塞和唤醒会带来开销，悲观的并发策略：只要不做同步措施就会出问题的思想。<br>将会导致用户态到核心态转换、维持锁计数器等。</p><h4 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h4><ul><li>执行monitorenter时，如果已经获得了锁，就把锁的计数器值+1，执行monitorexit时减1。<code>可重入</code>。</li><li>被synchronized修饰的代码块在持有锁的贤臣执行完毕并释放锁之前，会无条件地阻塞后面的其它线程的进入。无法当前线程强制退出释放锁，或者等待的超时退出、中断等待。</li></ul><h4 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><p>可重入，实现了Lock接口。在类库层面实现。<br><strong>增加的功能：</strong></p><ul><li><p>等待可中断，可实现公平锁，可以绑定多个条件。</p></li><li><p>等待可中断：持有锁的线程长时间不释放，正在等待的可以选择放弃等待。</p></li><li><p>公平锁：按照申请锁的顺序执行，synchronized是非公平的，ReentrantLock默认也是非公平的。公平锁会使性能急剧下降，影响吞吐量。</p></li><li><p>锁绑定多个条件：一个ReentrantLock对象可以同时绑定几个Condition对象，绑定多个条件。</p><ul><li>synchronized锁对象的wait()跟它的notify或者notifyAll配合可以实现一个隐含条件。</li></ul></li></ul><h4 id="ReentrantLock和synchronized比较"><a href="#ReentrantLock和synchronized比较" class="headerlink" title="ReentrantLock和synchronized比较"></a>ReentrantLock和synchronized比较</h4><p>jdk6对关键字优化之后，它俩性能基本持平。<br>但是最好还是用synchronized。</p><ul><li>synchronized是在语法层面的同步，简单清晰，代码简洁。</li><li>Lock需要确保在finally块中释放锁，否则一旦出现异常可能永远不会释放锁。synchronized由虚拟机确保。</li><li>java虚拟机更容易针对synchronized进行优化，JVM可以在线程和对象的元数据中记录synchronized中锁的相关信息。使用Lock的话，JVM很难知道哪些锁对象由特定线程锁持有。</li></ul><h3 id="非阻塞同步"><a href="#非阻塞同步" class="headerlink" title="非阻塞同步"></a>非阻塞同步</h3><p>基于冲突检测的乐观并发策略。无同步操作。<br>需要基于硬件指令集，需要提供原子的操作。<br><code>目前java暴露了CAS（比较并交换）。例如cmpxchg指令。</code></p><h4 id="CAS指令"><a href="#CAS指令" class="headerlink" title="CAS指令"></a>CAS指令</h4><p>需要三个操作数，当且仅当V符合A时，才会用B更新V。返回旧的V值。</p><ul><li><p>体现在Unsafe类里边的compareAndSwapInt()和CompareAndSwapLong()等几个方法，使用了CAS。</p></li><li><p>Unsafe::getUnsafe()的代码中限制了只有启动类加载器加载的Class才可以访问。</p><ul><li>用户非要用，可以通过反射手段。jdk9类库在VarHandler类里开放了CAS。</li></ul></li><li><p>内存位置，就是变量的内存地址，V</p></li><li><p>旧的预期值，A，</p></li><li><p>准备的新值，B</p></li><li><p>CAS有ABA问题，并且一直循环耗费CPU资源。</p></li><li><p>JUC包提供了AtomicStampedReference，通过控制变量值的版本保证CAS的正确性。但是大部分ABA不会影响系统运作。</p></li></ul><h3 id="无同步方案"><a href="#无同步方案" class="headerlink" title="无同步方案"></a>无同步方案</h3><p>如果线程间的资源不发生冲突，也就没有必须要同步了。ThreadLocal类实现线程本地存储的功能。</p><h4 id="ThreadLocal分析"><a href="#ThreadLocal分析" class="headerlink" title="ThreadLocal分析"></a>ThreadLocal分析</h4><ul><li><p>ThreadLocal提供的只是一个浅拷贝，如果变量是一个引用类型，那么就要考虑它内部的状态是否会被改变，想要解决这个问题可以通过重写ThreadLocal的initialValue()函数来自己实现深拷贝</p></li><li><p>子类InheritableThreadLocal,自动为子类复制一份从父类线程那里继承来的本地变量,就是子类自己new了一个map，值就是父map的值。</p></li><li><p>ThreadLocal本质上是给每个线程绑定一个Map对象，该Map对象key是ThreadLocal本身，value是要设置的值；key就是ThreadLocal.threadLocalHashCode。</p></li><li><p><code>相对于HashMap采用链地址法处理冲突，ThreadLocalMap采用(具体是线性探测法)开放定址法</code>。若此位置Entry对象的key不符合条件，寻找哈希表此位置+1(若到达哈希表尾则从头开始)，一旦发生了冲突，就去寻找下一个空的散列地址，而HashMap采用链地址法解决冲突在原位置利用链表处理。</p></li><li><p>唯一的实例变量threadLocalHashCode是用来进行寻址的hashcode，它由函数nextHashCode()生成，该函数简单地通过一个增量HASH_INCREMENT来生成hashcode。至于为什么这个增量为0x61c88647，主要是因为ThreadLocalMap的初始大小为16，每次扩容都会为原来的2倍，这样它的容量永远为2的n次方，该增量选为0x61c88647也是为了尽可能均匀地分布，减少碰撞冲突。</p></li><li><p>如果没有设置initialValue并且没有put，调用get返回null。</p></li><li><p>当前很多技术都是使用的线程池技术，线程不会频繁的创建销毁，那么存在一种可能性，比如线程池中一个线程拿到全局ThreadLocal对象并设置了一个很大的字符串对象，使用过后没有remove操作，那么由于线程和ThreadLocal都是存活的，那么该字符串对象是不会被回收的，导致内存泄露，<strong>所以当使用完毕后线程最好调用ThreadLocal中的remove方法</strong>，及时移除该对象，防止不必要的内存损耗。</p></li></ul><p><code>ThreadLocal.ThreadLocalMap threadLocals = null;</code></p><ol><li><p>实际的通过ThreadLocal创建的副本是存储在每个线程自己的threadLocals中的；</p></li><li><p>为何threadLocals的类型ThreadLocalMap的键值为ThreadLocal对象，因为每个线程中可有多个threadLocal变量，就像上面代码中的longLocal和stringLocal；</p></li><li><p>在进行get之前，必须先set，否则会报空指针异常；如果想在get之前不需要调用set就能正常访问的话，必须重写initialValue()方法。</p></li></ol><p>用来解决 数据库连接、Session管理等。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>Connection<span class="token operator">></span> connectionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>Connection<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> Connection <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> connectionHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>set操作会将key为null的这些Entry都删除，防止内存泄露。 </p></li><li><p>将ThreadLocal变量定义成private static的，这样的话ThreadLocal的生命周期就更长，由于一直存在ThreadLocal的强引用，所以ThreadLocal也就不会被回收，也就能保证任何时候都能根据ThreadLocal的弱引用访问到Entry的value值，然后remove它，防止内存泄露。</p></li><li><p>每次使用完ThreadLocal，都调用它的remove()方法，清除数据。</p></li><li><p>ThreadLocal 不是用于解决共享变量的问题的，也不是为了协调线程同步而存在，而是为了方便每个线程处理自己的状态而引入的一个机制。这点至关重要。</p></li></ul><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><h3 id="自旋锁和适应性自旋"><a href="#自旋锁和适应性自旋" class="headerlink" title="自旋锁和适应性自旋"></a>自旋锁和适应性自旋</h3><p><strong>自旋锁</strong></p><ul><li><p>所谓自旋锁，就是让该线程等待一段时间（执行一段无意义的循环即可（自旋）），不会被立即挂起，看持有锁的线程是否会很快释放锁。如果持有锁的线程很快就释放了锁，那么自旋的效率就非常好。</p></li><li><p>自旋避免了线程切换的开销，但是占用了处理器时间，可以设置自旋次数。</p></li><li><p>自旋锁可以使线程在没有取得锁的时候，不被挂起，而转去执行一个空循环，（即所谓的自旋，就是自己执行空循环），若在若干个空循环后，线程如果可以获得锁，则继续执行。若线程依然不能获得锁，才会被挂起。</p></li><li><p>使用自旋锁后，线程被挂起的几率相对减少，线程执行的连贯性相对加强。因此，对于那些锁竞争不是很激烈，如果出现很多线程竞争，同时占用cpu资源，性能下降。锁占用时间很短的并发线程，具有一定的积极意义，但对于锁竞争激烈，单线程锁占用很长时间的并发程序，自旋锁在自旋等待后，往往毅然无法获得对应的锁，不仅仅白白浪费了CPU时间，最终还是免不了被挂起的操作 ，反而浪费了系统的资源。</p></li></ul><p><strong>自旋锁和阻塞锁最大的区别就是</strong>，到底要不要放弃处理器的执行时间。对于阻塞锁和自旋锁来说，都是要等待获得共享资源。但是阻塞锁是放弃了CPU时间，进入了等待区，等待被唤醒。而自旋锁是一直“自旋”在那里，时刻的检查共享资源是否可以被访问。</p><p><strong>适应性自旋</strong></p><ul><li>jdk6引入适应性自旋，自旋时间不固定，由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。<ul><li>如果在同一个锁对象上，线程如果自旋成功了，那么下次自旋的次数会更加多，因为虚拟机认为既然上次成功了，那么此次自旋也很有可能会再次成功，那么它就会允许自旋等待持续的次数更多。</li><li>如果一个锁很难拿到，很少有自旋能够成功的，自旋的次数会减少或者可能就不让自旋了，避免浪费时间。</li></ul></li><li>如果还不行只能变成重量级锁。</li></ul><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><ul><li>虚拟机即时编译器在运行时，对不可能存在竞争的锁进行消除，根据逃逸分析判定，若堆上所有对象不会逃逸出去被其它线程访问到，可以当做栈上数据对待，就不用加锁了。</li><li>String的相加操作，在jdk5以前用StringBuffer实现同步操作。</li></ul><h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p>把加锁的同步范围扩大。减少频繁的加锁，例如循环。</p><h2 id="偏向锁-轻量级锁-重量级锁的比较"><a href="#偏向锁-轻量级锁-重量级锁的比较" class="headerlink" title="偏向锁 轻量级锁 重量级锁的比较"></a>偏向锁 轻量级锁 重量级锁的比较</h2><ul><li>偏向锁：加锁和解锁不需要额外的消耗，和执行非同步方法相比存在时间上的差距特别小。 缺点：如果线程间存在锁竞争，会带来额外的锁撤销的消耗。适用于只有一个线程访问同步块的场景。</li><li>轻量级锁：竞争锁的线程不会阻塞，提高了程序的响应速度。缺点：如果始终得不到锁竞争得线程，使用自旋会消耗cpu。 适用于追求响应时间，同步块执行速度非常快。</li><li>重量级锁：线程竞争不使用自旋，不会消耗cpu。缺点：线程会阻塞，响应时间慢。适用于 追求吞吐量，同步代码块执行速度较长。</li></ul><p>轻量级锁是为了在线程交替执行同步块时提高性能，而偏向锁则是在只有一个线程执行同步块时进一步提高性能。<br>与偏向锁的区别是，引入偏向锁是假设同一个锁都是由同一线程多次获得，而轻量级锁是假设同一个锁是由n个线程交替获得；相同点是都是假设不存在多线程竞争。<br>引入轻量级锁的主要目的是，在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗(多指时间消耗)。</p><p><strong>重入:</strong> 对于不同级别的锁都有重入策略，偏向锁:单线程独占，重入只用检查threadId等于该线程；轻量级锁：重入将栈帧中lock record的header设置为null，重入退出，只用弹出栈帧，直到最后一个重入退出CAS写回数据释放锁；重量级锁：重入_recursions++，重入退出_recursions–，_recursions=0时释放锁。</p><p><strong>synchronized的执行过程：</strong></p><ol><li>检测Mark Word里面是不是当前线程的ID，如果是，表示当前线程处于偏向锁</li><li>如果不是，则使用CAS将当前线程的ID替换Mard Word，如果成功则表示当前线程获得偏向锁，置偏向标志位1</li><li>如果失败，则说明发生竞争，撤销偏向锁，进而升级为轻量级锁。</li><li>当前线程使用CAS将对象头的Mark Word替换为锁记录指针，如果成功，当前线程获得锁</li><li>如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。</li><li>如果自旋成功则依然处于轻量级状态。</li><li>如果自旋失败，则升级为重量级锁。</li></ol><h2 id="volatile分析"><a href="#volatile分析" class="headerlink" title="volatile分析"></a>volatile分析</h2><p>volatile通常被比喻成”轻量级的synchronized“，只能用来修饰变量。无法修饰方法及代码块等。</p><p>由于引入了多级缓存，就存在缓存数据不一致问题。但是，对于volatile变量，当对<strong>volatile变量进行写操作的时候，JVM会向处理器发送一条lock前缀的指令</strong>，将这个缓存中的变量回写到系统主存中。<br>但是就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题，所以在<code>多处理器</code>下，为了保证各个处理器的缓存是一致的，就会实现<code>缓存一致性协议</code></p><p><strong>缓存一致性协议</strong>：每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器要对这个数据进行修改操作的时候，会强制重新从系统内存里把数据读到处理器缓存里。</p><p>所以，如果一个变量被volatile所修饰的话，在每次数据变化之后，其值都会被强制刷入主存。而其他处理器的缓存由于遵守了缓存一致性协议，也会把这个变量的值从主存加载到自己的缓存中。这就保证了一个volatile在并发编程中，其值在多个缓存中是可见的。</p><p><strong>volatile与可见性</strong>：<br>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p><ul><li>被其修饰的变量在被修改后可以立即同步到主内存，被其修饰的变量在每次是用之前都从主内存刷新。因此，可以使用volatile来保证多线程操作时变量的可见性。</li></ul><p><strong>volatile对于可见性的实现，内存屏障也起着至关重要的作用</strong>。因为内存屏障相当于一个数据同步点，他要保证在这个同步点之后的读写操作必须在这个点之前的读写操作都执行完之后才可以执行。并且在遇到内存屏障的时候，缓存数据会和主存进行同步，或者把缓存数据写入主存、或者从主存把数据读取到缓存。</p><p><strong>已经有了缓存一致性协议，为什么还需要volatile？</strong><br>1、并不是所有的硬件架构都提供了相同的一致性保证，Java作为一门跨平台语言，JVM需要提供一个统一的语义。</p><p>2、操作系统中的缓存和JVM中线程的本地内存并不是一回事，通常我们可以认为：<strong>MESI可以解决缓存层面的可见性问题。使用volatile关键字，可以解决JVM层面的可见性问题</strong>。</p><p>3、缓存可见性问题的延伸：由于传统的MESI协议的执行成本比较大。所以CPU通过Store Buffer和Invalidate Queue组件来解决，但是由于这两个组件的引入，也<code>导致缓存和主存之间的通信并不是实时的</code>。<strong>也就是说，缓存一致性模型只能保证缓存变更可以保证其他缓存也跟着改变，但是不能保证立刻、马上执行</strong>。</p><p>内存屏障也是保证可见性的重要手段，操作系统通过内存屏障保证缓存间的可见性，JVM通过给volatile变量加入内存屏障保证线程之间的可见性。</p><p><strong>volatile与有序性：</strong><br>有序性即程序执行的顺序按照代码的先后顺序执行。</p><ul><li>volatile通过内存屏障来禁止指令重排的。这就保证了代码的程序会严格按照代码的先后顺序执行。这就保证了有序性。被volatile修饰的变量的操作，会严格按照代码顺序执行</li></ul><p>JMM除了引入了时间片以外，由于处理器优化和指令重排等，CPU还可能对输入代码进行乱序执行，比如load-&gt;add-&gt;save 有可能被优化成load-&gt;save-&gt;add 。这就是可能存在有序性问题。</p><ul><li>普通的变量仅仅会保证在该方法的执行过程中所依赖的赋值结果的地方都能获得正确的结果，而不能保证变量的赋值操作的顺序与程序代码中的执行顺序一致。</li></ul><p><strong>volatile的内存屏障语义：</strong></p><blockquote><p>当第二个操作是volatile写时，不管第一个操作是什么，都不能重排序。这个规则确保volatile写之前的操作不会被编译器重排序到volatile写之后。<br>当第一个操作是volatile读时，不管第二个操作是什么，都不能重排序。这个规则确保volatile读之后的操作不会被编译器重排序到volatile读之前。<br>当第一个操作是volatile写，第二个操作是volatile读时，不能重排序。</p></blockquote><ul><li>在每个volatile写操作的前面插入一个<code>StoreStore屏障</code>。<ul><li>对于这样的语句<code>Store1; StoreStore; Store2</code>，在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见。</li></ul></li><li>在每个volatile写操作的后面插入一个<code>StoreLoad屏障</code>。<ul><li>对于这样的语句<code>Store1; StoreLoad; Load2</code>，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。</li></ul></li><li>在每个volatile读操作的后面插入一个<code>LoadLoad屏障</code>。<ul><li>对于这样的语句<code>Load1; LoadLoad; Load2</code>，在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。</li></ul></li><li>在每个volatile读操作的后面插入一个<code>LoadStore屏障</code>。<ul><li>对于这样的语句<code>Load1; LoadStore; Store2</code>，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。</li></ul></li></ul><img src="https://www.hollischuang.com/wp-content/uploads/2018/08/fences-table.png"><p><strong>volatile与原子性</strong></p><ul><li>不能保证原子性</li></ul><p>由于CPU按照时间片来进行线程调度的，只要是包含多个步骤的操作的执行，天然就是无法保证原子性的。因为这种线程执行，又不像数据库一样可以回滚。如果一个线程要执行的步骤有5步，执行完3步就失去了CPU了，失去后就可能再也不会被调度，这怎么可能保证原子性呢。</p><p>原子性是指一个操作是不可中断的，要全部执行完成，要不就都不执行。<br>由于时间片在线程间轮换，就会发生原子性问题。</p><ul><li>synchronized为了保证原子性，需要通过字节码指令monitorenter和monitorexit，但是volatile和这两个指令之间是没有任何关系的。</li></ul><p><strong>原子性应该定义为：一段代码，或者一个变量的操作，在没有执行完之前，不能被其他线程执行。synchronized对原子性保证也不绝对，如果synchronized方法出现异常退出就完了，也没办法回滚。和数据库的原子性不一样，数据库可以回滚。</strong></p><p><strong>安全使用：</strong></p><ol><li>对变量的写入不依赖当前值，bool f可以，但是i++不行。</li><li>不能多个volatile变量一起组合来用比如 <code>low &lt; high</code>不行。</li></ol><h2 id="既生synchronized、何生volatile？"><a href="#既生synchronized、何生volatile？" class="headerlink" title="既生synchronized、何生volatile？"></a>既生synchronized、何生volatile？</h2><p><strong>synchronized的问题</strong><br>1、有性能损耗，在同步操作之前还是要进行加锁，同步操作之后需要进行解锁，这个加锁、解锁的过程是要有性能损耗的。volatile变量的读操作的性能消耗和普通变量几乎无差别，但是写操作由于需要插入内存屏障所以会慢一些，即便如此，volatile在大多数场景下也比锁的开销要低。</p><p>2、产生阻塞<br>无论是同步方法还是同步代码块，无论是ACC_SYNCHRONIZED还是monitorenter、monitorexit都是基于Monitor实现的。</p><p>基于Monitor对象，当多个线程同时访问一段同步代码时，首先会进入Entry Set，当有一个线程获取到对象的锁之后，才能进行The Owner区域，其他线程还会继续在Entry Set等待。并且当某个线程调用了wait方法后，会释放锁并进入Wait Set等待。</p><p><strong>synchronize实现的锁本质上是一种阻塞锁，也就是说多个线程要排队访问同一个共享对象。volatile不是锁，只用了内存屏障。不会有synchronized带来的阻塞和性能损耗的问题。</strong></p><p><strong>volatile的附加功能：禁止指令重排序</strong></p><h3 id="双重检验锁的实现分析"><a href="#双重检验锁的实现分析" class="headerlink" title="双重检验锁的实现分析"></a>双重检验锁的实现分析</h3><p>singleton = new Singleton();这行代码到底做了什么事情，大致过程如下：</p><p>1、虚拟机遇到new指令，到常量池定位到这个类的符号引用。 2、检查符号引用代表的类是否被加载、解析、初始化过。 3、虚拟机为对象分配内存。 4、虚拟机将分配到的内存空间都初始化为零值。 5、虚拟机对对象进行必要的设置。 6、执行方法，成员变量进行初始化。 7、将对象的引用指向这个内存区域。</p><p><strong>简化成3个步骤：</strong><br>a、JVM为对象分配一块内存M<br>b、在内存M上为对象进行初始化<br>c、将内存M的地址复制给singleton变量</p><p><strong>因为将内存的地址赋值给singleton变量是最后一步，所以Thread1在这一步骤执行之前，Thread2在对singleton==null进行判断一直都是true的，那么他会一直阻塞，直到Thread1将这一步骤执行完。</strong></p><p>但是，<strong>以上过程并不是一个原子操作</strong>，并且编译器可能会进行重排序，如果以上步骤被重排成：</p><p>a、JVM为对象分配一块内存M c、将内存的地址复制给singleton变量 b、在内存M上为对象进行初始化</p><p>在Thread1还没有为对象进行初始化的时候，Thread2进来判断singleton==null就可能提前得到一个false，则会返回一个不完整的sigleton对象，因为他还未完成初始化操作。</p><p>因为指令重排导致了这个问题，那就避免指令重排就行了。</p><p>所以，volatile就派上用场了，因为volatile可以避免指令重排。</p><p><strong>synchronized是无法禁止指令重排和处理器优化的。</strong></p><p>Java程序中天然的有序性可以总结为一句话：如果在本线程内观察，所有操作都是天然有序的。如果在一个线程中观察另一个线程，所有操作都是无序的。</p><p><strong>synchronized保证的有序性是多个线程之间的有序性，即被加锁的内容要按照顺序被多个线程执行。但是其内部的同步代码还是会发生重排序，只不过由于编译器和处理器都遵循as-if-serial语义，所以我们可以认为这些重排序在单线程内部可忽略。</strong></p><h2 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><ul><li>在绝对时间上，先对锁进行获取请求一定先被满足，那么这个锁就是公平的</li><li>反之就是非公平锁。</li><li>公平性锁保证了锁的获取按照FIFO原则，然后代价就是大量线程切换。非公平锁虽然可能造成了线程的饥饿，但是极少的线程切换保证了吞吐量。</li></ul><h2 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h2><ul><li><p>锁从宏观上分类，分为悲观锁与乐观锁。</p></li><li><p><strong>要想保证线程安全，就需要锁机制</strong>。锁机制包含两种：乐观锁与悲观锁。</p></li><li><p>悲观锁是独占锁，阻塞锁。乐观锁是非独占锁，非阻塞锁。</p></li><li><p>Java中synchronized和ReentrantLock等独占锁就是悲观锁思想的实现。</p></li><li><p>传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p></li><li><p>乐观锁是一种乐观思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取版本号和CAS，如果失败则要重复读-比较-写的操作。。乐观锁适用于多读的应用场景，可以提高吞吐量。java中的原子变量类就是使用的乐观锁，包括轻量级锁。volatile+循环CAS即可实现++i的原子操作。<br>java中的乐观锁基本都是通过CAS操作实现的，CAS是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败。</p></li><li><p>悲观锁是就是悲观思想，即认为写多，遇到并发写的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会上锁，这样别人想读写这个数据就会block直到拿到锁。java中的悲观锁就是Synchronized,AQS框架下的锁则是先尝试cas乐观锁去获取锁，获取不到，才会转换为悲观锁，如RetreenLock。</p><ul><li>如果出现大量的读取操作，每次读取都会进行加锁，这样会增加大量的锁的开销，降低系统的吞吐量。</li></ul></li><li><p>乐观锁：比较适合读取操作比较频繁的场景，如果出现大量的写入操作，数据发生冲突的可能性就会增加，为了保证数据的一致性，应用层需要不断地重新获取数据，这样会增加大量地查询操作，降低系统地吞吐量。</p></li></ul><h2 id="可重入锁和不可重入锁"><a href="#可重入锁和不可重入锁" class="headerlink" title="可重入锁和不可重入锁"></a>可重入锁和不可重入锁</h2><ul><li>重入锁ReentrantLock,就是支持重入的锁，表示该锁能够支持一个线程对资源的重复加锁。并且该锁能够支持一个线程对资源的重复加锁。</li></ul><h2 id="synchronized原理分析"><a href="#synchronized原理分析" class="headerlink" title="synchronized原理分析"></a>synchronized原理分析</h2><p>synchronzied实现同步用到了对象的内置锁(ObjectMonitor).</p><p>虚拟机给每个对象或类都分配了一个锁，<code>类锁其实通过对象锁实现的</code>。因为当虚拟机加载一个类的时候，会会为这个类实例化一个 <code>java.lang.Class 对象</code>，当你锁住一个类的时候，<code>其实锁住的是其对应的Class 对象</code>。</p><p>ACC_SYNCHRONIZED标志位是1，当线程执行方法的时候会检查该标志位，如果为1，就<code>自动的在该方法前后添加monitorenter和monitorexit指令</code>，可以称为monitor指令的隐式调用。</p><ul><li><p>对于同步方法，JVM采用ACC_SYNCHRONIZED标记符来实现同步。 对于同步代码块。JVM采用monitorenter、monitorexit两个指令来实现同步。</p></li><li><p>方法级的同步是隐式的。<code>同步方法</code>的常量池中会有一个<code>ACC_SYNCHRONIZED</code>标识，当某个线程访问方法时，会检查是否有<code>ACC_SYNCHRONIZED</code>，如果有设置，则<code>需要先获得监视器锁</code>，然后开始执行方法，方法<code>执行之后再释放监视器锁</code>。这时如果其他线程来请求执行方法，会因为无法获得监视器锁而被阻断住。值得注意的是，如果在方法执行过程中，发生了异常，并且方法内部并没有处理该异常，<code>抛异常之前先自动释放监视器锁</code>。</p></li><li><p>同步代码块使用monitorenter和monitorexit两个指令实现。</p></li><li><p>可以把执行monitorenter指令理解为加锁，执行monitorexit理解为释放锁。 <code>每个对象维护着一个记录着被锁次数的计数器</code>。未被锁定的对象的该计数器为0，当一个线程获得锁（执行monitorenter）后，该计数器自增变为 1 ，当同一个线程再次获得该对象的锁的时候，计数器再次自增。当同一个线程释放锁（执行monitorexit指令）的时候，计数器再自减。当计数器为0的时候。锁将被释放，其他线程便可以获得锁。</p></li></ul><p><strong>作用：</strong></p><ol><li>实现了原子性（同步）：任何时刻只有一个线程进入它修饰的代码执行。</li><li>可见性：JMM的语义，执行步骤：获得互斥锁，清空本地工作内存，从主内存拷贝变量的最新值，执行代码，将更改后的值刷新到主内存。</li><li>有序性：as-if-serial语义保证了单线程中，指令重排是有一定的限制的，而只要编译器和处理器都遵守了这个语义，那么就可以认为单线程程序是按照顺序执行的。synchronized又是保证同时只有一个线程访问。</li></ol><p><strong>Synchronized优化</strong></p><p>jdk5及以前，Synchronized属于重量级锁，效率低下，<code>因为监视器锁(monitor)是依赖于底层的操作系统的Mutex Lock来实现的</code>，而操作系统实现线程之间的切换时<code>需要从用户态转换到核心态</code>，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，这也是为什么早期的synchronized效率低的原因。</p><p>在<code>Java 6之后</code>Java官方对<code>从JVM层面对synchronized较大优化</code>，所以现在的synchronized锁效率也优化得很不错了，Java 6之后，为了减少获得锁和释放锁所带来的性能消耗，<code>引入了偏向锁、轻量级锁和自旋锁，适应性自旋等概念</code>.</p><h2 id="Monitor原理"><a href="#Monitor原理" class="headerlink" title="Monitor原理"></a>Monitor原理</h2><p>无论是ACC_SYNCHRONIZED还是monitorenter、monitorexit都是基于Monitor实现的。</p><p>内置锁(ObjectMonitor)<br>通常所说的对象的内置锁，是对象头Mark Word中的重量级锁指针指向的monitor对象。</p><p><strong>OS的管程</strong>：代表共享资源的数据结构和堆数据结构进行操作的一组过程构成的资源管理程序。</p><p>Java提供了同步机制、互斥锁机制，这个机制保证了在同一时刻只有一个线程能访问共享资源。这个机制的保障来源于监视锁Monitor，每个对象都拥有自己的监视锁Monitor。</p><p>在Java虚拟机(HotSpot)中，Monitor是基于C++实现的，由ObjectMonitor实现的，其主要数据结构如下：<br>几个关键属性：</p><pre><code>_owner：指向持有ObjectMonitor对象的线程_WaitSet：存放处于wait状态的线程队列，双向循环链表，但它可以是优先级队列或任何数据结构；插入插到最后，取出取第一个。     在AddWaiter方法中有这两个。     ObjectWaiter* head = _WaitSet;     ObjectWaiter* tail = head-&gt;_prev;_EntryList：存放处于等待锁block状态的线程队列，_owner从该双向循环链表中唤醒线程结点，_EntryList是第一个节点_cxq          = NULL ;    多线程竞争锁进入时的单向链表_recursions：锁的重入次数_count：用来记录该线程获取锁的次数</code></pre><img src="https://www.hollischuang.com/wp-content/uploads/2017/12/monitor.png"><p>当多个线程访问一段同步代码时，首先进入<code>EntryList</code>队列中等待，调度器通过调度算法选择一个进入<code>Owener</code>区域，并把monitor中的_owner变量设置为当前线程，同时monitor中的计数器_count加1。即获得对象锁。</p><p>若持有monitor的线程调用<code>wait()</code>方法，将释放当前持有的monitor，_owner变量恢复为null，_count自减1，同时该线程进入<code>_WaitSet</code>集合中等待被唤醒。若当前线程执行完毕也将释放monitor(锁)并复位变量的值，以便其他线程进入获取monitor(锁)。</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><ul><li>主线程退出后，守护线程依然在运行！由此得到只要任何非守护线程还在运行，守护线程就不会终止。</li><li>jvm垃圾收集线程就是守护线程，只要还有用户线程在运行，他就不会停止。</li><li>数据库连接池中的监测线程也是守护线程，监听连接个数、超时时间、状态等。</li><li>守护线程应该永远不去访问固有资源，如文件，数据库，因为它会在任何时候甚至在一个操作的中间发生中断，我们无法预期的。</li></ul><h2 id="Object-wait-notify实现"><a href="#Object-wait-notify实现" class="headerlink" title="Object.wait/notify实现"></a>Object.wait/notify实现</h2><p><strong>wait方法实现：</strong></p><ul><li>通过object获得内置锁(objectMonitor)，通过内置锁将Thread封装成OjectWaiter对象，然后addWaiter将它插入以_waitSet为首结点的等待线程链表中去（为空初始化，不空插到尾部），最后释放锁（ObjectMonitor::exit方法释放当前的ObjectMonitor对象），最终底层的park方法会挂起线程。</li></ul><p><strong>notify方法实现：</strong><br>1、通过object获得内置锁(objectMonitor)，调用内置锁的notify方法.<br>2、如果当前_WaitSet为空，即没有正在等待的线程，则直接返回；<br>3、通过_waitset结点移出等待链表中的<code>首结点</code>（ObjectMonitor::DequeueWaiter方法），<code>将它置于_EntrySet中去</code>，<code>等待获取锁</code>。注意：根据policy不同可能移入_EntryList或者_cxq队列中。</p><ul><li>进入wait/notify方法之前，为什么要获取synchronized锁？答：因为wait需要获取到对象锁，而synchronized刚好生成的字节码指令获取到了对象锁。</li></ul><p>wait方法会将当前线程放入wait set，等待被唤醒，并放弃lock对象上的所有同步声明，所以线程A释放了锁。</p><p>notify方法会选择wait set中任意一个线程进行唤醒；notifyAll方法会唤醒monitor的wait set中所有线程。<br>由于notify()在默认策略下只是将代表线程的节点由WaitSet转移到其它队列，并没有唤醒线程。</p><ul><li><p>尽量使用notifyAll()的原因就是，notify()非常容易导致死锁。当然notifyAll并不一定都是优点，毕竟一次性将Wait Set中的线程都唤醒是一笔不菲的开销，如果你能handle你的线程调度，那么使用notify()也是有好处的。</p></li><li><p>notify和notifyAll并不会释放所占有的ObjectMonitor对象，其实真正释放ObjectMonitor对象的时间点是在执行monitorexit指令，一旦释放ObjectMonitor对象了，entry set中ObjectWaiter节点所保存的线程就可以开始竞争ObjectMonitor对象进行加锁操作了。</p></li></ul><p><a href="https://www.hollischuang.com/archives/2030">https://www.hollischuang.com/archives/2030</a></p><h2 id="synchronized的代码块和方法"><a href="#synchronized的代码块和方法" class="headerlink" title="synchronized的代码块和方法"></a>synchronized的代码块和方法</h2><p><a href="https://www.cnblogs.com/kundeg/p/8422557.html">https://www.cnblogs.com/kundeg/p/8422557.html</a></p><ul><li>修饰代码块，synchronized (TestSynchro.class)，或者锁定一个实例，使用监视器锁。</li><li>修饰实例方法相当于synchronized (this), 当前对象的所有访问时同步的。</li><li>修饰静态方法，所有实例都是同步的。</li></ul><p><strong>synchronized(this)、synchronized(object)、synchronized(*.class)区别</strong><br>下面单独对<code>同步代码块的三种同步写法</code>做一下区别：</p><ul><li><p>synchronized(this)同步代码块：</p><ul><li>对其它的synchronized同步方法或synchronized(this)同步代码块调用是堵塞状态；</li><li>同一时间只有一个线程执行<code>同一对象</code>的synchronized同步方法中的代码；</li></ul></li><li><p>synchronized(object)进行同步操作时，对象监视器必须是同一个对象。不是同一个，运行就是异步执行了；</p></li><li><p>synchronized(*.class)代码块的作用其实和synchronized static方法作用一样。Class锁对类其作用，也就是对类所有对象实例起作用。</p></li></ul><h2 id="原子操作的实现原理"><a href="#原子操作的实现原理" class="headerlink" title="原子操作的实现原理"></a>原子操作的实现原理</h2><ul><li><code>原子操作</code>：不可被中断的一个或一系列操作。</li><li><code>处理器实现原子操作</code>：<ul><li>1.使用总线锁保证原子性。就是使用处理器提供的一个lock信号，当一个处理器在总线输出此信号时，其他处理器得请求会被阻塞。</li><li>2.使用缓存机制保证原子性。通过缓存锁，就是缓存的一致性来保证操作得原子性。因为缓存的一致性会阻止同时修改两个以上的处理器缓存的内存区域数据，当其他处理器回写已经被锁定得缓存行得数据时，会使缓存行无效。基于频繁使用的内存会缓存在处理器的L1，L2，L3高速缓存里。缓存锁定指的是如果内存区域被缓存在缓存行中。</li><li>不能使用的情况：操作的数据跨越多个缓存行，需要总线锁定。处理器可能不支持。</li></ul></li><li>Java实现原子操作：循环+CAS实现。jvm里面的， CAS是利用处理器提供的cmpxchg指令实现的。使用锁+循环CAS实现，获取和释放锁通过循环CAS实现。</li><li>CAS得一些问题：<ul><li>1 ABA问题，解决方法：版本号。或者检查引用是否相等，再检查标志值。</li><li>2 循环时间长开销大。自旋的CAS如果长时间不成功，会给cpu带来非常大得执行开销，适应性自旋。</li><li>3 只能保证一个共享变量的原子操作。可以把多个共享变量合成一个共享变量。</li></ul></li></ul><h2 id="Thread-start和run的区别"><a href="#Thread-start和run的区别" class="headerlink" title="Thread start和run的区别"></a>Thread start和run的区别</h2><ul><li>start：<ul><li>用start方法来启动线程，真正实现了多线程运行，这时无需等待run方法体代码执行完毕而直接继续执行下面的代码。通过调用Thread 类的start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到了cpu的时间片，就开始执行run()方法，这里的run（）方法称为线程体，它包含了要执行的这个线程的内容，run方法运行结束，此线程终止。</li></ul></li><li>run：<ul><li>run()只是一个普通的方法，如果直接调用run方法，程序中<code>依然只有主线程这一个线程</code>，其程序<code>执行路径还是只有一条</code>，还是要顺序执行，还是要等待run()方法体，执行完毕后才可以继续执行下面的代码，这样就没有达到多线程的目的。</li></ul></li><li>总结：调用<code>start方法可以启动线程</code>，而<code>run方法只是thread的一个普通方法的调用，还是在主线程里执行</code>。所以在多线程使用时，把需要并行处理的代码放在run方法中，start方法启动线程将自动调用run()方法，这时jvm的内存机制规定的。并且run()方法必须是public权限，返回值类型为void。</li></ul><h2 id="java实现线程同步的方法"><a href="#java实现线程同步的方法" class="headerlink" title="java实现线程同步的方法"></a>java实现线程同步的方法</h2><p>同步是指程序中用于控制<code>不同线程间</code>操作发生相对顺序的机制。</p><ol><li>显示同步：共享内存：程序明确指定某段代码或方法需要互斥执行。java采用的。</li><li>隐式同步：消息传递：由于消息发送必须在接收之前。</li></ol><ul><li>使用synchronized关键字实现线程同步</li><li>等待通知机制 wait/notify</li><li>使用volatile实现线程同步</li><li>使用reentrantlock（重入锁）实现线程同步</li><li>使用线程变量ThreadLocal实现线程同步</li><li>使用阻塞队列实现线程同步</li><li>使用原子变量实现线程同步</li></ul><h2 id="java线程间通信的方法"><a href="#java线程间通信的方法" class="headerlink" title="java线程间通信的方法"></a>java线程间通信的方法</h2><ul><li><p>线程通信就是线程之间用何种机制来交换信息。</p></li><li><p>两种通信机制</p><ul><li>共享内存：隐式通信，<code>java采用的这个</code>。线程之间共享内存的公共状态，通过写读内存中的公共状态进行隐式通信。jdk5开始，volatile读/写可以实现通信。</li><li>消息传递：显示通信，例如wait/notify方式。</li></ul></li></ul><ol><li>volatile和synchronized关键字</li><li>等待通知机制，synchronized的wait和notify组合。ReentrantLock和Condition的组合。</li><li>管道输入/输出流<ul><li>主要用于线程之间的数据传输，传输媒介是：内存</li><li>PipedOutputStream,PipedInputStream,PipedReader,PipedWriter</li><li>文件输入/输出流</li><li>网络输入/输出流</li></ul></li><li>Thread.join()</li><li>ThreadLocal的使用</li></ol><h2 id="Java的序列化与反序列化"><a href="#Java的序列化与反序列化" class="headerlink" title="Java的序列化与反序列化"></a>Java的序列化与反序列化</h2><ul><li>就是可以把对象信息保存到文件里，即使JVM不在运行，也可以读取保存的对象数据。</li></ul><p>使用Java对象序列化，在保存对象时，会把其状态保存为一组字节，在未来，再将这些字节组装成对象。必须注意地是，<strong>对象序列化保存的是对象的”状态”，即它的成员变量。由此可知，<code>对象序列化不会关注类中的静态变量</code>。</strong></p><p>1、在Java中，只要一个类实现了java.io.Serializable接口，那么它就可以被序列化。</p><p>2、通过ObjectOutputStream(写文件)和ObjectInputStream（读文件）对对象进行序列化及反序列化</p><p>3、虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化 ID 是否一致（就是 private static final long serialVersionUID）</p><p>4、序列化并不保存静态变量。</p><p>5、要想将父类对象也序列化，就需要让父类也实现Serializable 接口。</p><p>6、Transient 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient 变量的值被设为初始值，如 int 型的是 0，对象型的是 null。</p><p>7、服务器端给客户端发送序列化对象数据，对象中有一些数据是敏感的，比如密码字符串等，希望对该密码字段在序列化时，进行加密，而客户端如果拥有解密的密钥，只有在客户端进行反序列化时，才可以对密码进行读取，这样可以一定程度保证序列化对象的数据安全。</p><p>8、在序列化对象时，不仅会序列化当前对象本身，还会对该对象引用的其它对象也进行序列化。</p><p><strong>当写入文件的为同一对象时的处理</strong></p><ul><li><code>当写入文件的为同一对象时</code>，并<code>不会再将对象的内容进行存储</code>，而只是<code>再次存储一份引用</code>。反序列化时，恢复引用关系，使代码中的 t1 和 t2 指向唯一的对象，二者相等，输出 true。该存储规则极大的节省了存储空间。</li></ul><p><strong>如何自定义的序列化和反序列化策略：</strong></p><p>实现序列化接口，类中增加readObject和writeObject方法。</p><ul><li><p>ArrayList的源码中增加了writeObject和readObject。ArrayList实现了java.io.Serializable接口，那么我们就可以对它进行序列化及反序列化。因为elementData（存储数据的）是transient的，所以我们认为这个成员变量不会被序列化而保留下来。</p></li><li><p>在序列化过程中，如果被序列化的类中定义了writeObject 和 readObject 方法，虚拟机会试图调用对象类里的 writeObject 和 readObject 方法，进行用户自定义的序列化和反序列化。用户可以在序列化的过程中动态改变序列化的数值。</p></li><li><p>如果没有这样的方法，则默认调用是 ObjectOutputStream 的 defaultWriteObject 方法以及 ObjectInputStream 的 defaultReadObject 方法。</p></li></ul><p><strong>elementdata声明为transient因为：</strong><br>因为list是动态扩容的，如果此时空间很大，但是就存储了一个元素，就会序列化很多null数据占用空间，所以采用实现自己的序列化，其中会遍历数组，存储不为空的数据。</p><ul><li><p><code>writeObject方法</code>把elementData数组中的元素遍历的保存到输出流（<code>ObjectOutputStream</code>）中。</p></li><li><p><code>readObject方法</code>从输入流（<code>ObjectInputStream</code>）中读出对象并保存赋值到<code>elementData数组</code>中。</p></li></ul><p><strong>这两个方法是怎么被调用的呢?</strong></p><p>在使用ObjectOutputStream的writeObject方法和ObjectInputStream的readObject方法时，<code>会通过反射的方式调用</code>。</p><p>ObjectOutputStream的writeObject的调用栈：</p><p><code>writeObject ---&gt; writeObject0 ---&gt;writeOrdinaryObject---&gt;writeSerialData---&gt;invokeWriteObject</code></p><p><code>invokeWriteObject方法</code>中的<code>writeObjectMethod.invoke(obj, new Object[]&#123; out &#125;)</code>;是关键，<code>通过反射的方式调用writeObjectMethod方法</code>。</p><p><strong>Serializable明明就是一个空的接口，它是怎么保证只有实现了该接口的方法才能进行序列化与反序列化的呢？</strong></p><p><code>writeObject0</code>方法中，在进行序列化操作时，会判断要被序列化的类是否是<code>String, Enum、Array</code>和<code>Serializable</code>类型，如果不是则直接抛出<code>NotSerializableException</code>。</p><h2 id="Serializable-和-Externalizable"><a href="#Serializable-和-Externalizable" class="headerlink" title="Serializable 和 Externalizable"></a>Serializable 和 Externalizable</h2><p>无论是使用transient关键字，还是使用writeObject()和readObject()方法，其实都是基于Serializable接口的序列化。<code>序列化和反序列化时不会调用空参构造方法</code>。</p><p>JDK中提供了另一个序列化接口–Externalizable，使用该接口之后，之前基于Serializable接口的序列化机制就将失效。<code>反序列化会调用空参构造方法，序列化不会调用</code>。</p><p>Externalizable继承于Serializable，当使用该接口时，序列化的细节需要由程序员去完成。<br>使用Externalizable进行序列化，当读取对象时，会调用被序列化类的无参构造器去创建一个新的对象，通过反射创建对象！然后再将被保存对象的字段的值分别填充到新对象中。需要有无参的public构造方法。</p><p>如果是Serializable类，只要该类的第一个不可序列化的父类定义了一个可访问的无参数构造方法，那么就能创建对象，即此时反序列化用的是该父类的无参构造函数来创建对象的，跟当前目标对象有木有无参构造方法没关系。</p><p>readResolve()可以返回单例。<br><strong>无论是实现Serializable接口，或是Externalizable接口，当从I/O流中读取对象时，readResolve()方法都会被调用到。实际上就是用readResolve()中返回的对象直接替换在反序列化过程中创建的对象，而被创建的对象则会被垃圾回收掉。</strong></p><h2 id="单例和序列化"><a href="#单例和序列化" class="headerlink" title="单例和序列化"></a>单例和序列化</h2><p><strong>在类中加入这个readResolve()方法，并在该方法中指定要返回的对象的生成策略，就可以防止单例被破坏</strong>。</p><p>对象的序列化过程通过ObjectOutputStream和ObjectInputputStream来实现的。</p><ul><li><p>分析：主要是ObjectInputStream的writeObject和readObject。readObject方法历程：会有一个<code>readOrdinaryObject</code>方法，</p><ul><li><p>isInstantiable：如果一个serializable/Externalizable的类可以在运行时被实例化，那么该方法就返回true。</p></li><li><p>desc.newInstance：该方法通过反射的方式调用无参构造方法新建一个对象。</p></li><li><p>所以<code>反序列化会通过反射调用无参数的构造方法创建一个新的对象,如果是serial就是第一个不可序列化的父类，Extern的就是反射调用该类的构造方法</code>。</p></li><li><p>hasReadResolveMethod:如果实现了serializable 或者 externalizable接口的类中包含readResolve则返回true</p></li><li><p>invokeReadResolve:通过反射的方式调用要被反序列化的类的readResolve方法。</p></li></ul></li></ul><h2 id="Java的ClassLoader机制（源码级别）"><a href="#Java的ClassLoader机制（源码级别）" class="headerlink" title="Java的ClassLoader机制（源码级别）"></a>Java的ClassLoader机制（源码级别）</h2><ul><li><p>Java中的所有类，必须被装载到jvm中才能运行，这个装载工作是由jvm中的类装载器完成的，类装载器所做的工作实质是把类文件从硬盘读取到内存中，JVM在加载类的时候，都是通过ClassLoader的loadClass（）方法来加载class的，loadClass使用双亲委派模式。</p></li><li><p>ClassLoader类是一个抽象类，需要给出类的二进制名称，class loader尝试定位或者产生一个class的数据，一个典型的策略是把二进制名字转换成文件名然后到文件系统中找到该文件。</p></li></ul><p><strong>几个重要的方法：getClassLoadingLock(name)，findClass(name)，defineClass()方法方法来加载类。resolveClass方法。</strong></p><p>synchronized用在代码块上。锁对象通过<strong>getClassLoadingLock(name)</strong>。来获取, 方法作用：为类的加载操作返回一个锁对象。<code>为了向后兼容</code>，这个方法这样实现 : 如果当前的<code>classloader</code>对象注册了并行能力，方法返回一个与指定的名字className相关联的特定对象，否则，直接返回当前的ClassLoader对象。</p><p><code>protected Class&lt;?&gt; loadClass(String name, boolean resolve)</code> 该方法的访问控制符是<code>protected</code>，也就是说该方法<strong>同包内和派生类中可用</strong><code>返回值类型Class</code></p><ul><li>因为不知道加载什么类，所以用了问号。代表啥都可以。</li><li>throws ClassNotFoundException 该方法会抛出找不到该类的异常，这是一个<code>非运行时异常</code>, 不会终止程序，需要用户手动捕获。</li></ul><ul><li><code>private final ConcurrentHashMap&lt;String, Object&gt; parallelLockMap;</code>, ClassLoader的变量，用于获取锁对象的方法上。在ClassLoader类中包含一个静态内部类<code>private static class ParallelLoaders</code>，在ClassLoader被加载的时候这个静态内部类就被初始化。</li></ul><p><strong>分析：</strong></p><ul><li>key=className，value=new Object();</li><li>首先在ClassLoder类中有一个<code>静态内部类ParallelLoaders</code>，他会<code>指定的类的并行能力</code>，如果当前的加载器被定位为具有并行能力，那么他就给<code>parallelLockMap</code>定义，就是<code>new</code>一个 <code>ConcurrentHashMap&lt;&gt;()</code>，这时如果当前的加载器是具有并行能力的，那么parallelLockMap就不是Null，这个时候，我们判断parallelLockMap是不是Null，如果他是null，指明该加载器<code>没有注册并行能力</code>，那么我们没有必要给他一个加锁的对象，getClassLoadingLock方法<code>直接返回this</code>,就是<code>当前的加载器的一个实例</code>。如果不是null，那就说明该加载器是有并行能力的，那么就可能有并行情况，那就需要返回一个锁对象。然后就是创建一个新的Object对象，调用<code>parallelLockMap</code>的<code>putIfAbsent(className, newLock)</code>方法, 这个方法的作用是：首先根据传进来的<code>className</code>,检查该名字是否已经<code>关联了一个value值</code>，如果已经关联过value值，那么<code>直接把他关联的值返回</code>，如果没有关联过值的话，那就把我们传进来的Object对象作为value值，className作为Key值组成一个map返回。然后无论putIfAbsent方法的返回值是什么，都把它赋值给我们刚刚生成的那个Object对象。</li></ul><p><strong>resolveClass方法的作用是：</strong></p><p>链接指定的类。这个方法给Classloader用来链接一个类，如果这个类已经被链接过了，那么这个方法只做一个简单的返回。否则，这个类将被按照 Java™规范中的Execution描述进行链接。。。</p><p><strong>java中的类大致分为三种：</strong></p><p>1.系统类 2.扩展类 3.由程序员自定义的类</p><p><strong>类装载方式，有两种:</strong></p><p>1.隐式装载， 程序在运行过程中当碰到通过new 等方式生成对象时，隐式调用类装载器加载对应的类到jvm中。<br>2.显式装载， 通过class.forname()等方法，显式加载需要的类</p><p><strong>类加载的动态性体现:</strong></p><p>一个应用程序总是由n多个类组成，Java程序启动时，<strong>并不是一次把所有的类全部加载后再运行</strong>，<strong>它总是先把保证程序运行的基础类一次性加载到jvm中</strong>，其它类等到jvm用到的时候再加载，这样的好处是节省了内存的开销，因为java最早就是为嵌入式系统而设计的，内存宝贵，这是一种可以理解的机制，而用到时再加载这也是java动态性的一种体现。</p><p><strong>各种类加载器：</strong></p><ul><li>BootStrap：<code>加载java.*, javax.*;</code></li><li>entension : <code>java.ext.dirs</code></li><li>system: <code>java.class.Path, 用户类路径下</code></li></ul><p>Class对象是在装载类时由JVM通过调用类装载器中的defineClass()方法自动构造的。</p><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><ul><li><p>enum就和class一样，是个关键字。</p></li><li><p>public final class T extends Enum，所以这个类继承Enum。</p></li><li><p>当我们使用enmu来定义一个枚举类型的时候，编译器会自动帮我们创建一个final类型的类继承Enum类,所以枚举类型不能被继承，</p></li><li><p>类中的属性和方法都是static的。因为static类型的属性会在类被加载之后被初始化，类加载和初始化又是线程安全的，所以枚举类的创建也是线程安全的。</p></li></ul><p><strong>创建单例模式好处：</strong></p><ol><li>枚举写法简单</li><li>枚举自己处理序列化，编译器不允许任何对它的序列化机制的定制，因此禁用了writeObject、readObject、readObjectNoData、writeReplace和readResolve等方法。 </li><li>枚举实例创建是thread-safe(线程安全的)</li></ol><h2 id="单例的写法"><a href="#单例的写法" class="headerlink" title="单例的写法"></a>单例的写法</h2><p>懒汉，恶汉，双重校验锁，枚举和静态内部类。</p><ol><li><code>懒汉</code>：线程安全和不安全版本。就是用到了采取加载，安全的通过synchronized修饰。效率会很低，基本不用。</li><li><code>恶汉</code>：提前加载，都是静态变量和方法，使用了类加载机制，因为类加载和初始化时安全的，加锁了，加载类的loadClass使用了synchronized，初始化加了锁。避免了多线程的同步问题。<code>缺点：不能确定有其他的方式（或者其他的静态方法）导致类装载初始化，因为只要有别的人访问任何类的静态域都会初始化类。这时候初始化instance显然没有达到lazy loading的效果。</code><strong>饿汉式单例，在类被加载的时候对象就会实例化。这也许会造成不必要的消耗，因为有可能这个实例根本就不会被用到。而且，如果这个类被多次加载的话也会造成多次实例化。</strong></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> instance<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>变种方式：使用<span class="token keyword">static</span>代码块，其实也是基于类加载，在类初始化时完成。<span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><code>静态内部类</code></li></ol><ul><li><p>静态内部类只有使用了才会加载初始化。</p></li><li><p>利用了classloder的机制来保证初始化instance时只有一个线程, 和恶汉的不同是：<br>恶汉只要Singleton类被装载初始化了，那么instance就会被实例化（没有达到lazy loading效果），而这种方式是Singleton类被装载了，只有显示通过调用getInstance方法时，才会显示装载SingletonHolder类，从而实例化instance。</p></li><li><p>一个类初始化的时候，其内部所有final变量必然会初始化完成，然后才返回实例。</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>枚举类</li></ol><ul><li>它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MySingleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> MySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> MyEnum<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span>singleton<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> MyEnum <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        INSTANCE<span class="token punctuation">;</span>        <span class="token keyword">private</span> MySingleton singleton<span class="token punctuation">;</span>        <span class="token function">MyEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> MySingleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>双重检验锁</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">synchronized</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> Object <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>上面各种写法的问题：</strong></p><ol><li>如果单例由不同的类装载器装入，那便有可能存在多个单例类的实例。假定不是远端存取，例如一些servlet容器对每个servlet使用完全不同的类装载器，这样的话如果有两个servlet访问一个单例类，它们就都会有各自的实例。</li></ol><p>可以使用线程上下文类加载器, 它使用了<code>Thread.currentThread().getContextClassLoader()</code>获得线程上下文加载器（一般是业务加载器）。有了这个唯一的类加载器就可以获得唯一的单例了。代码放在单例类里面 。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> Class <span class="token class-name">getClass</span><span class="token punctuation">(</span>String classname<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       ClassLoader classLoader <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>classLoader <span class="token operator">==</span> null<span class="token punctuation">)</span>           classLoader <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>如果Singleton实现了java.io.Serializable接口，那么这个类的实例就可能被序列化和复原。不管怎样，如果你序列化一个单例类的对象，接下来复原多个那个对象，那你就会有多个单例类的实例。<code>通过对Singleton的序列化与反序列化得到的对象是一个新的对象，这就破坏了Singleton的单例性。</code></li></ol><p><strong>实现序列化接口的类中加入readResolve方法就行了。</strong></p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">private</span> Object <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="不使用synchronized和lock，如何实现一个线程安全的单例？"><a href="#不使用synchronized和lock，如何实现一个线程安全的单例？" class="headerlink" title="不使用synchronized和lock，如何实现一个线程安全的单例？"></a>不使用synchronized和lock，如何实现一个线程安全的单例？</h2><ul><li>枚举 : 反编译之后方法和变量都是static final的，类也是final的，使用了static final来修饰每一个枚举项。</li><li>静态内部类：延迟初始化了内部类，但还是基于类初始化啊。</li><li>饿汉：通过定义静态的成员变量，以保证instance可以在类初始化的时候被实例化。</li></ul><p><strong>以上都是借助于ClassLOader的线程安全性，而它的类加载的loadClass是用了synchronized修饰代码块保证线程安全，还是用到锁了。</strong></p><p><strong>基于无限循环CAS乐观锁实现</strong></p><p>CAS是一种基于忙等待的算法,依赖底层硬件的实现,相对于锁它没有线程切换和阻塞的额外消耗,可以支持较大的并行度。<br>CAS的一个重要缺点在于如果忙等待一直执行不成功(一直在死循环中),会对CPU造成较大的执行开销。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonCAS</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicReference<span class="token operator">&lt;</span>SingletonCAS<span class="token operator">></span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SingletonCAS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonCAS <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            SingletonCAS singletonCAS <span class="token operator">=</span> INSTANCE<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> singletonCAS<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> singletonCAS<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            singletonCAS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonCAS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>INSTANCE<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> singletonCAS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> singletonCAS<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="守护线程-1"><a href="#守护线程-1" class="headerlink" title="守护线程"></a>守护线程</h2><p>用户线程：我们平常创建的普通线程。<br>守护线程：用来服务于用户线程；不需要上层逻辑介入。</p><p>当线程只剩下守护线程的时候,JVM才会退出；</p><ul><li>必须在start之前设置。</li><li>在Daemon线程中产生的新线程也是Daemon的。</li><li>守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。</li><li>Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。</li></ul><p><strong>意义</strong><br>当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；</p><h2 id="线程的创建，分为以下三种方式："><a href="#线程的创建，分为以下三种方式：" class="headerlink" title="线程的创建，分为以下三种方式："></a>线程的创建，分为以下三种方式：</h2><p>• 继承 Thread 类，重写 run 方法<br>• 实现 Runnable 接口，实现 run 方法<br>• 通过Callable和FutureTask创建线程<br>• 线程池方式</p><h2 id="同步器AbstractQueuedSynchronizer（AQS）"><a href="#同步器AbstractQueuedSynchronizer（AQS）" class="headerlink" title="同步器AbstractQueuedSynchronizer（AQS）"></a>同步器AbstractQueuedSynchronizer（AQS）</h2><ul><li>是一个同步的框架，提供了通用的机制来原子性管理同步状态，阻塞和唤醒线程，以及维护被阻塞的队列。基于模板方法模式构造的。</li><li>juc下面很多包都是基于AQS实现的。</li><li><strong>AQS和锁的关系</strong><ul><li>锁是面向使用者的，定义了使用者与锁交互的接口，隐藏了实现的细节；同步器面向的是锁的实现者，简化了锁的实现方式，屏蔽了同步状态的管理，线程的排队，等待与唤醒等底层操作。锁和同步器很好地隔离了使用者和实现者所关注的领域。</li><li>同步器是实现锁的关键，利用同步器实现锁的语义。</li></ul></li></ul><blockquote><p>AQS其实就是一个可以给我们实现锁的框架<br>  内部实现的关键是：先进先出的队列、state状态<br>  定义了内部类ConditionObject<br>  拥有两种线程模式<br>  独占模式<br>  共享模式</p></blockquote><p>在LOCK包中的相关锁(常用的有ReentrantLock、 ReadWriteLock)都是基于AQS来构建<br>一般我们叫AQS为同步器</p><p><strong>AQS核心思想是</strong>，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是用CLH队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</p><p><strong>等待状态（waitStatus）做一个解释。</strong></p><pre><code>CANCELLED = 1           线程被取消了SIGNAL = -1                释放资源后需唤醒后继节点CONDITION = -2        等待condition唤醒PROPAGATE = -3     （共享锁）状态需要向后传播0                    初始状态，正常状态</code></pre><p><strong>三类模板方法：</strong></p><ul><li>独占式的获取与释放同步状态。</li><li>共享式获取与释放状态。</li><li>查询同步队列中的等待线程情况。</li></ul><p><strong>Node节点数据结构设计</strong>，队列中的元素，肯定是为了保存由于某种原因导致无法获取共享资源state而被入队的线程，<strong>因此Node中使用了waitStatus表示节点入队的原因，使用Thread对象来表示节点所关联的线程</strong>。至于prev,next，则是一般双向队列数据结构必须提供的指针，用于对队列进行相关操作.并没有创建队列对象，而是通过头尾节点形成的。</p><p><strong>需要重写state（volatile修饰）的获取释放方法。</strong></p><p><code>独占模式</code>：子类需重写其tryAcquire()和tryRelease()方法即可，返回true/false。对state的获取释放操作；如ReentrantLock。又可分为公平锁和非公平锁：</p><p><code>共享模式</code>：子类需重写其tryAcquireShared()和tryReleaseShared()方法即可，返回整数。大于0有可用资源，小于无。对state的获取释放操作；，如Semaphore/CountDownLatch。Semaphore、CountDownLatCh、 CyclicBarrier、ReadWriteLock。</p><p>至于如何维护队列的出队、入队操作，子类不用管，AQS已经帮你做好了。</p><p><strong>在AQS中，自旋锁采用 死循环 + CAS 实现。</strong></p><p>1、如果不要死循环可以吗？只用CAS.<br>   不可以，因为如果其他线程修改了tail的值，导致CAS处返回false，那么方法enq方法将推退出，导致该入队的节点却没能入队</p><p>2、如果只用死循环，不需要CAS可以吗？<br>   不可以，首先不需要使用CAS,那就没必要再使用死循环了，再者，如果不使用CAS，那么当执行设置尾结点时，将会改变队列的结构</p><p><strong>在AQS中，模板方法设计模式体现在其acquire()、release()方法上，我们先来看下源码：</strong></p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    首先尝试获取共享状态，如果获取成功，则<span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回<span class="token boolean">true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其中调用tryAcquire()方法的默认实现是抛出一个异常</strong>，也就是说tryAcquire()方法留给子类去实现，<strong>acquire()方法定义了一个模板，一套处理逻辑，相关具体执行方法留给子类去实现</strong>。</p><p>自定义同步器一般被定义为自定义同步组件的内部类。</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/65349219">https://zhuanlan.zhihu.com/p/65349219</a></p><h3 id="AQS源码分析"><a href="#AQS源码分析" class="headerlink" title="AQS源码分析"></a>AQS源码分析</h3><p><strong>aquire的步骤：</strong></p><p>1）tryAcquire()尝试获取资源。</p><p>2）如果获取失败，则通过addWaiter(Node.EXCLUSIVE), arg)方法把当前线程添加到等待队列队尾，并标记为独占模式。</p><p>3）插入等待队列后，并没有放弃获取资源，acquireQueued()自旋尝试获取资源。根据前置节点状态状态判断是否应该继续获取资源。如果前驱是头结点，继续尝试获取资源；<br>自旋方式获取资源并判断是否需要被挂起。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>Node<span class="token punctuation">,</span> Node<span class="token punctuation">)</span>检测当前节点是否应该<span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span>根据前驱结点状态判断，是SIGNAL，可以中断。说明前驱节点释放资源后会通知自己是CANCLLED，说明前置节点已经放弃获取资源了<span class="token punctuation">,</span> 此时一直往前找，直到找到最近的一个处于正常等待状态的节点<span class="token punctuation">,</span> 并排在它后面，返回<span class="token boolean">false</span>状态是<span class="token number">0</span>或PROPGATE，则利用CAS将前置节点的状态置为SIGNAL，让它释放资源后通知自己<span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>若确定有必要park，才会执行此方法。用于中断当前节点中的线程。使用LockSupport，挂起当前线程， LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）在每一次自旋获取资源过程中，失败后调用shouldParkAfterFailedAcquire(Node, Node)检测当前节点是否应该park()。若返回true，则调用parkAndCheckInterrupt()中断当前节点中的线程。若返回false，则接着自旋获取资源。当acquireQueued(Node,int)返回true，则将当前线程中断；false则说明拿到资源了。</p><p>5）在进行是否需要挂起的判断中，如果前置节点是SIGNAL状态，就挂起，返回true。如果前置节点状态为CANCELLED，就一直往前找，直到找到最近的一个处于正常等待状态的节点，并排在它后面，返回false，acquireQueed()接着自旋尝试，回到3）。</p><p>6）前置节点处于其他状态，利用CAS将前置节点状态置为SIGNAL。当前置节点刚释放资源，状态就不是SIGNAL了，导致失败，返回false。但凡返回false，就导致acquireQueed()接着自旋尝试。</p><p>7）最终当tryAcquire(int)返回false，acquireQueued(Node,int)返回true，调用selfInterrupt()，中断当前线程。</p><p><strong>acquireShared()</strong>：以共享模式获取对象，忽略中断。<br>先是tryAcquireShared(int)尝试直接去获取资源，返回的是剩余资源数量。如果成功，acquireShared(int)就结束了；<br>否则，调用doAcquireShared(Node)将线程加入等待队列，直到获取到资源为止。<br>doAcquireShared()实现上和acquire()方法差不多，就是多判断了是否还有剩余资源，唤醒后继节点。</p><p><strong>hasQueuedPredecessors()–公平锁在tryAqcuire()时调用，判断当前线程是否位于CLH同步队列中的第一个。如果是则返回flase，否则返回true。</strong></p><p><strong>doAcquireNanos()–独占模式下在规定时间内获取锁</strong><br>在ReentrantLock.tryLock()过程中被调用。如果有必要挂起且未超时则挂起。</p><p><strong>doAcquireInterruptibly–获取锁时响应中断</strong></p><p><strong>release()–独占模式释放资源</strong><br>首先调用子类的tryRelease()方法释放锁,然后唤醒后继节点,在唤醒的过程中,需要判断后继节点是否满足情况,如果后继节点不为空且不是作废状态,则唤醒这个后继节点,否则从tail节点向前寻找合适的节点,如果找到,则唤醒。</p><p><strong>releaseShared()–共享模式释放资源</strong><br>releaseShared()：在释放一部分资源后就可以通知其他线程获取资源。唤醒后面的节点，通过传播状态。循环+CAS保证线程安全，释放同步状态可能有多个线程。</p><h3 id="如何线程安全的修改锁状态位？"><a href="#如何线程安全的修改锁状态位？" class="headerlink" title="如何线程安全的修改锁状态位？"></a>如何线程安全的修改锁状态位？</h3><p>compareAndSetState(int expect, int update)<br>a. compareAndSetHead<br>b. compareAndSetTail（Node  expect,Node  update）确保线程节点被安全的添加</p><h3 id="得不到锁的线程，如何排队？"><a href="#得不到锁的线程，如何排队？" class="headerlink" title="得不到锁的线程，如何排队？"></a>得不到锁的线程，如何排队？</h3><p>FIFO队列。</p><h3 id="如果用普通的LinkedList来维护节点之间的关系，会有什么问题？"><a href="#如果用普通的LinkedList来维护节点之间的关系，会有什么问题？" class="headerlink" title="如果用普通的LinkedList来维护节点之间的关系，会有什么问题？"></a>如果用普通的LinkedList来维护节点之间的关系，会有什么问题？</h3><p>当有并发添加同步队列时，linklist不是线程安全的，顺序也是混乱的。<br>所以采用了CAS。</p><h2 id="如何尽可能提高多线程并发性能？"><a href="#如何尽可能提高多线程并发性能？" class="headerlink" title="如何尽可能提高多线程并发性能？"></a>如何尽可能提高多线程并发性能？</h2><h2 id="ReentrantLock分析"><a href="#ReentrantLock分析" class="headerlink" title="ReentrantLock分析"></a>ReentrantLock分析</h2><p>实现了Lock接口。在类库层面实现。</p><ul><li><p>独占锁：</p></li><li><p>重进入实现：state变量表示当前锁的重进入次数。只有为0时别的线程才可以进入。</p></li></ul><p>state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。此后，其他线程再tryAcquire()时就会失败，直到A线程unlock()到state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A线程自己是可以重复获取此锁的（state会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证state是能回到零态的。</p><ul><li><p>公平锁和非公平锁：默认非公平</p><ul><li>在绝对时间上，先对锁进行获取的请求一定先获取到锁，就是公平的，FIFO。</li></ul></li><li><p>公平锁：按照线程在队列中的排队顺序，先到者先拿到锁，会判断有无前驱结点，如果有就等待。每次都是从同步队列的第一个节点获取锁。大量线程切换。</p></li><li><p>非公平锁：当线程要获取锁时，无视队列顺序直接去抢锁，谁抢到就是谁的。可能发生饥饿。</p></li></ul><p><strong>增加的功能：</strong></p><ul><li><p>等待可中断，可实现公平锁，可以绑定多个条件。</p></li><li><p>等待可中断：持有锁的线程长时间不释放，正在等待的可以选择放弃等待。</p></li><li><p>公平锁：按照申请锁的顺序执行，synchronized是非公平的，ReentrantLock默认也是非公平的。公平锁会使性能急剧下降，影响吞吐量。</p></li><li><p>锁绑定多个条件：一个ReentrantLock对象可以同时绑定几个Condition对象，绑定多个条件。</p><ul><li>synchronized锁对象的wait()跟它的notify或者notifyAll配合可以实现一个隐含条件。</li></ul></li></ul><h4 id="ReentrantLock和synchronized比较-1"><a href="#ReentrantLock和synchronized比较-1" class="headerlink" title="ReentrantLock和synchronized比较"></a>ReentrantLock和synchronized比较</h4><p>jdk6对关键字优化之后，它俩性能基本持平。<br>但是最好还是用synchronized。</p><ul><li>synchronized是在语法层面的同步，简单清晰，代码简洁。</li><li>Lock需要确保在finally块中释放锁，否则一旦出现异常可能永远不会释放锁。synchronized由虚拟机确保。</li><li>java虚拟机更容易针对synchronized进行优化，JVM可以在线程和对象的元数据中记录synchronized中锁的相关信息。使用Lock的话，JVM很难知道哪些锁对象由特定线程锁持有。</li></ul><h2 id="读写锁ReentrantReadWriteLock"><a href="#读写锁ReentrantReadWriteLock" class="headerlink" title="读写锁ReentrantReadWriteLock"></a>读写锁ReentrantReadWriteLock</h2><p>实现了接口ReadWriteLock。一个读锁（共享锁），写锁（排它锁）</p><ul><li>支持公平和非公平的锁获取方式，吞吐量非公平好。</li><li>支持重进入，读线程可以再次获取读锁，写线程可以再次获取读或者写锁。</li><li>有锁降级，遵循获取写锁，获取读锁，再释放写锁的次序，写锁可以降级为读锁。保证可见性</li></ul><p>getReadHoldCount : 利用ThreadLocal存储每个线程的获取锁次数。</p><p><strong>int state是32位，高16位表示读状态，低16位写状态。</strong><br>s不等于0时，当写状态等于0，则读状态大于0，即读锁已被获取。</p><p><strong>写锁的获取与释放</strong>：通过改变状态实现。判断是否重入，是否有读锁了，有读锁不能获取写锁，读写锁确保写锁的操作对读锁可见，若允许，则正在运行的其它读线程就无法感觉到当前线程的写操作。</p><p><strong>读锁的获取和释放：</strong><br>如果有别的线程获取了写锁，进入等待状态，如果当前线程获取了写锁或者写锁未被获取，增加读状态CAS修改。</p><p><strong>锁降级：如果当前线程把持住写锁，在获取读锁，随后释放写锁的过程。</strong><br>之所以要在写锁之间加入读锁，因为当前线程可能会要使用刚刚更改或准备好的数据，如果不加，当写锁释放同时，又一个线程加了写锁，改变了数据，导致数据可见性问题。所以要加上。</p><p><strong>不支持锁升级：把持读锁，获取写锁，最后释放读锁的过程。目的是保证数据可见性</strong>。如果读锁被多个线程获取，其中任意线程获取了写锁并更新了数据，这个更新对其它获取到读锁的线程不可见。</p><h2 id="LockSupport工具"><a href="#LockSupport工具" class="headerlink" title="LockSupport工具"></a>LockSupport工具</h2><p>有超时属性参数。</p><p>jdk6中加入了park(Object blocker),之前没有参数。用于实现阻塞当前线程的功能，blocker用来标识当前线程正在等待的对象。这个对象主要用于问题排查和系统监控。<br>当线程阻塞到某个对象时，通过dump文件可以看到是哪个阻塞对象，方便分析问题。<br><strong>底层还是UNSAFE类</strong>。</p><h2 id="如何判断当前线程是都持有锁"><a href="#如何判断当前线程是都持有锁" class="headerlink" title="如何判断当前线程是都持有锁"></a>如何判断当前线程是都持有锁</h2><ul><li>holdslock()方法判断，如果持有锁就返回true没有就返回false</li></ul><h2 id="等待-通知模式实现之Lock-amp-Condition"><a href="#等待-通知模式实现之Lock-amp-Condition" class="headerlink" title="等待/通知模式实现之Lock&amp;Condition"></a>等待/通知模式实现之Lock&amp;Condition</h2><p>之前是synchronized与Object.wait(long timeout)和Object.notify()/notifyAll();</p><p>Condition和Lock配合也可以。</p><pre class="line-numbers language-java"><code class="language-java">Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Condition condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">waitm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>await(),<ul><li>对中断敏感的，不敏感的，还有超时自动返回的。</li></ul></li><li>singnal()，唤醒一个或多个。</li></ul><p><strong>实现分析：</strong><br>通过ConditionObject实现，是AQS的内部类。每个Condition对象都有一个等待队列（FIFO，内部也是AQS的Node节点，是单向的）。</p><p><strong>await()：</strong> 当前线程处于阻塞状态，直到调用signal()或中断才能被唤醒。<br><strong>就是相当于同步队列的首节点（获取了锁的节点）移动到Condition的等待队列中。</strong></p><p>1）将当前线程封装成Node且等待状态为CONDITION，加入等待队列。<br>2）释放当前线程持有的所有资源，唤醒同步队列中的后继节点，让下一个线程能获取资源。<br>3）加入到等待队列后，则阻塞当前线程，等待被唤醒。<br>4）如果是因signal被唤醒，则节点会从等待队列转移到同步队列；如果是因中断被唤醒，则记录中断状态，抛出中断异常。两种情况都会跳出循环。<br>5）若是因signal被唤醒，就自旋获取资源；否则处理中断异常。</p><p><strong>通知：</strong></p><ol><li>当前线程必须获取锁了。</li><li>获取等待队列的首节点放到同步队列尾部成功后并唤醒该节点的线程，没有构造新的节点，只是改变了指针指向。<ul><li>调用的enq，循环+CAS实现线程安全。</li><li>被唤醒后的线程从await方法的while循环退出（isOnSyncQueue）然后调用acquireQueued()加入到获取同步状态的竞争中。</li></ul></li></ol><p>signalAll相当于每个节点执行了一次signal方法，将等待队列所有节点放到同步队列。</p><h2 id="ConcurrentLinkedQueue源码分析"><a href="#ConcurrentLinkedQueue源码分析" class="headerlink" title="ConcurrentLinkedQueue源码分析"></a>ConcurrentLinkedQueue源码分析</h2><p>参考：<a href="https://my.oschina.net/mengyuankan/blog/1857573">https://my.oschina.net/mengyuankan/blog/1857573</a></p><p>ConcurrentLinkedQueue只实现了Queue接口，并没有实现BlockingQueue接口，所以它不是阻塞队列，也不能用于线程池中，但是它是线程安全的，可用于多线程环境中。</p><p>ConcurrentLinkedQueue是一个线程安全的队列，ConcurrentLinkedQueue使用（CAS+自旋）更新头尾节点控制出队入队操作；也就是说它是非阻塞的；</p><ul><li>tail节点的next为空，让新节点为tail的next节点，不更新tail，若tail.next不空，则更新tail为新节点。</li><li>head若有值，直接出队，若为空，寻找head，更新head节点。</li></ul><p><strong>主要的思想是：CAS+自旋，并且head和tail循环两次才会改变指向，不一定指向头或尾，最后也不一定指向头和尾，它是循环第二次才会更新，减少了更新操作，效率更高。</strong></p><p>头节点 head 和尾节点 tail 都被 volatile 修饰，节点被一个线程修改了之后，是会把修改的最新的值刷新到主内存中去，当其他线程去读取该值的时候，会中主内存中获取最新的值，也就是一个线程修改了之后，对其他线程是立即可见的。</p><p>当使用空的构造其是实例化一个对象的时候，会创建一个节点，节点的值为 null（<strong>添加的时候，是不能为null的</strong>），并把头节点和尾节点都指向该节点</p><p><strong>添加元素：</strong><br>add或offer，add也是用的offer。因为是无界队列，所以add(e)方法也不用抛出异常了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPoinoter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  新节点  <span class="token keyword">final</span> Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> t <span class="token operator">=</span> tail<span class="token punctuation">,</span> p <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> q <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      如果p就是尾结点，入队<span class="token punctuation">,</span>把newNode设置为p的next节点      <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">casNext</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        只有p节点和尾结点不一样才更新，循环两次才更新，画图        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">casTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      当前这个节点为空，因为updateHead导致h<span class="token punctuation">.</span>next<span class="token operator">=</span>h<span class="token punctuation">;</span>说明p已经被删除了（已经出队了）重新设置p的值。       <span class="token number">1</span><span class="token punctuation">)</span> tail 已经变化<span class="token punctuation">,</span> 则说明 tail 已经重新定位       <span class="token number">2</span><span class="token punctuation">)</span> tail 未变化<span class="token punctuation">,</span> 而 tail 指向的节点是要删除的节点<span class="token punctuation">,</span> 所以让 p 指向 head      p <span class="token operator">=</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        把tail设置为尾结点，再次循环设置下一个节点。        p <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> q<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    循环跳转，<span class="token keyword">goto</span>语法    restartFromHead<span class="token operator">:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        p 表示要出队的节点，默认为 head节点        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> h <span class="token operator">=</span> head<span class="token punctuation">,</span> p <span class="token operator">=</span> h<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            出队的元素            E item <span class="token operator">=</span> p<span class="token punctuation">.</span>item<span class="token punctuation">;</span>            如果出队的元素不为空，则把要出队的元素设置null，不更新head节点；如果出队元素为null或者cas设置失败，则表示有其他线程已经进行修改，则需要重写获取            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">casItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> h<span class="token punctuation">)</span> 当head元素为空，才会更新head节点，这里循环两次，更新一次head节点                    <span class="token function">updateHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>q <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> q <span class="token operator">:</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> 更新head节点                <span class="token keyword">return</span> item<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            队列为空，返回null            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>q <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                如果p的next为空，说明队列中没有元素了                更新h为p，也就是空元素的节点                <span class="token function">updateHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> q<span class="token punctuation">)</span>                如果p等于p的next，说明p已经出队了，重试                <span class="token keyword">continue</span> restartFromHead<span class="token punctuation">;</span>            把 p 的next节点赋值给p            <span class="token keyword">else</span>                p <span class="token operator">=</span> q<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>isEmpty 方法会判断链表的第一个元素是否为空来进行判断的。</li><li>size()方法会遍历所有的链表来查看有多少个元素。不是实时性的，但是保证最终一致性。</li></ul><p><strong>对于在开发的时候，如果需要判断是否为空，则应该使用 isEmpty 而不应该使用 size() &gt; 0 的方式，因为 size()会变量整个链表，效率较低</strong>。</p><p><strong>由于是无界队列，所以不会阻塞行为，offer返回任何时候都是true，不能根据返回值判断成功与否。</strong></p><h2 id="ConcurrentLinkedQueue与LinkedBlockingQueue对比？"><a href="#ConcurrentLinkedQueue与LinkedBlockingQueue对比？" class="headerlink" title="ConcurrentLinkedQueue与LinkedBlockingQueue对比？"></a>ConcurrentLinkedQueue与LinkedBlockingQueue对比？</h2><p>（1）两者都是线程安全的队列；</p><p>（2）两者都可以实现取元素时队列为空直接返回null，后者的poll()方法可以实现此功能；</p><p>（3）前者全程无锁，后者全部都是使用重入锁控制的；</p><p>（4）前者效率较高，后者效率较低；</p><p>（5）前者无法实现如果队列为空等待元素到来的操作；移除元素，若队列为空阻塞直到队列非空。</p><p>（6）前者是非阻塞队列，后者是阻塞队列；</p><p>（7）前者无法用在线程池中，后者可以；</p><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><ul><li>阻塞队列是支持两个附加，这两个操作支持阻塞的插入和移除。</li><li>阻塞的插入：如果队列满了，就阻塞不再插入。</li><li>阻塞的移除：如果队列空，阻塞直到非空。</li><li>应用场景，生产者消费者。</li></ul><p>add和remove，不合法抛出异常。<br>offer和poll，可以带有timeout时间。返回特殊值（true，poll返回null或者数据）或者等待一定时间返回。<br>put和take，一直阻塞。</p><p><strong>阻塞队列底层基本上都是使用 Lock 来实现并发控制的。</strong><br>道格·利</p><pre class="line-numbers language-java"><code class="language-java">ArrayBlockingQueue<span class="token punctuation">;</span>必须初始化容量LinkedBlockingQueue<span class="token punctuation">;</span>PriorityBlockingQueue<span class="token punctuation">;</span>DelayQueue<span class="token punctuation">;</span>SynchronousQueue；LinkedTransferQueue；多了transfer和tryTransfer方法。LinkedBlockingDeque；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>ArrayBlockingQueue，数组结构的有界的阻塞队列，也是通过锁来实现并发访问的，也是按照 FIFO 的原则对元素进行排列。通过ReentrantLock实现公平非公平。先进先出排序元素。非公平是指当队列可用的时候，阻塞的线程都可以有争夺线程访问的资格，有可能先阻塞的线程最后才能访问队列。</p></li><li><p>LinkedBlockingQueue;链表结构的有界阻塞队列。两个锁，写锁读锁，分别对应写条件读条件。如果队列未满唤醒插入线程，结束后若队列不空唤醒消费者。头结点是null节点，删除节点是h.next=h;// help GC。</p></li><li><p>PriorityBlockingQueue;就是用来PriorityQueue再加个锁就ok了。</p></li><li><p>DelayQueue;</p></li><li><p>SynchronousQueue；每一个put操作必须等待一个take操作，否则不能继续添加元素，也就是说，队列中只有一个元素存在。此外，它还支持公平和非公平的访问策略，默认为非公平访问策略，可以用在线程间传递数据使用。使用TransferQueue或transferStack实现</p></li></ul><h2 id="工作窃取算法"><a href="#工作窃取算法" class="headerlink" title="工作窃取算法"></a>工作窃取算法</h2><ul><li>工作窃取算法是指某个线程从其他队列里面窃取任务来执行。：因为有的线程会先把自己的队列的任务完成，而其他线程对应的队列里面还有任务。干完活的线程与其等着还不如帮助其他线程干活，于是就会从其他线程中窃取任务来执行。这个时候他们会访问同一个队列，所以为了减少窃取任务线程和被窃取任务线程之间竞争，通常会使用双端队列，被窃取任务的线程永远从双端队列的头部拿任务执行，窃取任务的线程永远从双端队列的尾部拿任务执行。</li><li>优点：充分利用线程之间进行并行计算，减少线程之间的竞争。</li><li>缺点：在某些情况下还是会存在竞争，比如双端队列里只有一个任务时。并且该算法会消耗更多的系统资源，比如说创建多个线程和多个双端队列。</li></ul><h2 id="Fork-Join框架"><a href="#Fork-Join框架" class="headerlink" title="Fork/Join框架"></a>Fork/Join框架</h2><ul><li><p>java 7提供的一个并行执行任务的框架。</p></li><li><p>Fork就是把大任务且分为若干子任务并行执行</p></li><li><p>Join就是合并子任务结果。</p></li><li><p>使用，重写compute方法，如果任务足够小，计算任务返回结果，如果还能分割，就分割任务，用了递归。然后fork执行子任务，join合并子任务。最后手动合并子任务结果。</p></li><li><p>ForkJoinTask任务类</p><ul><li>RecursiveAction，无返回结果的任务。</li><li>RecursiveTask，有返回值。</li></ul></li><li><p>ForkJoinPool执行任务。submit和execute方法。</p><ul><li>excute（）方法，用于提交一个不需要返回值的任务，所以无法判断任务是否被线程池执行成功。</li><li>submit（），提交需要返回值的任务。线程池会返回一个future类型的对象，通过future对象可以判断任务是否执行成功，而使用future的get（）方法获取返回值，get（）方法会阻塞当前线程直到任务完成。</li></ul></li></ul><p>ForkJoinPool由ForkJoinTask数组和ForkJoinWorkerThread数组  组成。<br>ForkJoinTask数组存放提交给Pool的任务，thread数组执行任务。</p><ul><li>fork() : thread.pushTask</li><li>join: 阻塞当前线程并等待获取结果</li></ul><h2 id="Unasfe工具类分析"><a href="#Unasfe工具类分析" class="headerlink" title="Unasfe工具类分析"></a>Unasfe工具类分析</h2><ul><li>类的非常规初始化；</li><li>基于偏移地址获取和设置变量的值；</li><li>基于偏移地址获取和设置数组的值；</li><li>内存管理；</li><li>多线程同步；<ul><li>monitorEnter</li><li>monitorExit</li></ul></li><li>线程的挂起和恢复；<ul><li>park</li><li>unpark</li></ul></li><li>内存屏障<ul><li>loadFence</li><li>storeFence</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Unsafe theUnsafe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@CallerSensitive</span><span class="token keyword">public</span> <span class="token keyword">static</span> Unsafe <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> caller <span class="token operator">=</span> Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   调用者的类加载器是否是启动类加载器   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>VM<span class="token punctuation">.</span><span class="token function">isSystemDomainLoader</span><span class="token punctuation">(</span>caller<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SecurityException</span><span class="token punctuation">(</span><span class="token string">"Unsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> theUnsafe<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用反射获取Unsafe实例</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">final</span> Field theUnsafe<span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           theUnsafe <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           设置该Field为可访问           theUnsafe<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           通过Field得到该Field对应的具体对象，传入null是因为该Field为<span class="token keyword">static</span>的           Unsafe unsafe  <span class="token operator">=</span> <span class="token punctuation">(</span>Unsafe<span class="token punctuation">)</span> theUnsafe<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> IllegalAccessException e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>9b8c96f96a0f<span class="token operator">/</span>src<span class="token operator">/</span>share<span class="token operator">/</span>classes<span class="token operator">/</span>sun<span class="token operator">/</span>misc<span class="token operator">/</span>Unsafe<span class="token punctuation">.</span>java       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">void sun::misc::Unsafe::putLong (jobject obj, jlong offset, jlong value)&#123;  计算要修改的数据的内存地址=对象地址+成员属性地址偏移量  jlong *addr = (jlong *) ((char *) obj + offset);  自旋锁，通过循环来获取锁， i386处理器需要加锁访问64位数据，如果是int，则不需要改行代码  spinlock lock;  *addr = value; 往该内存地址位置直接写入数据&#125;static inline boolcompareAndSwap (volatile jint *addr, jint old, jint new_val)&#123;  jboolean result = false;  spinlock lock;  if ((result = (*addr == old)))    *addr = new_val;  return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CAS相关, 是一条CPU的原子指令（cmpxchg指令）<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span>  Object expected<span class="token punctuation">,</span> Object update<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>public final native boolean compareAndSwapInt(Object o, long offset, int expected,int update);</p><p>public final native boolean compareAndSwapLong(Object o, long offset, long expected, long update);</p><pre><code>**AtomicInteger的实现中，静态字段valueOffset即为字段value的内存偏移地址，valueOffset的值在AtomicInteger初始化时，在静态代码块中通过Unsafe的objectFieldOffset方法获取。在AtomicInteger中提供的线程安全方法中，通过字段valueOffset的值可以定位到AtomicInteger对象中value的内存地址，从而可以根据CAS实现对value字段的原子操作。**对象的基地址baseAddress=“0x110000”，通过baseAddress+valueOffset得到value的内存地址valueAddress=“0x11000c”；然后通过CAS进行原子性的更新操作，成功则返回，否则继续重试，直到更新成功为止。## 原子工具类分析**基本类型**AtomicInteger的value是volatile的。**AtomicInteger 类主要利用 CAS (compare and swap) + volatile 和 native 方法来保证原子操作，从而避免 synchronized 的高开销，执行效率大为提升。****特殊的**</code></pre><p>public final void lazySet(int newValue)<br>最终设置为newValue,使用 lazySet 设置之后可能导致其他线程在之后的一小段时间内还是可以读到旧的值。</p><pre><code>**数组类型**AtomicIntegerArray类。数组通过构造方法传递进去，类会把数组复制一份，所以不会改变原数组。**引用类型**原子更新多个变量。AtomicReference会把引用对象的所有字段都给更新了。**对象的属性修改类型**AtomicStampedReference ：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题。## juc下的并发工具类executorService.shutdown() 并不是终止线程的运行，而是禁止在这个Executor中添加新的任务- **countDownLatch**: 等待多线程完成。可以让一个还或者多个线程等待其他线程完成操作。来代替join（join用于让当前线程等待join线程执行结束）  - countDownLatch(n)表示等待n个点完成。可以是一个线程中的N个执行步骤，也可以在多个线程中。  - coutDown（）方法会对计数器减一，然后await会阻塞当前线程，直至n为0时，await就不会在阻塞当前线程。  - **电商详情页由很多模块获取，彼此之间没啥关联，为提供响应时间，可以并发获取数据，全部获取完毕后返回，这种场景可以使用CDL**</code></pre><pre><code>await内部实现流程:判断state计数是否为0，不是，则直接放过执行后面的代码大于0，则表示需要阻塞等待计数为0当前线程封装Node对象，进入阻塞队列然后就是循环尝试获取锁，直到成功（即state为0）后出队，继续执行线程后续代码countDown内部实现流程:尝试释放锁tryReleaseShared，实现计数-1若计数已经小于0，则直接返回false否则执行计数(AQS的state)减一若减完之后，state==0，表示没有线程占用锁，即释放成功，然后就需要唤醒被阻塞的线程了释放并唤醒阻塞线程 doReleaseShared如果队列为空，即表示没有线程被阻塞（也就是说没有线程调用了 CountDownLatch#wait()方法），直接退出头结点如果为SIGNAL, 则依次唤醒头结点下个节点上关联的线程，并出队</code></pre><pre><code>- **CyclicBarrier** 同步屏障 让一组线程到达一个屏障（同步点）时被阻塞，直到最后一个线程到达同步点后，所有的被屏障拦截的线程才会继续运行。  - CyclicBarrier(int parties),参数表示拦截的线程数量。每个线程调用await方法告诉CyclicBarrier，线程已经到达屏障，然后当前线程被阻塞。  - Boss要开会，需要N个人都到了才开始，线程才可以继续后面的工作。  - N个线程相互等待，任何一个线程完成之前，所有的线程都必须等待。  - CyclicBarrier(int parties, Runnable barrier-Action), 用于线程到达屏障后优先执行barrierAction，处理更复杂的业务场景。例如得出了每年的日均价格，然后算3年的平均价格，可以在barrierAction里边做。  - `和CountdownLatch区别是`：countdown的计数器只能用一次，这个可以reset（），例如发生错误可以重置。**线程在countDown()之后，会继续执行自己的任务，而CyclicBarrier会在所有线程任务结束之后，才会进行后续任务**- **Semaphore**：用来控制同时访问特定资源的线程数，通过协调各个线程，保证合理的使用公共资源。例如数据库连接同时只能有10个。- **Exchanger** ：用于进行线程间数据的交换，它提供了一个同步点，在这个同步点，两个线程可以交换彼此的数据，两个线程通过exchange()方法进行数据的交换，如果一个线程先执行exchange()方法，它会一直等待到第二个线程也执行exchange()方法时，当两个线程都到达同步点时，这两个线程就可以交换数据。可以设置最大等待时间。## 实现Runnable接口和Callable接口的区别- 如果想让线程池执行任务的话需要实现的Runnable接口或Callable接口。- Runnable接口或Callable接口实现类都可以被ThreadPoolExecutor或ScheduledThreadPoolExecutor执行。**两者的区别在于 Runnable 接口不会返回结果但是 Callable 接口可以返回结果。**- 工具类Executors可以实现Runnable对象和Callable对象之间的相互转换。（Executors.callable（Runnable task）或Executors.callable（Runnable task，Object resule））。(1)Runnable是自从java1.1就有了，而Callable是1.5之后才加上去的(2)Callable规定的方法是call(),Runnable规定的方法是run()(3)Callable的任务执行后可返回值，而Runnable的任务是不能返回值(是void)(4)call方法可以抛出异常，run方法不可以。（run方法出现异常时会直接抛出，打印出堆栈信息，不过可以通过自定义ThreadFactory的方法来捕捉异常）(5)运行Callable任务可以拿到一个Future对象，表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。通过Future对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果。(6)加入线程池运行，Runnable使用ExecutorService的execute方法，Callable使用submit方法。 线程池的submit方法会返回一个FutureCallable接口也是位于java.util.concurrent包中。Callable接口的定义为：```javapublic interface Callable&lt;V&gt;     &#123;   有返回值，返回泛型，可以抛出异常。    V call() throws Exception;&#125;   MyCallable c = new MyCallable();FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;&gt;(c);new Thread(futureTask, &quot;t1&quot;).start();ExecutorService exec = Executors.newCachedThreadPool();Future&lt;Integer&gt; future = new FutureTask&lt;&gt;(c);exec.submit(c);</code></pre><p><strong>实现Runnable接口相比继承Thread类有如下优势：</strong></p><p>可以避免由于Java的单继承特性而带来的局限；<br>增强程序的健壮性，代码能够被多个线程共享，代码与数据是独立的；<br>适合多个相同程序代码的线程区处理同一资源的情况。</p><h2 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h2><ul><li><strong>降低资源的消耗</strong>。通过重复利用已经创建的线程，降低线程创建和销毁所造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务不需要等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。使用线程池可以进行统一的分配，调优和监控。</li></ul><h2 id="如何创建线程池"><a href="#如何创建线程池" class="headerlink" title="如何创建线程池"></a>如何创建线程池</h2><ul><li>不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式</li></ul><h2 id="线程池的参数"><a href="#线程池的参数" class="headerlink" title="线程池的参数"></a>线程池的参数</h2><ul><li>corePoolSize 核心线程池的基本大小</li><li>runnableTaskQueue 任务队列<ul><li>ArrayBlocking</li><li>LinkedBlocking，吞吐量高于ArrayBlocking，<code>newFixedThreadPool用</code>的。</li><li>Synchronous，吞吐量高于LinkedBlocking，<code>newCachedThreadPool用</code>的</li><li>PriorityBlocking</li></ul></li><li>maximumPoolSize  线程池的最大数量</li><li>keepAliveTime： 线程池中非核心线程空闲的存活时间大小</li><li>unit： 线程空闲存活时间单位</li><li>ThreadFactory 用于创建线程的工厂, 可以设置线程名字。</li><li>RejectedExecutionHandler 饱和策略</li></ul><h2 id="线程池异常处理"><a href="#线程池异常处理" class="headerlink" title="线程池异常处理"></a>线程池异常处理</h2><p>在使用线程池处理任务的时候，任务代码可能抛出RuntimeException，抛出异常后，</p><ul><li>线程池可能捕获它，</li><li>也可能创建一个新的线程来代替异常的线程，</li></ul><p>我们可能无法感知任务出现了异常，因此我们需要考虑线程池异常情况。<br><strong>1. 在任务代码try/catch捕获异常。捕获可能出现异常的地方。</strong></p><p><strong>2. submit执行的任务，可以通过Future对象的get方法接收抛出的异常，再进行处理。</strong></p><p><strong>3. 传入自己的ThreadFactory，为工作者线程设置UncaughtExceptionHandler，在uncaughtException方法中处理未检测的异常</strong></p><p><strong>4. 重写ThreadPoolExecutor的afterExecute方法，处理传递的异常引用，实际上也是用了future的get()方法</strong></p><img src="https://user-gold-cdn.xitu.io/2019/7/14/16bec33ca5559c93?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><h2 id="线程池都有哪几种工作队列？"><a href="#线程池都有哪几种工作队列？" class="headerlink" title="线程池都有哪几种工作队列？"></a>线程池都有哪几种工作队列？</h2><p>ArrayBlockingQueue<br>LinkedBlockingQueue<br>DelayQueue<br>PriorityBlockingQueue<br>SynchronousQueue</p><p><strong>ArrayBlockingQueue</strong></p><ul><li>ArrayBlockingQueue（有界队列）是一个用<strong>数组实现的有界阻塞队列</strong>，按FIFO排序量，取出有公平和非公平之分，ReentrantLock实现。</li></ul><p><strong>LinkedBlockingQueue</strong></p><ul><li>LinkedBlockingQueue（可设置容量队列）基于<strong><code>链表结构的有界阻塞队列</code></strong>。<strong>但是newFixedThreadPool实现的时候变成无界的了，也就是设置了最大容量。</strong>，按FIFO排序任务，容量可以选择进行设置，<strong>不设置的话，将是一个无边界的阻塞队列</strong>，最大长度为Integer.MAX_VALUE，<strong>吞吐量通常要高于ArrayBlockingQuene；newFixedThreadPool线程池使用了这个队列</strong></li></ul><p><strong>DelayQueue</strong></p><ul><li>DelayQueue（延迟队列）是一个任务定时周期的延迟执行的队列。根据指定的执行时间从小到大排序，否则根据插入到队列的先后排序。<strong>newScheduledThreadPool线程池</strong>使用了这个队列。</li></ul><p><strong>PriorityBlockingQueue</strong><br>PriorityBlockingQueue（优先级队列）是具有优先级的<code>无界阻塞队列</code>；</p><p><strong>SynchronousQueue</strong><br>SynchronousQueue（同步队列）一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，<strong>吞吐量通常要高于LinkedBlockingQuene，newCachedThreadPool线程池使用了这个队列。</strong></p><h2 id="有哪些类型的线程池"><a href="#有哪些类型的线程池" class="headerlink" title="有哪些类型的线程池"></a>有哪些类型的线程池</h2><p><strong>ThreadPoolExecutor创建的</strong></p><ul><li><p><code>newFixedThreadPool</code>可重用的固定线程数的线程池，使用无界队列<strong>LinkedBlockingQueue</strong>, 因为无界队列，线程池的线程数最大为corePoolSize，最大线程数maxinum无效，线程的等待时间也会无效，一直有任务没有执行，运行中的池子不会拒绝任务。造成OOM。  </p><ul><li>核心线程数和最大线程数大小一样。没有所谓的非空闲时间，即keepAliveTime为0</li><li><strong>适用于处理CPU密集型的任务</strong>，确保CPU在长期被工作线程使用的情况下，尽可能的少的分配线程，即适用执行长期的任务。</li></ul><p><strong>工作机制</strong></p><ul><li>提交任务</li><li>如果线程数少于核心线程，创建核心线程执行任务</li><li>如果线程数等于核心线程，把任务添加到LinkedBlockingQueue阻塞队列</li><li>如果线程执行完任务，去阻塞队列取任务，继续执行。</li></ul></li><li><p><code>newSingleThreadExecutor</code> 使用单个worker线程的Executor（执行者），保证顺序的执行任务，<strong>可以在线程死后（或发生异常时）重新启动一个线程代替原来的线程继续执行下去</strong>。corePoolSize=maxinum=1. <strong>无界队列影响相同。</strong></p><ul><li>核心线程数为1</li><li>最大线程数也为1</li><li>阻塞队列是LinkedBlockingQueue</li><li>keepAliveTime为0</li><li><strong>适用于串行执行任务的场景，一个任务一个任务地执行。</strong></li></ul><p><strong>工作机制</strong></p><ul><li>提交任务</li><li>线程池是否有一条线程在，如果没有，新建线程执行任务</li><li>如果有，讲任务加到阻塞队列</li><li>当前的唯一线程，从队列取任务，执行完一个，再继续取，一个人（一条线程）夜以继日地干活。</li></ul></li></ul><ul><li><p><code>newCachedThreadPool</code> 会根据需要创建新的线程 ，长时间保持空闲的线程池没有线程，不占用资源。corePool=0 使用没有容量的<strong>SynchronousQueue</strong>，队列提供任务offer，线程获取任务poll。执行很多短期异步任务。若提交任务速度过快，创建大量线程导致OOM。</p><ul><li>核心线程数为0</li><li>最大线程数为Integer.MAX_VALUE，代表着是无界的</li><li>阻塞队列是SynchronousQueue</li><li>非核心线程空闲存活时间为60秒</li><li><strong>用于并发执行大量短期的小任务。</strong></li></ul><p><strong>工作机制</strong></p><ul><li>提交任务</li><li>因为没有核心线程，所以任务直接加到SynchronousQueue队列。</li><li>判断是否有空闲线程，如果有，就去取出任务执行。</li><li>如果没有空闲线程，就新建一个线程执行。</li><li>执行完任务的线程，还可以存活60秒，如果在这期间，接到任务，可以继续活下去；否则，被销毁。</li></ul></li></ul><p>  <strong>存在问题</strong><br>  当提交任务的速度大于处理任务的速度时，每次提交一个任务，就必然会创建一个线程。极端情况下会创建过多的线程，耗尽 CPU 和内存资源。由于空闲 60 秒的线程会被终止，长时间保持空闲的 CachedThreadPool 不会占用任何资源。</p><p><strong>ScheduledThreadPoolExecutor创建的</strong></p><p><strong>DelayQueue</strong>是无界队列，所以maxinum无效。</p><ul><li><p><code>newScheduledThreadPool</code>,使用<strong>DelayQueue</strong>作为任务队列，会对任务的优先级进行排序，获取任务的方式不同，到期的任务才会被获取，执行完任务后，增加可额外的处理，会返回执行的结果FutureTask.get().</p><ul><li><p>首先根据time从小到大，然后根据任务序号小到大。</p></li><li><p>最大线程数为Integer.MAX_VALUE</p></li><li><p>阻塞队列是DelayedWorkQueue</p></li><li><p>keepAliveTime为0</p></li><li><p>scheduleAtFixedRate() ：按某种速率周期执行</p></li><li><p>scheduleWithFixedDelay()：在某个延迟后执行</p></li><li><p><strong>周期性执行任务的场景，需要限制线程数量的场景</strong></p><p><strong>工作机制</strong></p></li><li><p>添加一个任务</p></li><li><p>线程池中的线程从 DelayQueue 中取任务</p></li><li><p>线程从 DelayQueue 中获取 time 大于等于当前时间的task</p></li><li><p>执行完后修改这个 task 的 time 为下次被执行的时间</p></li><li><p>这个 task 放回DelayQueue队列中</p></li></ul></li></ul><ul><li><code>newSingleScheduledThreadPool</code>, 只包含一个线程，用于需要单个后台线程执行周期任务，同时需要保证顺序的执行各个任务的场景。</li></ul><p><code>newWorkStealingPool</code> 创建一个拥有多个任务队列（以便减少连接数）的线程池（<strong>java8新出的）会创建一个含有足够多线程的线程池，来维持相应的并行级别，它会通过工作窃取的方式，使得多核的 CPU 不会闲置，总会有活着的线程让 CPU 去运行。</strong>。</p><ul><li>每个处理器核，都有一个队列存储着需要完成的任务。对于多核的机器来说，当一个核对应的任务处理完毕后，就可以去帮助其他的核处理任务。</li><li>newWorkStealingPool 方法本质上就是一个 ForkJoinPool。但是 ForkJoinPool 是 java7 中就用的东西，所以 newWorkStealingPool 其实也不是什么稀奇的东西。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ForkJoinPool<span class="token punctuation">.</span>defaultForkJoinWorkerThreadFactory<span class="token punctuation">,</span>null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>FixedThreadPool 和 SingleThreadExecutor</strong> ： 允许请求的队列长度为 Integer.MAX_VALUE,<strong>可能堆积大量的请求</strong>，从而导致OOM。</p><p><strong>CachedThreadPool 和 ScheduledThreadPool</strong> ： 允许创建的线程数量为 Integer.MAX_VALUE ，<strong>可能会创建大量线程</strong>，从而导致OOM。</p><h2 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h2><img src="https://user-gold-cdn.xitu.io/2019/7/15/16bf3b10e39a52d0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><p><strong>RUNNING</strong></p><p>该状态的线程池会接收新任务，并处理阻塞队列中的任务;<br>调用线程池的shutdown()方法，可以切换到SHUTDOWN状态;<br>调用线程池的shutdownNow()方法，可以切换到STOP状态;</p><p><strong>SHUTDOWN</strong></p><p>该状态的线程池不会接收新任务，但会处理阻塞队列中的任务；<br>队列为空，并且线程池中执行的任务也为空,进入TIDYING状态;</p><p><strong>STOP</strong></p><p>该状态的线程不会接收新任务，也不会处理阻塞队列中的任务，而且会中断正在运行的任务；<br>线程池中执行的任务为空,进入TIDYING状态;</p><p><strong>TIDYING</strong></p><p>该状态表明所有的任务已经运行终止，记录的任务数量为0。<br>terminated()执行完毕，进入TERMINATED状态</p><p><strong>TERMINATED</strong></p><p>该状态表示线程池彻底终止</p><h2 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h2><ul><li><p>通过线程池的shutdown或者shutdownNow方法来关闭线程池。<strong>原理</strong>：遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应线程中断的任务可能永远无法停止。</p></li><li><p><strong>区别</strong>：<code>shutdownNow</code>首先将线程池的状态设置为<code>stop</code>，然后<code>尝试停止所有的正在执行或暂停任务的线程</code>，并返回等待执行任务的列表；</p><ul><li><code>shutdown</code>只是将线程池的状态设置为<code>SHUTDOWN状态</code>，<code>然后中断所有 没有 正在执行任务的线程</code>。只要调用了关闭方法中的任意一个isShutdown方法就会返回true。当所有任务都关闭了，才表示线程池关闭成功，这时调用isTerminaed方法就会返回true。通常调用shutdown方法来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow方法。</li></ul></li></ul><h2 id="使用无界队列的线程池会导致内存飙升吗？"><a href="#使用无界队列的线程池会导致内存飙升吗？" class="headerlink" title="使用无界队列的线程池会导致内存飙升吗？"></a>使用无界队列的线程池会导致内存飙升吗？</h2><ul><li>会的，newFixedThreadPool使用了无界的阻塞队列LinkedBlockingQueue，如果线程获取一个任务后，任务的执行时间比较长(比如，上面demo设置了10秒)，会导致队列的任务越积越多，导致机器内存使用不停飙升， 最终导致OOM。</li></ul><h2 id="线程池exec-submit-runnable-的执行流程"><a href="#线程池exec-submit-runnable-的执行流程" class="headerlink" title="线程池exec.submit(runnable)的执行流程"></a>线程池exec.submit(runnable)的执行流程</h2><p>用的是AbstractExecutorService。</p><ul><li>构造Future对象，new一个FutureTask，封装一个callable对象，用于获取结果用。</li><li>然后执行execute(Runnable command)或者(Runnable task,T res)，根绝线程池执行逻辑开始执行。</li><li>然后就是获取结果了,第一个返回null，第二个返回对象。</li></ul><img src="https://user-gold-cdn.xitu.io/2019/7/14/16bef895fec0d45b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"><h3 id="向线程池提交任务"><a href="#向线程池提交任务" class="headerlink" title="向线程池提交任务"></a>向线程池提交任务</h3><ul><li>excute（）方法，用于提交一个不需要返回值的任务，所以无法判断任务是否被线程池执行成功。</li><li>submit（），提交需要返回值的任务。线程池会返回一个future类型的对象，通过future对象可以判断任务是否执行成功，而使用future的get（）方法获取返回值，get（）方法会阻塞当前线程直到任务完成。而使用 get（long timeout，TimeUnit unit）方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。</li></ul><h2 id="线程池的饱和策略：JDK1-5"><a href="#线程池的饱和策略：JDK1-5" class="headerlink" title="线程池的饱和策略：JDK1.5"></a>线程池的饱和策略：JDK1.5</h2><ul><li>AbortPolicy：直接抛出异常</li><li>CallerRunsPolicy：只用调用者所在的线程执行任务</li><li>DiscardOldestPolicy：丢弃队列中最近的一个任务执行当前任务</li><li>DiscardPlicy：直接丢弃，不处理。</li><li>用户自定义拒绝策略（最常用）, 实现RejectedExecutionHandler，并自己定义策略模式</li></ul><h2 id="合理配置线程池"><a href="#合理配置线程池" class="headerlink" title="合理配置线程池"></a>合理配置线程池</h2><p><strong>CPU密集型 vs IO密集型</strong></p><ul><li>CPU密集型也叫计算密集型，指的是系统的硬盘、内存性能相对CPU要好很多，此时，系统运作大部分的状况是CPU Loading 100%。</li><li>CPU消耗很少，任务的大部分时间都在等待IO操作完成。</li></ul><p>cpu密集型配置尽可能少的线程。配置Ncpu + 1个<br>io密集型配置尽可能多的线程。2*Ncpu个。</p><p><strong>建议使用有界队列：可以增加系统的稳定性和预警能力</strong></p><h2 id="如何实现一个线程池？"><a href="#如何实现一个线程池？" class="headerlink" title="如何实现一个线程池？"></a>如何实现一个线程池？</h2><pre><code>a. 已工作线程数workNumb. 初始工作线程数c. 存放线程的集合d. 任务队列e. 工作线程</code></pre><h2 id="什么是伪共享？为什么会出现伪共享？如何避免？"><a href="#什么是伪共享？为什么会出现伪共享？如何避免？" class="headerlink" title="什么是伪共享？为什么会出现伪共享？如何避免？"></a>什么是伪共享？为什么会出现伪共享？如何避免？</h2><ul><li><p>CPU缓存系统以缓存行作为单位存储；</p></li><li><p>多线程下，”共享同一个缓存行的变量”，就会影响彼此的性能；— 伪共享概念</p></li><li><p>Cache Line可以简单的理解为CPU Cache中的最小缓存单位，今天的CPU不再是按字节访问内存，而是以64字节为单位的块(chunk)拿取，称为一个缓存行(cache line)。当你读一个特定的内存地址，整个缓存行将从主存换入缓存，并且访问同一个缓存行内的其它值的开销是很小的。</p></li></ul><hr><h1 id="CyC2018的博客"><a href="#CyC2018的博客" class="headerlink" title="CyC2018的博客"></a>CyC2018的博客</h1><p><a href="https://www.nowcoder.com/profile/124213/myDiscussPost">https://www.nowcoder.com/profile/124213/myDiscussPost</a></p><h1 id="3-Spring相关"><a href="#3-Spring相关" class="headerlink" title="3. Spring相关"></a>3. Spring相关</h1><p>spring是分层的java，SE或者EE应用一站式轻量级开源框架，以IOC和AOP为核心，提供展现层mvc，持久层springJDBC，业务层事务管理。<br>由框架来帮你管理这些对象，包括它的创建，销毁等，比如基于Spring的项目里经常能看到的Bean，它代表的就是由Spring管辖的对象。</p><h2 id="JDBC的连接步骤"><a href="#JDBC的连接步骤" class="headerlink" title="JDBC的连接步骤"></a>JDBC的连接步骤</h2><ul><li>加载驱动程序</li><li>获得数据库的连接</li><li>通过数据库的链接获得操作数据库的类statement实现增删改查</li><li>处理数据的返回结果</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.加载驱动程序</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.获得数据库链接</span>Connection conn<span class="token operator">=</span>DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>URL<span class="token punctuation">,</span> USER<span class="token punctuation">,</span> PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.通过数据库的连接操作数据库，实现增删改查（使用Statement类）</span>Statement st<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ResultSet rs<span class="token operator">=</span>st<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//4.处理数据库的返回结果(使用ResultSet类)</span><span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span>                     <span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"user_password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="spring的优点"><a href="#spring的优点" class="headerlink" title="spring的优点"></a>spring的优点</h2><ul><li>方便解耦，简化开发。通过IOC容器，可以将对象之间的依赖关系交由spring控制，避免了硬编码所造成的过度程序耦合。</li><li>AOP编程支持，通过aop的支持，方便进行面向切面的编程，可以把重复的代码提取出来，简化开发。</li><li>声明事物的支持：在Spring中，我们可以从事务管理代码中解脱出来，通过声明式方式灵活地进行事务的管理，提高开发效率和质量。</li><li>方便程序的测试；spring支持Junit4，可以通过注解方便的测试spring程序。</li><li>方便集成各种优秀的框架:mybatis,hibernate，struts等</li></ul><h2 id="spring中用到的九种设计模式"><a href="#spring中用到的九种设计模式" class="headerlink" title="spring中用到的九种设计模式"></a>spring中用到的九种设计模式</h2><ul><li>简单工厂：又称为静态工厂方法模式，实质是由一个工厂类根据传入的参数，动态的决定创建哪一个产品类。spring中的BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获取bean对象，但是在传入参数后创建  还是传入参数前创建这个要根据情况来定。</li><li>工厂方法：即应用程序将对象的创建以及初始化交给工厂对象。一般情况下，应用程序有自己的工厂对象来创建bean，如果将应用程序自己的工厂对象交给spring管理，那么spring管理的就不是普通的bean，而是工厂bean</li><li>单例模式：保证一个类仅有一个单例，并提供一个访问它的全局访问点。spring中默认的bean都是单例的，可以设置scope来指定</li><li>适配器：在springAop中使用的Advice 来增强代理类的功能。spring实现这一AOP功能的原理就是使用代理模式对类进行方法级别的切面增强，即生成被代理类的代理类，并且在代理类的方法前设置拦截器，通过执行拦截器的内容增强了代理方法的功能，实现面向切面编程。前置通知，后置通知等。</li><li>包装器 spring中的包装器模式在类名上有两种表现：一种是在类名中含有wrapper等，基本上是动态的给对象添加一些额外的职责。</li><li>代理模式 为其他对象提供一种代理以控制对这个对象的访问。动态代理两种模式。</li><li>观察者模式 定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖它的对象都得到通知并被自动更新。spring中观察者模式常用的地方就是listener的实现。如applicationListener。事件，事件监听者，事件发布者（通过applicationContext创建）</li><li>策略模式：定义一系列的算法，把他们一个个封装起来，并且使他们可以相互转换。这个模式可以使得算法可独立于使用它的用户而发生变化。spring中实例化对象的时候使用的instantiationStrategy 负责根据beandefinition对象创建一个bean的实例。</li><li>模板方法：定义了一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定的步骤。模板方法模式一般需要继承的。spring中的jdbcTemplate就是这种模式。</li></ul><h2 id="注解的基本概念和原理"><a href="#注解的基本概念和原理" class="headerlink" title="注解的基本概念和原理"></a>注解的基本概念和原理</h2><ul><li>注解可以提供更大的便捷性，易于维护修改，但耦合度高，而 XML 相对于注解则是相反的。</li><li><strong>注解的本质就是一个继承了 Annotation 接口的接口</strong>。有关这一点，你可以去反编译任意一个注解类，你会得到结果的。</li><li>注解像一种修饰符一样，用于包，类型，构造方法，方法，成员变量，参数以及本地变量的声明语句中</li></ul><p>@Override 的定义，其实它本质上就是：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Override</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>通过A<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>反射获取这个注解类是这样的。通过动态代理生成的。<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $Proxy1 <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">HelloAnnotation</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注解本质是一个继承了Annotation的特殊接口，其具体实现类是Java运行时生成的动态代理类。通过代理对象调用自定义注解（接口）的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会从memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。<br>key=注解方法名，value=注解返回值。</p><p>遍历类的每个方法，若有注解，获取注解类，然后就可以获取注解信息。</p><ol><li>扫描xml的bean定义，生成BeanDefinition对象放在类似List的注册表中，</li><li>实例化Bean。</li><li>处理注解，将创建的bean对象放在map里面，循环所有的bean对象，获取bean对象，首先获取set方法，<ul><li>按方法注入，通过方法获取注解，通过注解的名字取得引用对象，若有就注入到属性里边，通过调用invoke方法，</li><li>按字段注入，如果注解存在，获取注解，<pre><code>Injection方法里边。</code></pre></li></ul></li></ol><p>Method method = (Method) this.member;<br>ReflectionUtils.makeAccessible(method);<br>这个其实是反射对象Method的功能。把注解标注的bean注入到类里边。<br>method.invoke(target, getResourceToInject(target, requestingBeanName));</p><pre><code>4. 注入bean。**一个注解准确意义上来说，只不过是一种特殊的注释而已，如果没有解析它的代码，它可能连注释都不如。**- 解析一个类或者方法的注解往往有两种形式，一种是编译期直接的扫描，一种是运行期反射。  - 注解 @Override，一旦编译器检测到某个方法被修饰了 @Override 注解，编译器就会检查当前方法的方法签名是否真正重写了父类的某个方法，也就是比较父类中是否具有一个同样的方法签名。  - 自己写的注解往往只是会根据该注解的作用范围来选择是否`编译进`字节码文件，仅此而已。  - 注解类型，方法定义是比较特别的，受限制的，必须是无参数无异常。返回值必须为private等- annotation类型跟接口相似，可以定义长廊，静态成员类型。也可以如接口一般被实现或者继承。- 反射中的getParameterAnnotations()：获取方法的注解信息。**元注解**是用于修饰注解的注解，通常用在注解的定义上.- **@Target**：注解的作用目标, 用于指明被修饰的注解最终可以作用的目标是谁，也就是指明，你的注解到底是用来修饰方法的？修饰类的？还是用来修饰字段属性的。- **@Retention**：注解的生命周期, JAVA 虚拟机也定义了几种注解属性表用于存储注解信息</code></pre><p>RetentionPolicy.SOURCE：当前注解编译期可见，不会写入 class 文件<br>RetentionPolicy.CLASS：类加载阶段丢弃，会写入 class 文件<br>RetentionPolicy.RUNTIME：永久保存，可以反射获取</p><pre><code>- **@Documented**：注解是否应当被包含在 JavaDoc 文档中- **@Inherited**：是否允许子类继承该注解, 我们的注解修饰了一个类，而该类的子类将自动继承父类的该注解。**反射与注解**当通过反射，也就是我们这里的 getAnnotation 方法去获取一个注解类实例的时候，**其实 JDK 是通过动态代理机制生成一个实现我们注解（接口）的代理类。**```java@Target(&#123;ElementType.FIELD, ElementType.METHOD&#125;)@Retention(RetentionPolicy.RUNTIME)public @interface MyAnnotation &#123;  本质上是接口方法，所以获取当前方法值当然是方法了    String value();&#125;</code></pre><ul><li><p>首先，我们通过键值对的形式可以为注解属性赋值，像这样：@Hello（value = “hello”）。</p></li><li><p>接着，你用注解修饰某个元素，编译器将在编译期扫描每个类或者方法上的注解，会做一个基本的检查，你的这个注解是否允许作用在当前位置，最后会将注解信息写入元素的属性表。</p></li><li><p>然后，<strong>当你进行反射的时候，虚拟机将所有生命周期在 RUNTIME 的注解取出来放到一个 map 中，并创建一个 AnnotationInvocationHandler 实例，把这个 map 传递给它。</strong></p><ul><li>如果是自己定义的方法，将从我们的注解 map 中获取这个注解属性对应的值。</li></ul></li><li><p>最后，虚拟机将采用 JDK 动态代理机制生成一个目标注解的代理类，并初始化好处理器。<br>那么这样，一个注解的实例就创建出来了，它本质上就是一个代理类，你应当去理解好 AnnotationInvocationHandler 中 invoke 方法的实现逻辑，这是核心。<strong>一句话概括就是，通过方法名返回注解属性值。</strong></p></li></ul><p><strong>意义</strong><br>框架或者工具中的类根据这些信息来决定如何使用该程序元素或改变它们的行为。</p><ul><li>总结：其实注解本身不做任何事情，只是像xml文件一样起到配置作用。注解代表的是某种业务意义，注解背后处理器的工作原则如上述的源码实现：<strong>首先解析所有属性，判断属性上是否存在指定注解，如果存在则根据搜索规则获取到bean，然后利用反射原理注入，也可以通过字段的反射技术获取注解，根据搜索规则取得bean，然后利用反射技术注入。</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Per</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@MyAnno</span><span class="token punctuation">(</span>isNull<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>maxLength<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>description<span class="token operator">=</span><span class="token string">"姓名"</span><span class="token punctuation">)</span>  String name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>@<span class="token keyword">interface</span> <span class="token class-name">MyAnno</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">maxLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">8</span><span class="token punctuation">;</span>  String <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AnnoCheck</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      在这通过反射获取到obj的fields，然后遍历字段，看有没有注解类，field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>如果有，就挨个判断注解类的方法，有没有加在字段上，如果加了就执行方法中定义的判断条件。  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  AnnoCheck<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Per</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bean的作用域，注解定义，bean注入"><a href="#bean的作用域，注解定义，bean注入" class="headerlink" title="bean的作用域，注解定义，bean注入"></a>bean的作用域，注解定义，bean注入</h2><ul><li>singleton，单例，对于非线程安全的DAO类，通过aop的LocalThread，也是代理。实现了安全</li><li>prototype，每次都new</li><li>request，每个请求一个</li><li>session，每个sesion一个bean</li><li>globalSession：仅在Portlet环境，其它情况和session一样</li></ul><p><strong>注解定义bean</strong><br>Component，Service，Repository，Controller。<br><strong>bean装入：</strong>，</p><ul><li>Autowired(required=false)默认按类型注入，如果找不到不报异常就加个req。</li><li>Qualifier(“name”),通过名字注入。</li><li>Lazy必须同时标在类和属性上。延迟加载。</li><li>Resource，使用名称，若名称空则变量名或方法名</li></ul><p><strong>JavaConfig的组合实现bean定义</strong></p><ul><li>类上标Configuration，带了Component注解。代表可以提供spring的bean的定义信息，方法标Bean注解。</li></ul><h2 id="spring的Bean和IOC"><a href="#spring的Bean和IOC" class="headerlink" title="spring的Bean和IOC"></a>spring的Bean和IOC</h2><p>反射技术是IOC实现的基础。<br>spring通过一个配置文件描述Bean和Bean之间的依赖关系，利用java的反射实例化Bean并建立Bean之间的依赖关系。<br>BeanFactory可以管理不同类型的Java对象，最常用的BeanFactory实现是XmlBeanFactory类。<br>ApplicationContext是应用上下文，从bean工厂派生出来的，间接继承 BeanFactory接口 ，Spring核心工厂是BeanFactory。 </p><ul><li>ApplicationContext 是 对 BeanFactory 扩 展 ， 它 可 以 进 行 国 际 化 处 理 、 事 件 传 递 和 bean 自 动 装 配 以 及 各 种 不 同 应 用 层 的 Context 实 现  开 发 中 基 本 都 在 使 用 ApplicationContext, web 项 目 使 用 WebApplicationContext ， 很 少 用 到 BeanFactory .</li></ul><p><strong>他俩初始化的区别：</strong></p><ul><li><p>BeanFactory初始化容器没有实例化Bean。应用上下文初始化时就<strong>实例化所有单实例的Bean</strong></p></li><li><p>BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册</p></li><li><p>如果bean实现了ApplicationContextAware接口，会增加一个调用setApplicationContext的方法。如果在配置文件中声明了BeanFactoryPostProcessor，则在实例化之前调用postProcessBeanFactory对工厂信息进行加工处理。</p></li><li><p>可以通过注解@Configuration配置信息提供类和Bean注解代替xml，然后使用特有的AnnotationApplicationContext加载。</p></li></ul><img src="https://pic3.zhimg.com/80/v2-1006341abadfd3466b5b4587f349ab27_hd.jpg"><h3 id="BeanFactory的父子容器"><a href="#BeanFactory的父子容器" class="headerlink" title="BeanFactory的父子容器"></a>BeanFactory的父子容器</h3><p>通过HierarchicalBeanFactory接口，IOC容器可以建立父子层级关系。子容器可以访问父容器的Bean，但父容器不能访问子容器的Bean。在容器内，bean的id必须唯一，但是子容器可以有何父容器id相同的bean。</p><ul><li>SpringMVC，展现层Bean位于一个子容器中，业务层和持久层位于父容器，展现层可以用业务层和持久层的Bean，但是这两层不能用展现层的。</li></ul><h2 id="spring-bean的生命周期"><a href="#spring-bean的生命周期" class="headerlink" title="spring bean的生命周期"></a>spring bean的生命周期</h2><p>从Bean的作用范围和实例化Bean的阶段来说。@PostConstruct和@PreDestroy代表init-method和destroy-method，可以有多个。</p><p>可以划分为4类方法<br>1、Bean自身的方法：构造函数实例化Bean，调用Setter()设置属性值，通过init-method定义了初始化方法和destroy-method指定的方法。<br>2、Bean级生命周期接口方法：BeaNameAware,BeanFactoryAware，InitializingBean和DisposableBean，这些接口由Bean类直接实现，主要解决个性化的问题。<br>3、容器级生命周期接口方法：InstantiationAwareBeanPostProcessor和BeanPostProcessor这两个接口实现的。独立于Bean。主要解决共性化问题。<br>4、工厂后处理器接口方法：也是容器级别的，在应用上下文装配配置文件后立即调用。ApplicationContext用的。</p><p>第一步之前若是context，则调用工厂后处理器对工厂加工。</p><ol><li>通过getBean()获取某一个Bean，然后如果容器注册了InstantiationAwareBeanPostProcessor接口，实例化Bean之前，调用postProcessBeforeInstantiation()方法。</li><li>根据配置情况调用bean的构造函数或工厂方法实例化Bean。</li><li>实例化后调用InstantiationAwareBeanPostProcessor的postProcessAfterInstantiation()进行打扮。</li><li>设置属性值之前调用InstantiationAwareBeanPostProcessor的postProcessPropertyValues()。</li><li>设置属性值</li><li>如果bean实现了beanNameAware接口，就调用setBeanName（）方法将配置文件中的name设置到bean中，让Bean获取配置文件中对应的配置名称。</li><li>如果bean实现了BeanFactoryAware接口，则调用setBeanFactory（）把beanFactory容器实例设置到Bean中，让Bean感知容器（实例）。下一步如果是ApplicationContext则，如果bean实现了ApplicationContextAware接口，要执行setApplicationContext</li><li>如果BeanFactory装配了BeanPostProcessor后处理器，调用postProcessBeforeInitialzation().对bean加工。AOP，动态代理在这里实现。后续加工处理的接入点。</li><li>如果bean实现了InitializingBean接口，调用afterPropertiesSet()方法。</li><li>如果bean中指定了init-method方法，则执行这个方法。</li><li>调用BeanPostProcessor的postProcessAfterInitialzation()再进行一次加工处理。</li><li>如果是prototype类型，交给调用者管理Bean的生命周期。如果是singleton，交给spring容器管理，放到IoC容器的缓存池中，将Bean的引用给调用者。</li><li>对于单例，容器关闭时，如果Bean实现了DiposableBean接口，则调用destroy()，可以在这编写释放资源，记录日志等操作。</li><li>如果bean的destroy-method指定了bean的销毁方法，spring执行这个方法，完成bean的资源释放。</li></ol><h2 id="IOC的底层原理或IOC的执行过程"><a href="#IOC的底层原理或IOC的执行过程" class="headerlink" title="IOC的底层原理或IOC的执行过程"></a>IOC的底层原理或IOC的执行过程</h2><ul><li>控制反转<ul><li>控制：spring容器控制了对象的获取方法，由Ioc容器来控制对象的创建；以前是调用类来new。</li><li>反转：控制对象的权利被转移了。程序主动查找获取对象是正转，而反转则是由容器来帮忙创建及注入依赖对象；因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；依赖对象的获取被反转了。</li></ul></li><li>依赖注入<ul><li>依赖：应用程序依赖于IoC容器；依赖IoC容器给它提供所需资源。</li><li>注入：IOC往应用程序注入，注入的是应用程序依赖的资源。</li></ul></li></ul><ol><li>ResourceReader读取装载配置文件，生成一个Resource对象存这些信息。</li><li>BeanDefinitionReader读取Resource指向的配置文件资源，把文件中配置的bean都解析成一个BeanDefinition对象，保存到BeanDefinitionRegistry中。可能是不完整的，因为可能会引用外部资源</li><li>容器扫描bean注册表，<strong>使用Java反射机制自动识别出Bean工厂后处理器（就是实现了BeanFactoryPostProcessor接口的Bean）</strong>，用他们的工厂后处理器对Bean注册表的BeaneDefinition加工。<ul><li>对使用占位符的<bean>元素标签进行解析，得到最终的配置值。<strong>半成品的BeanDefinition成为成品了</strong>。</bean></li><li>对bean注册表中的BeanDefinition扫描，<strong>使用java反射机制找出所有属性编辑器的Bean(实现了PropertiesEditor接口的Bean，就是自己定义了一个设置属性的东西)</strong>，并自动将他们放到Spring容器的属性编辑器注册表中(PropertiesEditorRegistry)。</li></ul></li><li>spring容器从bean注册表中取出加工后的BeanDefinition, 调用InstantiationStrategy进行<strong>实例化Bean</strong>。</li><li>实例化Bean时，通过BeanWapper封装Bean，他提供了很多以Java反射机制操作Bean的方法，结合BeanDefiniton和属性编辑器<strong>完成属性注入操作</strong>。</li><li>利用容器中注册的Bean后处理器(实现了BeanPostProcessor的Bean)对已经完成属性设置的Bean进行后续加工，直到<strong>装配出一个准备就绪的Bean</strong>。</li></ol><p><strong>BeaDefinition：</strong><br>把配置文件的Bean信息变成对象放到容器。只在容器启动时加载并解析。</p><ol><li>从配置信息读取的bean装成一个BeanDefinition，可能是一个半成品，配置文件中可能通过占位符变量引用外部属性文件的属性，这一步没被解析出来。</li><li>然后通过bean工厂后处理器将引用解析为实际值，成了成品。</li></ol><p><strong>InstantiationStrategy</strong><br>根据BeanDefinition实例化对象。有不同的实例化策略，有通过CgLib为Bean生成子类创建Bean实例。半成品的Bean实例</p><p><strong>BeanWapper</strong><br>负责Bean属性的填充。一个是待处理的Bean，一个是设置Bean属性的属性编辑器。</p><p><strong>属性编辑器</strong><br>就是把外部的设置值转为JVM内部的对应类型。把字面值转为int啥的。类型转换器。</p><p>通过PropertyEditor设置Javabean属性的方法，规定了将外部值转换为内部bean的属性值，通过BeanInfo描述了JavaBean的哪些属性是可以编辑和对应的属性编辑器。</p><h2 id="IOC再一次分析"><a href="#IOC再一次分析" class="headerlink" title="IOC再一次分析"></a>IOC再一次分析</h2><pre class="line-numbers language-java"><code class="language-java">用Map来存放bean定义信息<span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanDefinition<span class="token operator">></span> beanDefintionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>用Map来存放创建的bean实例<span class="token punctuation">,</span>注意这里只是存放单例bean<span class="token punctuation">,</span>多实例每次都要创建新的<span class="token punctuation">,</span>不需要存放<span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> beanMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>bean定义BeanDefinition通过bean定义注册接口BeanDefinitionRegistry注册到Bean工厂BeanFactory，Bean工厂BeanFactory负责创建bean。</li><li>假如现在有DefaultBeanFactory实现了上面的接口，需要有getBean()，是放在hashMap里边的，key=beanName，value=BeanDefinition。然后就是如果没有bean实例，就通过反射new一个，如果自己定义了FactoryBean，就是用来生成bean的工厂，</li><li>把一个bean依赖的bean放在一个list里边，遍历list设置进去。</li></ul><p><strong>如何判断bean实例是否要增强？</strong><br>1）通过反射获取bean类及所有方法<br>2）遍历Advisor（通知者），取Advisor中的Pointcut（切入点）来匹配类、匹配方法<br><a href="https://www.cnblogs.com/leeSmall/p/10050916.html">https://www.cnblogs.com/leeSmall/p/10050916.html</a></p><h2 id="spring中依赖注入的几种方式"><a href="#spring中依赖注入的几种方式" class="headerlink" title="spring中依赖注入的几种方式"></a>spring中依赖注入的几种方式</h2><ul><li>构造方法注入</li><li>setter方法注入</li><li>使用field注入（使用注解的方法注入）</li><li>工厂方法注入</li></ul><h2 id="为什么用三级缓存"><a href="#为什么用三级缓存" class="headerlink" title="为什么用三级缓存"></a>为什么用三级缓存</h2><ul><li>在从三级缓存到二级缓存时，会有个AwareBeanPostProcessor接口，如果用户实现了，只需要去处理。</li></ul><h2 id="spring的循环依赖"><a href="#spring的循环依赖" class="headerlink" title="spring的循环依赖"></a>spring的循环依赖</h2><ul><li><p>循环依赖就是两个或者两个以上的bean相互引用，最终形成闭环。</p><ul><li>循环依赖会产生多米诺骨牌效应，牵一发动全身。</li><li>循环依赖会导致内存溢出，因为调用 new A() 时会先去执行属性 b 的初始化, 而 b 的初始化又会去执行 A 的初始化， 这样就形成了一个循环调用，最终导致调用栈内存溢出。</li></ul></li><li><p><strong>检测循环依赖</strong>：Bean在创建的时候可以给该Bean打标，如果递归调用回来发现正在创建中的话，即说明了循环依赖了。检测一个图中是否出现了环， 这是一个很简单的算法问题。利用一个 HashSet 依次记录这个依赖关系方向中出现的元素， 当出现重复元素时就说明产生了环， 而且这个重复元素就是环的起点。</p></li><li><p><strong>构造器注入会导致循环依赖。field属性注入和setter()方法不会</strong>。</p></li><li><p>构造器的循环依赖问题无法解决，只能抛出异常，在解决属性循环依赖时，<strong>Spring 能够处理 单例Bean 的循环依赖，采用提前暴漏对象的方法。</strong></p><ul><li>Spring的循环依赖的理论依据其实是基于Java的引用传递，当我们获取到对象的引用时，对象的field或则属性是可以延后设置的(但是构造器必须是在获取引用之前)。</li></ul></li><li><p>如果要获取的对象依赖了另一个对象，那么其首先会创建当前对象，然后通过递归的调用ApplicationContext.getBean()方法来获取所依赖的对象，最后将获取到的对象注入到当前对象中。</p></li></ul><pre><code>A实例化    ------&gt; 依赖注入B / \                |  |                  |  |                  |  |                  |  |                 \ /依赖注入A   &lt;-------实例化B</code></pre><ul><li>主要是实例化B，然后又要依赖注入A，但是此时B看不到A，就会导致循环依赖。只要让B看到A就可以了，所以采用了提前暴露对象的办法。<br>Spring的单例对象的初始化主要分为三步：循环依赖的出现是前两步。<pre><code>createBeanInstance：实例化，其实也就是调用对象的构造方法实例化对象   |  \ /populateBean：填充属性，这一步主要是多bean的依赖属性进行填充.   |  \ /initializeBean：调用spring xml中的init 方法。</code></pre></li><li>spring的单例对象放在cache中，所以为了解决单例的循环依赖问题，使用了三级缓存。</li></ul><pre class="line-numbers language-java"><code class="language-java"> bean instance<span class="token punctuation">,</span>单例对象的cache，一级缓存<span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span> bean instance <span class="token punctuation">,</span>二级缓存，提前暴光的单例对象的Cache<span class="token punctuation">,</span> 维护着所有半成品的Bean<span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> earlySingletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ObjectFactory <span class="token punctuation">,</span>三级缓存，单例对象工厂的cache<span class="token punctuation">,</span> 维护着创建中Bean<span class="token punctuation">,</span> 比如A的构造器依赖了B对象所以得先去创建B对象， 或者在A的populateBean过程中依赖了B对象，得先去创建B对象，这时的A就是处于创建中的状态。<span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> singletonFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们在创建bean的时候，首先想到的是从cache中获取这个单例的bean，这个缓存就是singletonObjects。</li><li>如果获取不到，并且对象正在创建中，就再从二级缓存earlySingletonObjects中获取。如果还是获取不到且允许singletonFactories通过getObject()获取，就从三级缓存singletonFactory.getObject()(三级缓存)获取，如果获取到了则把对象从三级缓存放到二级缓存。</li><li><strong>Spring解决循环依赖是在createInstance之后，也就是说单例对象此时已经被创建出来(调用了构造器)。虽然不完美，但是可以认出来了（根据对象引用能定位到堆中的对象），所以Spring此时将这个对象提前曝光出来让大家认识，让大家使用。</strong></li></ul><p>A的某个field或者setter依赖了B的实例对象，同时B的某个field或者setter依赖了A的实例对象”这种循环依赖的情况。</p><ul><li>A首先完成了初始化的第一步，并且将自己提前曝光到singletonFactories中，此时进行初始化的第二步，发现自己依赖对象B，此时就尝试去get(B)，发现B还没有被create，所以走create流程，B在初始化第一步的时候发现自己依赖了对象A，于是尝试get(A)，一级缓存singletonObject肯定没有，去二级缓存earlySingletonObject找，也没有，去三级缓存找到了，然后把A放到二级缓存，B拿到A对象后顺利完成了初始化阶段1、2、3，完全初始化之后将自己放入到一级缓存singletonObjects中。此时返回A中，A此时能拿到B的对象顺利完成自己的初始化阶段2、3，最终A也完成了初始化，进去了一级缓存singletonObjects中，而且更加幸运的是，由于B拿到了A的对象引用，所以B现在hold住的A对象完成了初始化。</li></ul><p><strong>scope=”prototype” 意思是 每次请求都会创建一个实例对象。singleton是单例，在cache里。</strong><br><strong>两者的区别是：有状态的bean都使用Prototype作用域，无状态的一般都使用singleton单例作用域。</strong></p><ul><li>对于“prototype”作用域Bean，Spring容器无法完成依赖注入，因为Spring容器不缓存“prototype”作用域的Bean，因此无法提前暴露一个创建中的Bean。</li></ul><h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><p><strong>正向代理（forward proxy）</strong>：是一个位于客户端和目标服务器之间的服务器(代理服务器)，为了从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端。客户端需要设置代理服务器ip和port。vpn也是这个原理。<br><img src="https://www.hollischuang.com/wp-content/uploads/2018/07/zhengxiang.png"></p><ul><li>突破访问限制 通过代理服务器，可以突破自身IP访问限制，访问国外网站.</li><li>提高访问速度 通常代理服务器都设置一个较大的硬盘缓冲区，会将部分请求的响应保存到缓冲区中，当其他用户再访问相同的信息时， 则直接由缓冲区中取出信息，传给用户，以提高访问速度。</li><li>隐藏客户端真实IP。</li></ul><p><strong>反向代理（reverse proxy）</strong>：是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><p>对于常用的场景，就是我们在Web开发中用到的负载均衡服务器，客户端发送请求到负载均衡服务器上，负载均衡服务器再把请求转发给一台真正的服务器来执行，再把执行结果返回给客户端。<br><img src="https://www.hollischuang.com/wp-content/uploads/2018/07/fan.png"></p><ul><li><strong>隐藏服务器真实IP</strong> 使用反向代理，可以对客户端隐藏服务器的IP地址。</li><li><strong>负载均衡</strong> 反向代理服务器可以做负载均衡，根据所有真实服务器的负载情况，将客户端请求分发到不同的真实服务器上。</li><li><strong>提高访问速度</strong> 反向代理服务器可以<strong>对于静态内容及短时间内有大量访问请求的动态内容提供缓存服务</strong>，提高访问速度。</li><li><strong>提供安全保障</strong> 反向代理服务器可以作为应用层防火墙，为网站提供对基于Web的攻击行为（例如DoS/DDoS）的防护，更容易排查恶意软件等。还可以为后端服务器统一提供加密和SSL加速（如SSL终端代理），提供HTTP访问认证等。</li></ul><h2 id="java静态代理-和-动态代理"><a href="#java静态代理-和-动态代理" class="headerlink" title="java静态代理 和 动态代理"></a>java静态代理 和 动态代理</h2><ul><li><p>静态代理：就是代理类是由程序员自己编写的，在编译期就确定好了的。代理模式中的所有角色（代理对象、目标对象、目标对象的接口）等都是在编译期就确定好的。</p><ul><li>通常用于对原有业务逻辑的扩充。比如说A实现了接口B，我们想要对A扩充业务逻辑，但是不方便直接对A操作，所以我们就可以创建代理类C（也要实现接口B），同时让代理类持有真实的对象（类A的尸体），然后在主代码中调用代理类的方法，来添加我们需要的业务逻辑。</li><li>用途：<ul><li>控制真实对象的访问权限 通过代理对象控制对真实对象的使用权限。</li><li>避免创建大对象 ，通过使用一个代理小对象来代表一个真实的大对象，如果不用代理，直接创建，资源消耗大。可以减少系统资源的消耗，对系统进行优化并提高运行速度。</li><li>增强真实对象的功能 </li></ul></li><li>优点：扩展了原有的功能，不侵入原代码。</li><li>缺点：会重复创建多个逻辑相同，仅仅真实对象不同的代理类。不易维护。一旦接口增加方法，目标对象与代理对象都要进行修改。</li></ul></li><li><p>动态代理：可以不需要程序员自己手写代理类，可以在运行期动态生成。<strong>反射是动态代理的一种实现方式，运用反射机制动态创建而成。</strong>。并且能够代理各种类型的对象。java实现动态代理需要InvocationHandler接口（里面有invoke方法，拦截所有的方法）和Proxy类的支持。</p><ul><li>优点：接口中声明的所有方法都被转移到（InvocationHandler.invoke）方法中执行。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。而且动态代理的应用使我们的类职责更加单一，复用性更强。</li><li>使用动态代理可以很方便的运行期生成代理类，通过代理类可以做很多事情，比如AOP，比如过滤器、拦截器等。</li></ul></li></ul><p><strong>静态代理和动态代理区别</strong></p><ul><li>静态代理通常只代理一个类，动态代理是代理一个接口下的多个实现类。静态代理事先知道要代理的是什么，而动态代理不知道要代理什么东西，只有在运行时才知道。</li><li>动态代理是在运行时动态生成的，即编译完成后没有实际的class文件，而是在运行时动态生成类字节码，并加载到JVM中</li><li>jdk动态代理对象不需要实现接口，但是要求目标对象必须实现接口。</li></ul><h2 id="JDK动态代理和Cglib动态代理的区别"><a href="#JDK动态代理和Cglib动态代理的区别" class="headerlink" title="JDK动态代理和Cglib动态代理的区别"></a>JDK动态代理和Cglib动态代理的区别</h2><p><strong>JDK代理，基于反射来实现。</strong><br>1）代理类必须实现InvocationHandler接口；<br>2）使用Proxy.newProxyInstance产生代理对象；<br>3）被代理的对象必须要实现一个或多个接口；</p><ul><li>根据代理类的字节码生成代理类的实例，通过反射用代理类获取构造器，然后new一个代理类的实例并把MyInvocationHandler的实例传给它的构造方法。<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * loader:类加载器 * interfaces:目标对象实现的接口 * h:InvocationHandler的实现类 */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span>                      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>                      InvocationHandler h<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>获取代理类。Class <span class="token class-name">cl</span> <span class="token operator">=</span> <span class="token function">getProxyClass</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>调用代理对象的构造方法（也就是$Proxy0(InvocationHandler h)）<br>Constructor cons = cl.getConstructor(constructorParams);<br>生成代理类的实例并把MyInvocationHandler的实例传给它的构造方法<br>return (Object) cons.newInstance(new Object[] { h });  </p><p>主要是getProxyClass。<br>// 声明代理对象所代表的Class对象（有点拗口）<br>Class proxyClass = null;<br>String[] interfaceNames = new String[interfaces.length];  存放目标类实现的所有接口名字<br>Set interfaceSet = new HashSet();</p><ol><li>遍历目标类所实现的接口</li><li>拿到目标类实现的接口的名称<br>String interfaceName = interfaces[i].getName();  </li><li>加载目标类实现的接口到内存中<br>interfaceClass = Class.forName(interfaceName, false, loader);</li><li>把目标类实现的接口代表的Class对象放到Set中<br>interfaceSet.add(interfaceClass);  </li><li>根据接口的名称从缓存中获取对象<br> Object key = Arrays.asList(interfaceNames)<br> Object value = cache.get(key); </li><li>这里就是动态生成代理对象的最关键的地方<br>byte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces);</li><li>根据代理类的字节码生成代理类的实例<br> proxyClass = defineClass0(loader, proxyName,  proxyClassFile, 0, proxyClassFile.length);  </li><li>return proxyClass;</li></ol><p>}</p><pre><code>-   生成的代理类extends Proxy implements 目标类实现的多个接口 , 至于代理类的方法调用实际上就是调用MyInvocationHandler的public Object invoke(Object proxy, Method method, Object[] args)方法- 对代理方法的调用都是通InvocationHadler的invoke来实现，而invoke方法根据传入的目标对象，方法和参数来决定调用哪个接口实现类的方法。**区别**- `原理`：JDK代理使用的是反射机制实现的动态代理，生成一个实现代理接口的匿名类。CGLIB代理使用的是字节码处理框架ASM，通过修改字节码生成子类。- `性能`：使用字节码技术生成代理类，在jdk6之前比使用Java反射效率要高，在调用次数较少的情况下，JDK代理效率高于CGLIB代理效率，只有当进行大量调用的时候，jdk6和jdk7比CGLIB代理效率低一点，但是到jdk8的时候，jdk代理效率高于CGLIB代理，- ASM是一个java字节码操纵框架，能够被用来动态生成类或者增强既有类的功能。ASM可以直接产生二进制class文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。- 使用动态代理的对象必须实现一个或多个接口，使用cglib代理的对象则无需实现接口，达到代理类无侵入。如果目标对象实现了接口，可以强制使用CGLIB实现AOP。- cglib可以在运行期扩展Java类与实现Java接口。它广泛的被许多AOP的框架使用，例如Spring AOP，为他们提供方法的interception（拦截）。- jdk动态代理必须实现InvocationHandler接口，通过反射代理方法，比较消耗系统性能，但可以减少代理类的数量，使用更灵活。- cglib代理无需实现接口，针对类来实现代理的，但cglib会继承目标对象，需要重写方法，所以目标对象不能为final类。目标方法不能是private和final。**Spring如何选择用JDK还是CGLIB？**1）当Bean实现接口时，Spring就会用JDK的动态代理。所以项目中都是类实现接口，方便jdk代理，因为jdk优化会更容易。2）当Bean没有实现接口时，Spring使用CGlib是实现。3）可以强制使用CGlib- jdk的动态代理主要是reflct下的Proxy和InvocationHandler（接口），通过在invoke方法里定义自己的横切逻辑，然后通过反射的方式调用原先的方法，这样就可以动态的将横切逻辑和业务逻辑 编织在一起。。- 通过实现InvocationHandler接口，弄一个自己的调用处理器，- 通过为Proxy类指定类加载器，接口方法，和自己的调用处理器，然后通过构造方法把调用处理器传递进去，构造一个代理对象。**SpringBoot2.x默认cglib，他们认为使用cglib更不容易出现转换错误。**## AOP原理- https://www.cnblogs.com/leeSmall/p/10050916.html从动态代理方面答面向切面编程。- 连接点：程序执行中的一些特定位置，例如方法调用前后、抛出异常后。相当于数据库的记录。- 切点：定位特定的连接点，相当于数据库的查询条件。一个切点可以匹配多个连接点。- 增强：织入目标类连接点的一段代码，- 织入：就是把增强加到连接点上。AOP的三种织入方式。Spring采用动态代理织入，AspectJ使用编译器和类装载期  - 编译器织入：使用特殊的javac编译器  - 类装载期织入：特殊的类装载器  - 动态代理织入：在运行期为目标类添加增强生成子类的方式。- 切面：切点和增强的组合，包括横切逻辑的定义，连接点的定义。**增强分类**- 前置增强：BeforeAdvice，方法调用前- 后置增强：AfterReturningAdvice，方法后- 环绕增强：方法前后，MethodInterceptor- 异常抛出增强：ThrowsAdvice，目标方法抛出异常后实施增强。- 引介增强：在目标类中添加一些新的方法属性，实现目标类未实现的接口。创建一个代理。## Spring 的启动加载顺序，请求的处理原理spring容器启动的三大件：Bean的定义信息，Bean的实现类，Spring本身。## FileSystemResource 和 ClassPathResource 有何区别？ 在 FileSystemResource 中需要给出 spring-config.xml 文件在你项目中的相对路径或者 绝对路径。在 ClassPathResource 中 spring 会在 ClassPath 中自动搜寻配置文件，所以要把 ClassPathResource 文件放在 ClassPath 下。 如果将 spring-config.xml 保存在了 src 文件夹下的话，只需给出配置文件的名称即可，因为 src 文件夹是默认。 **简而言之，ClassPathResource 在环境变量中读取配置文件，FileSystemResource 在配置文件 中读取配置文件。**## API 和 SPIJava 中区分 API 和 SPI，通俗的讲：API 和 SPI 都是相对的概念，他们的差别只在语义上，**API 直接被应用开发人员使用，SPI 被框架扩展人员使用**- API Application Programming Interface  - 大多数情况下，都是实现方来制定接口并完成对接口的不同实现，**调用方仅仅依赖却无权选择不同实现。**- SPI Service Provider Interface  - 而如果是调用方来制定接口，实现方来针对接口来实现不同的实现。**调用方来选择自己需要的实现方**。**定义一个SPI**1. 定义一组接口 (假设是org.foo.demo.IShout)，并写出接口的一个或多个实现。2. 在 src/main/resources/ 下建立 /META-INF/services 目录， 新增一个以接口命名的文件 (org.foo.demo.IShout文件)，内容是要应用的实现类，实现类的包名+类名，每个类一行。3. 使用 ServiceLoader 来加载配置文件中指定的实现。**实现原理**1. 应用程序调用ServiceLoader.load方法ServiceLoader.load方法内先创建一个新的ServiceLoader，并实例化该类中的成员变量，包括：loader(ClassLoader类型，类加载器)acc(AccessControlContext类型，访问控制器)providers(LinkedHashMap类型，用于缓存加载成功的类)lookupIterator(实现迭代器功能)2. 应用程序通过迭代器接口获取对象实例ServiceLoader先判断成员变量providers对象中(LinkedHashMap类型)是否有缓存实例对象，如果有缓存，直接返回。 如果没有缓存，执行类的装载：读取META-INF/services/下的配置文件，获得所有能被实例化的类的名称通过**反射方法Class.forName()加载类对象，并用instance()方法将类实例化**把实例化后的类缓存到providers对象中(LinkedHashMap类型）然后返回实例对象。## 事务隔离级别隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：TransactionDefinition.ISOLATION_DEFAULT：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。TransactionDefinition.ISOLATION_READ_UNCOMMITTED：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读和不可重复读，因此很少使用该隔离级别。TransactionDefinition.ISOLATION_READ_COMMITTED：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。TransactionDefinition.ISOLATION_REPEATABLE_READ：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读。TransactionDefinition.ISOLATION_SERIALIZABLE：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。## Spring中的事务管理- Spring在不同的事务管理API之上定义了一个抽象层，所以作为开发人员，不必了解底层的事务管理的api，就可以使用Spring的事务管理机制。Spring支持编程式事务管理，也支持声明式事务管理。- 编程式事务管理：将事务管理代码嵌入到业务方法中，来控制事务的提交和回滚，在编程式管理事务时，必须为每个事务操作中包含额外的事务管理代码，使用起比来较麻烦。- 声明式事务管理：大多数情况下比编程式事务管理更好用。它将事务管理的代码从业务中分离出来，以声明的方式来实现事务的管理，事务管理作为一种横切关注点，可以通过AOP方法模块化。Spring通过Spring AOP框架来支持事务的管理。- “给定的事务规则”就是用 TransactionDefinition 表示的，“按照……来执行提交或者回滚操作”便是用 PlatformTransactionManager 来表示，而 TransactionStatus 用于表示一个运行着的事务的状态。- TransactionDef...，它用于定义一个事务。它包含了事务的静态属性，比如：事务传播行为、超时时间等等。- PlatformTrans...，用于执行具体的事务操作- **Spring的事务管理器 platfromTransactionManage**，它为事务封装了一组独立于技术的方法，无论使用Spring的那种事务管理策略，事务管理器都是必须的。事务管理器以普通的 Bean 形式声明在 Spring IOC 容器中- **Spring的事务管理的具体实现**：  - DataSourceTransactionManage：适配于mybatis使用  - HibernateTransactionManage ：适用于Hibernate框架存取数据库TransactionDefinition定义了事务的属性- 事务隔离级别- 事务传播- 事务超时- 只读状态，只读事务不修改数据，可以进行一定的优化。---- 事务的传播途径或者是行为（7中），举例常用的两种  - PROPAGATION_REQUIRED:如果存在一个事务，就加入当前事务。如果没有事务则新建一个事物。**默认的**。  - PROPAGATION_REQUIRES_NEW：总是开启一个新的事务。如果一个事务已经存在，则将这个存在的事务挂起。  - PROPAGATION_SUPPORTS：支持当前事务，如果没有事务，则以非事务执行。  - PROPAGATION_NOTSUPPORTED:以非事务的方式执行操作。如果当前存在事务就把事务挂起来  - PROPAGATION_MANDATORY：使用当前事务，如果当前没有事务，则抛出异常  - PROPAGATION_NEVER：以非事务方式执行，如果存在事务则抛出异常  - PROPAGATION_NESTED：如果当前存在事务就在嵌套事务内执行，如果当前没有事务，则新建一个事务。- 事务的隔离级别：（比数据库的四个隔离级别多一个）多了一个默认的隔离级别（和数据库一致）。- 事务回滚：@Transactional 注解的 rollbackFor （遇见时必须回滚）和 noRollbackFor（一组异常类，遇见时不回滚） 属性来定义**默认不设置事务是自动提交。如果用注解了，默认是required传播方式，如果调用一个service里的两个方法，没有传播，浑然天成的一个事务，调用别的service里的方法会把那个里边的操作加到当前事务里。****@Transactional 注解**- 一般用于业务实现类上（适用所有public方法），或者方法上，方法处的注解会覆盖类的注解。### Spring的事务管理器**Spring通过单实例Bean简化多线程问题，基于接口代理或动态字节码技术，通过AOP实施事务增强的。可以实施接口动态代理的方法只能使用public或public final修饰，其他的不能代理。基于Cglib的是扩展被增强类，动态创建其子类的方式进行AOP织入。由于final，static，private都不能被子类覆盖，所以这些方法也不能AOP增强。**通过线程相关的ThreadLocal保存数据库连接。传统的DAO因为有Connection是个有状态的变量，不能是单实例，但Spring中，DAO和Service都是单实例存在。通过ThreadLocal将有状态的变量本地线程化。所以单实例的存在具有天然的线程安全性。- service的一个方法，在相同线程中进行相互嵌套调用事务方法工作在相同的事务中。如果这些相互嵌套调用的方法工作在不同的线程中，则不同线程下的方法工作在独立的事务。## spring的核心--数据校验- spring的自行开发的数据校验spring Validation由3部分组成：  - 校验器-Validator 他会运行校验代码。  - 校验对象，实际上是一个javabean，Validator会对其进行校验  - 校验结果：errors，一次校验的结果都存放在哦errors实例中，或者BindingResult（扩展类Errors接口）中。前一个对象的检验结果放在其后的入参中，  - 如何在页面中显示校验信息呢，其实会把校验结果保存到httpServletRequest（隐含模型）里边，- 校验过程  - 声明一个校验对象实体。  - 针对这个实体声明一个校验器。要实现一个Validator接口。将校验器与实体绑定，使用验证工具绑定结果，向error中添加验证错误信息。  - 根据校验器和实体进行验证，返回一个ValidationError，里面记录了所有的校验错误信息。信息分为4个部分。验证对象的名字，错误的域，错误的code和错误信息- Spring现在推荐使用Bean Validation来进行数据校验，而且已经整合到Spring MVC框架中，Spring核心部分没有提供Bean Validation相关的实现类，所以需要引入对应的实现框架，它使用hibernate的校验框架。  - 添加依赖文件，在springmvc.xml中配置validator校验器  - 在pojo中指定校验规则，使用注解校验，notnull和size  - controller中对其校验绑定进行使用，使用@Valid注解（作用就是将pojo内的注解数据校验规则(@NotNull等)生效，），BindingResult对象用来获取校验失败的信息(@NotNull中的message)，与@Validated注解必须配对使用，一前一后- 分组校验  - 定义空的接口作为这个分组的标识，  - 然后校验的注解（@Size等）里面有groups = &#123;group1.class&#125;属性  - 在controller里面@Validated注解里面的value=&#123;group1.class&#125;来判断使用那个分组## 可以在 Spring 中注入一个 null 和一个空字符串吗可以## SpringMVC 工作原理流程1. 客户端发出一个http请求，web服务器接收到这个请求，匹配DispatcherServlet的请求映射路径，匹配成功将请求交给DispatcherServlet处理。2. DispatcherServlet接收到请求后，根据请求的信息和HandlerMapping(看做路由控制器)配置的信息找到处理请求的处理器（Handler，就是一个个controller）3. 找到handler后，通过handlerAdapter对handler进行封装，再以统一的适配器接口进行调用4. 处理器完成逻辑后，将返回一个ModelAndView 给DispatcherServlet。其包含了视图逻辑名和模型数据信息。5. ModelAndView 中包含的逻辑视图名借由视图解析器（viewResolver）完成逻辑视图到真实视图的解析。6. 得到真正的视图对象view后，使用view对ModelAndView中的模型数据进行视图渲染7. 最终得到一个普通的html页面或别的数据json啥的。## 什么是 SpringMvcSpringMvc 是 spring 的一个模块，基于 MVC 的一个框架，Spring开始就用AOP，可能就是为了分离，无需中间整合层来整合。 ## SpringMvc 的控制器是不是单例模式,如果是,有什么问题,怎么解决？ - 是单例模式,所以在多线程访问的时候有线程安全问题,不要用同步,会影响性能的,- 性能(不用每次请求都创建对象).- 控制器里面不能写字段。就是写了也要是多实例。## 什么是Springboot随着新功能的增加，spring 变得越来越复杂.Spring Boot 是解决这个问题的方法。Spring Boot 已经建立在现有 spring 框架之上。使用 spring 启动，我们避免了之前我们必须做的所有样板代码和配置。因此，Spring Boot 可以 帮助我们以最少的工作量，更加健壮地使用现有的 Spring 功能。 ## springBoot和springMVC的区别- **Spring-boot只是一个配置工具**，整合工具和辅助工具。**实现自动配置，降低项目搭建的复杂度**- **springMVC是框架，是项目中实际运行的代码**。- SpringMVC提供了一种轻度耦合的方式来开发，WEB应用是spring的一个模块，是一个web框架，通过dispatcherServlet，ModelAndView，ViewResolver，使得开发web应用变得简单。- **SpringBoot实现了自动装配，降低了项目搭建的复杂度。主要是为了解决使用spring框架需要进行大量配置太麻烦的问题，他不是代替spring的解决方案，而是和spring框架紧密结合用于提升spring开发者的工具。**- 所以spring最初利用DI/IOC ,AOP解耦应用组件，然后随之开发了一个MVC的框架，用以开发web应用。然后我们发现每次开发都写了很多样板代码，为了简化工作流程，于是开发出了懒人整合包（starter），这就是springBoot。所以spring时核心引擎，MVC时基于spring的一个mvc框架，boot是基于spring4的条件注册的一套快速开发整合包。## 什么是 JavaConfig？ Spring JavaConfig 是 Spring 社区的产品，它提供了配置 Spring IoC 容器的纯 Java 方法。因此 它有助于避免使用 XML 配置。使用 JavaConfig 的优点在于： - 面向对象的配置。由于配置被定义为 JavaConfig 中的类，因此用户可以充分利用 Java 中的 面向对象功能。一个配置类可以继承另一个，重写它的@Bean 方法等。 - 减少或消除 XML 配置。## Spring的单例是怎么实现的？(单例注册表)- getInstance() 方法通过传入类名进行判断，如果参数为 null，我们默认分配一个 SingletonReg 实例对象，如果实例对象在不存在，我们注册到单例注册表中。第二次获取时，直接从**缓存的单例注册表中获取。**```java通过 Map 实现单例注册表private final Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;String, Object&gt;(64);</code></pre><h2 id="Spring的线程安全性（从单例ThreadLocal谈）"><a href="#Spring的线程安全性（从单例ThreadLocal谈）" class="headerlink" title="Spring的线程安全性（从单例ThreadLocal谈）"></a>Spring的线程安全性（从单例ThreadLocal谈）</h2><ul><li><p>Spring容器中的Bean本身不具备线程安全的特性，但是具体还是要结合具体scope的Bean去研究。</p></li><li><p>无状态的对象即是自身没有状态的对象，也就是线程中的操作不会对Bean的成员执行查询以外的操作。自然也就不会因为多个线程的交替调度而破坏自身状态导致线程安全问题。无状态对象包括我们经常使用的DO、DTO、VO这些只作为数据的实体模型的贫血对象，还有Service、DAO和Controller，这些对象并没有自己的状态，它们只是用来执行某些操作的。例如，每个DAO提供的函数都只是对数据库的CRUD，而且每个数据库Connection都作为函数的局部变量（局部变量是在用户栈中的，而且用户栈本身就是线程私有的内存区域，所以不存在线程安全问题），用完即关（或交还给连接池）。</p></li><li><p>Spring根本就没有对bean的多线程安全问题做出任何保证与措施。对于每个bean的线程安全问题，根本原因是每个bean自身的设计。不要在bean中声明任何有状态的实例变量或类变量，如果必须如此，那么就使用ThreadLocal把变量变为线程私有的，如果bean的实例变量或类变量需要在多个线程之间共享，那么就只能使用synchronized、lock、CAS等这些实现线程同步的方法了。</p></li></ul><h2 id="spring单例在高并发下可能出现的错误"><a href="#spring单例在高并发下可能出现的错误" class="headerlink" title="spring单例在高并发下可能出现的错误"></a>spring单例在高并发下可能出现的错误</h2><ul><li><p>在高并发情况下，单例对象的数据不可以在一个线程使用过，另一个线程调用时单例对象的数据发生改变。 其实单例对象相当于全局变量，线程执行时需要修改数据，再高并发的情况下就会出现当前线程获取到的单例对象数据是脏数据。</p></li><li><p>对于有状态的bean, ThreadLocal会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。更简单，更方便，且结果程序拥有更高的并发性。 </p></li></ul><p><strong>Spring使用ThreadLocal解决线程安全问题</strong> </p><ul><li><p>我们知道在一般情况下，只有无状态的Bean才可以在多线程环境下共享，在Spring中，绝大部分Bean都可以声明为singleton作用域。就是因为Spring对一些Bean（如RequestContextHolder、TransactionSynchronizationManager、LocaleContextHolder等）中非线程安全状态采用ThreadLocal进行处理，让它们也成为线程安全的状态，因为有状态的Bean就可以在多线程中共享了。 </p></li><li><p>线程安全问题都是由全局变量及静态变量引起的。<br>若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则就可能影响线程安全。<br>1）常量始终是线程安全的，因为只存在读操作。<br>2）每次调用方法前都新建一个实例是线程安全的，因为不会访问共享的资源。<br>3）局部变量是线程安全的。因为每执行一个方法，都会在独立的空间创建局部变量，它不是共享的资源。局部变量包括方法的参数变量和方法内变量。</p></li></ul><h2 id="Servlet不是线程安全的。"><a href="#Servlet不是线程安全的。" class="headerlink" title="Servlet不是线程安全的。"></a>Servlet不是线程安全的。</h2><p>Servlet不是线程安全的。</p><p>要解释为什么Servlet为什么不是线程安全的，需要了解Servlet容器（即Tomcat）使如何响应HTTP请求的。</p><p>当Tomcat接收到Client的HTTP请求时，Tomcat从线程池中取出一个线程，之后找到该请求对应的Servlet对象并进行初始化，之后调用service()方法。要注意的是每一个Servlet对象在Tomcat容器中只有一个实例对象，即是单例模式。如果多个HTTP请求请求的是同一个Servlet，那么着两个HTTP请求对应的线程将并发调用Servlet的service()方法。<strong>此时如果Servlet1中定义了实例变量或静态变量，那么可能会发生线程安全问题（因为所有的线程都可能使用这些变量）。</strong></p><h2 id="Spring-Boot-2-0、起步依赖、自动配置、"><a href="#Spring-Boot-2-0、起步依赖、自动配置、" class="headerlink" title="Spring Boot 2.0、起步依赖、自动配置、"></a>Spring Boot 2.0、起步依赖、自动配置、</h2><p><strong>一、起步依赖原理分析</strong><br>1、分析 spring-boot-starter-parent，按住 Ctrl 点击 pom.xml 中的 spring-boot-starter-parent，跳转到 spring-boot-starter-parent 的 pom.xml，xml 配置中主要是读取配置文件的配置，然后继承的父pom是 spring-boot-starter-dependencies，进入查看这个，可以发现，一部分坐标的版本、依赖管理、插件管理已经定义好，所以我们的 SpringBoot 工程继承 spring-boot-starter-parent 后<strong>已经具备版本锁定等配置了。所以起步依赖的作用就是进行依赖的传递</strong>。</p><p>2、分析 spring-boot-starter-web<br>spring-boot-starter-web 就是将 web 开发要使用的 spring-web、spring-webmvc 等坐标进行了“打包”，这样我们的工程只要引入 spring-boot-starter-web 起步依赖的坐标就可以进行 web 开发了，同样体现了依赖传递的作用。</p><p><strong>二、自动配置原理解析</strong><br>1、也就是分析@SpringBootApplication注解。里边有这些主要的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootConfiguration</span>，等同于 <span class="token annotation punctuation">@Configuration</span>，既标注该类是 Spring 的一个配置类<span class="token annotation punctuation">@EnableAutoConfiguration</span>，SpringBoot 自动配置功能开启<span class="token annotation punctuation">@ComponentScan</span>，组件扫描配置 约定 当前所在的包及子包下的都会被扫描到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>EnableAutoConfiguration，@Import(AutoConfigurationImportSelector.class) 导入了AutoConfigurationImportSelector 类，这个类一个selectImports 方法，里边一个SpringFactoriesLoader.loadFactoryNames 方法的作用就是从 META-INF/spring.factories 文件中读取指定类对应的类名称列表，就是很多自动配置的类。<ul><li>例如ServletWebServerFactoryAutoConfiguration ，其中，类上注解@EnableConfigurationProperties(ServerProperties.class) 代表加载ServerProperties服务器配置属性类，ServerProperties.class源码里边有prefix=server，还有port，address啥的，用于读取配置文件中前缀为server的信息。</li></ul></li></ul><h2 id="Spring-Boot的starter原理，自己实现一个starter"><a href="#Spring-Boot的starter原理，自己实现一个starter" class="headerlink" title="Spring Boot的starter原理，自己实现一个starter"></a>Spring Boot的starter原理，自己实现一个starter</h2><p>自定义starter（场景启动器），我们要做的事情是两个：确定依赖和编写自动配置。我们重点要做的就是编写自动配置，我们之前写过一些自动配置，主要是注解配置的使用，主要的注解有：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> ：指定这个类是一个配置类<span class="token annotation punctuation">@ConditionalOnXXX</span> ：在指定条件成立的情况下自动配置类生效<span class="token annotation punctuation">@AutoConfigureAfter</span>：指定自动配置类的顺序<span class="token annotation punctuation">@Bean</span>：给容器中添加组件<span class="token annotation punctuation">@ConfigurationProperties</span>：结合相关xxxProperties类来绑定相关的配置<span class="token annotation punctuation">@EnableConfigurationProperties</span>：让xxxProperties生效加入到容器中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进行自动配置的加载，加载方式是将需要启动就加载的自动配置类，配置在META-INF/spring.factories，启动器的大致原理是如此。</p><ul><li>先新建一个空的项目，然后以模块形式创建两个模块。一个启动器，一个自动配置模块。</li><li>将自动配置模块导入starter中，让启动模块依赖自动配置模块。添加maven依赖。</li><li>可以在自动配置模块继承springboot，</li><li>编写一个配置类HelloPropertis，用于配置文件中的属性。加上@ConfigurationProperties</li><li>再编写一个服务HelloService，成员变量是HelloProperties。</li><li>然后再将这个服务注入组件：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span> <span class="token comment" spellcheck="true">//web应用才生效</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HelloProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceAutoConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>        HelloProperties helloProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> HelloService <span class="token function">helloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HelloService service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">setHelloProperties</span><span class="token punctuation">(</span>helloProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> service<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>因为SpringBoot读取自动配置是在META-INF的spring.factories文件中，所以我们还要将我们的自动配置类写入其中</li><li><code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.yuanqinnan.starter.HelloServiceAutoConfiguration</code></li></ul><h2 id="Mybatis的缓存机制"><a href="#Mybatis的缓存机制" class="headerlink" title="Mybatis的缓存机制"></a>Mybatis的缓存机制</h2><ul><li>一级缓存位于sqlSession生命周期中，默认启用。在同一个sqlsession中查询时，Mybstia会把执行的方法和参数通过算法生成缓存的键值，将键值和查询结果存入一个map对象中。如果同一个sqlsession中执行的方法和参数完全一致，那么通过算法会生成相同的键值，所以当map缓存的对象中已经存在该键值时，则返回缓存中的对象。一级缓存只在数据库会话内部共享。如果两个SqlSession，一个修改，一个查询，查询的会查出脏数据。</li><li>通过刷新缓存设置flushCache = “true”会清空当前的一级缓存，这样两次相同的方法获取到的实例就不同了。这个方法清空了当前的一级缓存，会影响当前sqlsession中所有的缓存查询，因此在需要反复查询获取只读数据的情况下，会增加数据库的查询次数，所以要避免使用。<ul><li>一级缓存会被增删改、提交事务、关闭事务以及关闭 session 所清空。</li><li>缓存级别：SESSION或者STATEMENT，默认是SESSION级别，即在一个MyBatis会话中执行的所有语句，都会共享这一个缓存。一种是STATEMENT级别，可以理解为缓存只对当前执行的这一个Statement有效。建议使用Statement级别，避免读脏数据。<br>SqlSession： 对外提供了用户和数据库之间交互需要的所有方法，隐藏了底层的细节。默认实现类是DefaultSqlSession。<br>Executor： SqlSession向用户提供操作数据库的方法，但和数据库操作有关的职责都会委托给Executor。对Local Cache（其中PerpetualCache就是个HashMap）的查询和写入是在Executor内部完成的。实现类BaseExecutor的代码后发现    Local Cache是BaseExecutor内部的一个成员变量。<br>Cache：使用<strong>装饰器模式</strong>互相组装，提供丰富的操控缓存的能力</li></ul></li></ul><p>MyBatis二级缓存的工作流程和一级缓存类似，只是在一级缓存处理前，用CachingExecutor装饰了BaseExecutor的子类。本质上是装饰器模式的使用，具体的装饰链是：<br>SynchronizedCache -&gt; LoggingCache -&gt; SerializedCache -&gt; LruCache -&gt; PerpetualCache。</p><ul><li>二级缓存，可以理解为存在于sqlsessionfactory的生命周期中，二级缓存默认为开着的状态，初始状态为启用。二级缓存是和命名空间绑定的。所以一个mapper相当于用了一个sqlsessionFactory<ul><li>会使用CachingExecutor装饰Executor，进入一级缓存的查询流程前，先在CachingExecutor进行二级缓存的查询</li><li>二级缓存被多个SqlSession共享，是一个全局的变量。粒度更加的细。开启缓存后，数据的查询执行的流程就是 二级缓存 -&gt; 一级缓存 -&gt; 数据库。</li><li>在sqlSession3更新数据库，并提交事务后，sqlsession2的下的查询走了数据库，没有走Cache。</li><li>不适应用于映射文件中存在多表查询的情况。因为二级缓存是和namespace相关联的，所以感知不到另一个里的变化。可以使用Cache ref，但是缓存粒度变大了。</li></ul></li><li>二级缓存的的特点：<ul><li>MyBatis在多表查询时，极大可能会出现脏数据</li><li>映射文件的所有的select语句都将被缓存</li><li>映射文件的所有insert，delete，update都会刷新缓存</li><li>缓存会使用LRU最近最少使用算法来回收</li><li>根据时间表，缓存不会以任何时间顺序刷新</li><li>缓存会存储集合或者对象的1024个引用</li><li>缓存被视为read(可读)/write(可写)的，意味着对象检索不是共享的，而且可以安全的被调用者调用，而不干扰其他调用者或线程所做的修改。</li></ul></li><li>使用场景<ul><li>以查询为主的应用中，尽可能减少增删改查</li></ul></li></ul><h2 id="和-的区别是什么"><a href="#和-的区别是什么" class="headerlink" title="#{}和${}的区别是什么"></a>#{}和${}的区别是什么</h2><ol><li>#{}是预编译处理，是占位符方式，先预编译，然后填充参数，字符串格式。${}是字符串替换。 </li><li>Mybatis 在处理#{}时，会将 sql 中的#{}替换为?号，调用 PreparedStatement 的 set 方法 来赋值； </li><li>Mybatis 在处理${}时，就是把${}替换成变量的值。 </li><li>使用#{}可以有效的防止 SQL 注入，提高系统安全性。 </li></ol><h2 id="Mybatis-是否支持延迟加载？如果支持，它的实现原理是什么"><a href="#Mybatis-是否支持延迟加载？如果支持，它的实现原理是什么" class="headerlink" title="Mybatis 是否支持延迟加载？如果支持，它的实现原理是什么"></a>Mybatis 是否支持延迟加载？如果支持，它的实现原理是什么</h2><ol><li><p>Mybatis <strong>仅支持 association 关联对象和 collection 关联集合对象的延迟加载</strong>，association 指的就是一对一，collection 指的就是一对多查询。在ResultMap中配置前面的那个。在 Mybatis 配置文件中，可以配置是否 启用延迟加载 lazyLoadingEnabled=true|false。 </p><ul><li>延迟加载即先从单表查询、需要时再从关联表去关联查询。把关联查询分两次来做，第一步只查询单表orders，必然会查出orders中的一个user_id字段，然后我再根据这个user_id查user表，也是单表查询。</li></ul></li><li><p>它的原理是，使用 动态代理 创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用 a.getB().getName()，拦截器 invoke()方法发现 a.getB()是 null 值，那么就会单独发送事先保存好的查询关联 B 对象的 sql，把 B 查询上来，然后调用 a.setB(b)，于是 a 的 对象 b 属性就有值了，接着完成 a.getB().getName()方法的调用。这就是延迟加载的基本原理。 </p></li><li><p>总结就是：动态代理，当调用一个方法时，发现参数为空，就会先查找参数，然后设置值，最后查询数据库。</p></li></ol><h2 id="什么是-MyBatis-的接口绑定-有什么好处"><a href="#什么是-MyBatis-的接口绑定-有什么好处" class="headerlink" title="什么是 MyBatis 的接口绑定,有什么好处"></a>什么是 MyBatis 的接口绑定,有什么好处</h2><p>接口映射就是在 MyBatis 中任意定义接口, 然后把<strong>接口里面的方法和 SQL 语句绑定</strong>,我们直接调用接口方法就可以,这样比起原来了 SqlSession 提供的方法我们可以有更加灵活的选 择和设置</p><ul><li>注解绑定和xml绑定。</li></ul><h2 id="海量数据解决思路之BitMap"><a href="#海量数据解决思路之BitMap" class="headerlink" title="海量数据解决思路之BitMap"></a>海量数据解决思路之BitMap</h2><ul><li>一个int占4个字节32bit，我们可以用1bit存一个数据，一个int数据就可以表示32个数据了。</li><li>如何查找到这个数据对应的bit位置，首先 n/32 = x 这个数据会存在temp[x]的位置，而具体在32位的哪一位，n%32 就是所在的bit位。</li><li>java对应BitMap的数据结构就有BitSet类。可以用作于海量数据的统计工作，如日志分析，用户数统计等。</li></ul><h2 id="SpringMVC中的拦截器怎么实现的"><a href="#SpringMVC中的拦截器怎么实现的" class="headerlink" title="SpringMVC中的拦截器怎么实现的"></a>SpringMVC中的拦截器怎么实现的</h2><ul><li>SpringMVC中的Interceptor 拦截请求是通过HandlerInterceptor来实现的。在SpringMVC中定义一个Interceptor通常由两种方式</li><li>第一种要定义的Interceptor类要实现Spring的HandleInterceptor接口，或者是类继承实现了HandlerInterceptor接口的类，比如Spring 已经提供的实现了HandlerInterceptor 接口的抽象类HandlerInterceptorAdapter ；</li><li>第二种方式是实现Spring的WebRequestInterceptor接口，或者是继承实现了WebRequestInterceptor的类。</li><li>HandlerInterceptor接口 定义了三个方法，我们通过这三个方法来对用户的请求进行拦截处理。<ul><li>如果某个拦截器不放行，那么它的另外两个方法就不会被执行。</li><li>preHandle():这个方法在业务处理器处理请求之前被调用。该方法的返回值是boolean类型，为false时表示请求结束，后续的interceptor和controller都不会执行；当返回值为true时，就会继续调用下一个interceptor的preHandle方法，如果已经是最后一个拦截器，就会调用当前请求controller方法</li><li>postHandle()：这个方法在请求处理之后，也就是controler方法调用之后执行。但是他会在DispatcherServlet进行视图返回渲染之前被调用，所以我们在这个方法中可以对处理后的ModelAndView对象进行操作。postHandle方法调用的方向跟preHandle时相反的，先声明的会后被执行。</li><li>afterCompletion():该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。所以该方法是在整个请求结束之后，也就是dispatcherServlet渲染完对应的视图之后执行的。这个方法主要作用时用于进行资源的清理工作。也是倒序执行。统一异常处理，统一日志处理等。</li></ul></li></ul><p>WebRequest是 Spring 中定义的一个接口，它里面的方法定义跟HttpServletRequest类似，在WebRequestInterceptor中对WebRequest进行的所有操作都将同步到HttpServletRequest中，然后在当前请求中依次传递。</p><h2 id="JWT目前最流行的跨域身份解决问题"><a href="#JWT目前最流行的跨域身份解决问题" class="headerlink" title="JWT目前最流行的跨域身份解决问题"></a>JWT目前最流行的跨域身份解决问题</h2><img src="https://pic2.zhimg.com/80/v2-ed3e354747522c4cecb085cf1e9be299_hd.jpg"><p>首先，某 client 使用自己的账号密码发送 post 请求 login，由于这是首次接触，服务器会校验账号与密码是否合法，如果一致，则根据密钥生成一个 token 并返回，client 收到这个 token 并保存在本地。在这之后，需要访问一个受保护的路由或资源时，只要附加上 token（通常使用 Header 的 Authorization 属性）发送到服务器，服务器就会检查这个 token 是否有效，并做出响应。为了防止用户篡改数据，服务器将在生成对象时添加签名。服务器不保存任何会话数据，即服务器变为无状态，使其更容易扩展。</p><ul><li>JWT分为三部分组成。</li><li>JWT头：JWT头部分是一个描述JWT元数据的JSON对象,在下面的代码中alg属性标识签名使用的算法，默认为HMAC SHA256（写为HS256）；typ属性表示令牌的类型JWT令牌统一写为JWT，最后，使用Base64算法将上述JSON对象转换为字符串保存。</li></ul><pre class="line-numbers language-json"><code class="language-json">// Header&amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>// Payload&amp;#<span class="token number">123</span><span class="token punctuation">;</span>  // reserved claims  <span class="token property">"iss"</span><span class="token operator">:</span> <span class="token string">"a.com"</span><span class="token punctuation">,</span>  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token string">"1d"</span><span class="token punctuation">,</span>  // public claims  <span class="token property">"http://a.com"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  // private claims  <span class="token property">"company"</span><span class="token operator">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span>  <span class="token property">"awesome"</span><span class="token operator">:</span> <span class="token boolean">true</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>// $SignatureHS256(Base64(Header<span class="token punctuation">)</span> + <span class="token string">"."</span> + Base64(Payload<span class="token punctuation">)</span><span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span>// JWTJWT = Base64(Header<span class="token punctuation">)</span> + <span class="token string">"."</span> + Base64(Payload<span class="token punctuation">)</span> + <span class="token string">"."</span> + $Signature<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>有效荷载：是JWT的主体内容部分，也是一个JSON对象，包含需要传递的数据。 JWT指定七个默认字段供选择。iss:发行人；exp：到期时间，sub：主题，jti:JWT ID用于标识改JWT，aud：用户，我们还可以自定义私有的字段。默认情况下JWT是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露。JSON对象也使用Base64算法转换为字符串保存。</p></li><li><p>签名哈希：签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。需要指定一个密码（secret）。该密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用标头中指定的签名算法和具体的公式生成签名。</p></li><li><p>在计算出签名哈希后，JWT头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用”.”分隔，就构成整个JWT对象。</p></li></ul><p>服务端接收到 token 之后，会逆向构造过程，decode 出 JWT 的三个部分，这一步可以得到 sign 的算法及 payload，结合服务端配置的 secretKey，可以再次进行 $Signature 的生成得到新的 $Signature，与原有的 $Signature 比对以验证 token 是否有效，完成用户身份的认证，验证通过才会使用 payload 的数据。 </p><h3 id="JWT的问题和趋势"><a href="#JWT的问题和趋势" class="headerlink" title="JWT的问题和趋势"></a>JWT的问题和趋势</h3><p><strong>优点</strong><br>1、支持跨域验证，多应用于单点登录（在多个应用系统中，用户只需登陆一次，就可以访问所有相互信任的应用。）<br>2、体积小（一串字符串）。因而传输速度快<br>3、传输方式多样。可以通过 HTTP 头部（推荐）/URL/POST 参数等方式传输<br>4、充分依赖无状态 API ，契合 RESTful 设计原则（无状态的 HTTP：它要求客户端保存所有需要的认证信息，每次发请求都要带上自己的状态）<br>5、扩展性强，负载均衡器可以将用户传递到任意服务器。<br>6、JWT不仅可用于认证，还可用于信息交换。善用JWT有助于减少服务器请求数据库的次数。</p><p><strong>缺点</strong></p><ul><li>JWT默认不加密，但可以加密。生成原始令牌后，可以使用改令牌再次对其进行加密。</li><li>当JWT未加密方法是，一些私密数据无法通过JWT传输。</li><li>JWT的最大缺点是服务器不保存会话状态，所以在使用期间不可能取消令牌或更改令牌的权限。也就是说，一旦JWT签发，在有效期内将会一直有效。</li><li>JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用时应该每次都进行进行身份验证。</li><li>为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。</li><li>要将服务器设置为接受来自所有域的请求，用Access-Control-Allow-Origin: *</li></ul><h1 id="MySQL相关"><a href="#MySQL相关" class="headerlink" title="MySQL相关"></a>MySQL相关</h1><p>参考：<br><a href="https://www.nowcoder.com/discuss/150059?form=sx21">https://www.nowcoder.com/discuss/150059?form=sx21</a><br><a href="https://blog.nowcoder.net/n/67050afd11bf4d71bb8df3f84b04aa70">https://blog.nowcoder.net/n/67050afd11bf4d71bb8df3f84b04aa70</a><br><a href="https://blog.csdn.net/qq_41112238/article/details/103400224">https://blog.csdn.net/qq_41112238/article/details/103400224</a></p><h2 id="说下你对线程安全的理解"><a href="#说下你对线程安全的理解" class="headerlink" title="说下你对线程安全的理解"></a>说下你对线程安全的理解</h2><ul><li>多线程访问同一个对象，如果不需要考虑额外的同步，调用对象的行为就可以获得正确的结果就是线程安全</li></ul><h2 id="事务有哪些特性-ACID"><a href="#事务有哪些特性-ACID" class="headerlink" title="事务有哪些特性?(ACID)"></a>事务有哪些特性?(ACID)</h2><ul><li><p><strong>原子性（Atomicity）</strong>：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</p></li><li><p><strong>一致性（Consistency）</strong>：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。</p><ul><li>在转账之前，A和B的账户中共有500+500=1000元钱。在转账之后，A和B的账户中共有400+600=1000元。也就是说，<strong>数据的状态在执行该事务操作之后从一个状态改变到了另外一个状态</strong>。同时一致性还能保证账户余额不会变成负数等。</li><li>原子性的破坏可能导致数据库的不一致。</li></ul></li><li><p><strong>隔离性（Isolation）</strong>：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。</p></li><li><p><strong>持久性（Durability）</strong>：一个事务一旦提交，他对数据库的修改应该永久保存在数据库中。</p></li></ul><h2 id="数据库并发出现的问题（脏读啥的）"><a href="#数据库并发出现的问题（脏读啥的）" class="headerlink" title="数据库并发出现的问题（脏读啥的）"></a>数据库并发出现的问题（脏读啥的）</h2><ul><li><p><strong>脏读</strong>：读到未提交的数据。脏读又称无效数据的读出，是指在数据库访问中，当事务T1将某个值修改，还没有提交到数据库。然后事务T2读取该值，但T1最后撤销了对该值的修改，导致T2读取的数据是无效的。</p></li><li><p><strong>不可重复读</strong>：是指在数据库访问中，一个事务范围内两个相同的查询却返回了不同数据。这是由于查询时系统中其他事务修改的提交而引起的。比如事务T1读取某一数据，事务T2读取并修改了该数据，T1为了对读取值进行检验而再次读取该数据，便得到了不同的结果。</p><ul><li>使用行级锁，保证读的时候不能改。这样不会读到脏数据，但是并发性降低。</li><li>Innodb使用多版本并发控制，在可重复读条件下，总是读取事务开始时的版本。所以在一个事务范围内的两次查询结果相同。但是可能是脏数据啊。在这里可以加个版本，如果不一致的话就不更新。</li></ul></li><li><p><strong>幻读</strong>：新增或删除表中数据。当事务1两次执行SELECT … WHERE检索一定范围内数据的操作中间，事务2在这个表中创建了(如INSERT)了一行新数据，这条新数据正好满足事务1的“WHERE”子句。</p><ul><li><strong>幻读(phantom read)”是不可重复读(Non-repeatable reads)的一种特殊场景</strong>：当事务没有获取范围锁的情况下执行SELECT … WHERE操作可能会发生“幻影读(phantom read)”。</li><li>产生幻读的原因是事务一在进行范围查询的时候没有<strong>增加范围锁</strong>(range-locks：给SELECT 的查询中使用一个“WHERE”子句描述范围加锁），所以导致幻读。</li><li>使用表级锁。</li><li>Innodb通过用Next-Key-Lock算法避免幻读问题，对于索引的扫描，不仅锁住扫描到的索引，而且还锁住这些索引覆盖的范围，默认在可重复读隔离级别使用这个算法。</li></ul></li></ul><p>幻读现象：<br>1.事务一的第一次查询条件是age BETWEEN 10 AND 30;如果这是有十条记录符合条件。这时，他会给符合条件的这十条记录增加行级共享锁。任何其他事务无法更改这十条记录。</p><p>2.事务二执行一条sql语句，语句的内容是向表中插入一条数据。因为此时没有任何事务对表增加表级锁，所以，该操作可以顺利执行。</p><p>3.事务一再次执行SELECT * FROM users WHERE age BETWEEN 10 AND 30;时，结果返回的记录变成了十一条，比刚刚增加了一条，增加的这条正是事务二刚刚插入的那条。</p><ul><li><strong>第一类丢失更新</strong>：A事务撤销时覆盖了B事务已经提交的数据。</li><li><strong>第二类丢失更新</strong>：A事务提交时覆盖了B事务已经提交的数据。<ul><li>对于先查询再更新的操作，可以先select..for update，然后再更新。</li></ul></li></ul><p><strong>总的来说，可以提高事务的隔离级别 + 用锁</strong></p><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>当多个事务同时处理同一个数据的时候，多个事务直接是互不影响的，所以，在多个事务并发操作的过程中，如果控制不好隔离级别，就有可能产生脏读、不可重复读或者幻读等读现象。</p><p>可以在数据操作过程中利用数据库的锁机制或者多版本并发控制机制获取更高的隔离等级。但是，随着数据库隔离级别的提高，数据的并发能力也会有所下降。</p><p>隔离级别有四种，从高到底依次为：可序列化(Serializable)、可重复读(Repeatable reads)、提交读(Read committed)、未提交读(Read uncommitted)。</p><ul><li><p><strong><code>读未提交</code></strong>：一个事务可以读到另外一个事务未提交的数据。</p><ul><li><strong>会导致脏读</strong>。</li><li>事务在读数据的时候并未对数据加锁。<strong>务在修改数据的时候只对数据增加行级共享锁。</strong></li></ul></li><li><p><strong><code>读已提交</code></strong>：一个事务可以读到另外一个事务已经提交的数据。</p><ul><li>事务对当前被读取的数据<strong>加 行级共享锁</strong>（当读到时才加锁），一旦<strong>读完该行，立即释放</strong>该行级共享锁；</li><li>事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加 <strong>行级排他锁</strong>，直到<strong>事务结束才释放</strong>。</li><li><strong>解决了脏读问题</strong>，</li><li>不能解决不可重复读的读现象。因为A事务两个读取，每次都是在读取的时候加锁并释放，不能保证整个事务。下一个级别就是读取也要事务结束了。</li></ul></li><li><p><strong><code>可重复读</code></strong>：由于 读已提交 隔离级别 会产生不可重复读的读现象。所以，比提交读更高一个级别的隔离级别就可以解决不可重复读的问题。</p><ul><li>事务在读取某数据的瞬间（就是开始读取的瞬间），必须先对其<strong>加 行级共享锁</strong>，直到<strong>事务结束才释放</strong>；</li><li>事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其<strong>加 行级排他锁，</strong>直到<strong>事务结束才释放</strong>。</li></ul></li><li><p><strong><code>可序列化</code></strong> : 解决了脏读、不可重复读、幻读等读现象。主要用于MySQL的分布式事务</p><ul><li>事务在读取数据时，必须先对其加 表级共享锁 ，直到事务结束才释放；</li><li>事务在更新数据时，必须先对其加 表级排他锁 ，直到事务结束才释放。</li><li>3.在当前事务完成之前，其它事务所插入的新记录，其索引键值不能在当前事务的任何语句所读取的索引键范围中。<br><code>select @@transaction_isolation;</code><br><code>set global transaction_isolation =&#39;read-committed&#39;;</code></li></ul></li></ul><p><strong>InnoDB存储引擎在默认的repeatable-read隔离级别下，使用next-key-lock算法，已经可以保证事务的隔离级别要求。达到了串行化的隔离级别。</strong></p><p><strong>互联网中一般用rc级别</strong></p><ol><li>在RR隔离级别下，存在间隙锁，导致出现死锁的几率比RC大的多！</li><li>在RR隔离级别下，条件列未命中索引会锁表！而在RC隔离级别下，只锁行。在聚簇索引扫描时，rc会释放扫描不符合的锁，rr会锁扫描过的所有。</li><li>在RC隔离级别下，半一致性读(semi-consistent)特性增加了update操作的并发性！<ul><li>半一致性读就是，一个update语句，如果读到一行已经加锁的记录，此时InnoDB返回记录最近提交的版本，由MySQL上层判断此版本是否满足update的where条件。若满足(需要更新)，则MySQL会重新发起一次读操作，此时会读取行的最新版本(并加锁)！</li></ul></li><li>在RC级别下，不可重复读问题不需要解决，因为不影响啊</li><li>在RC级别下，主从复制用的binlog为row格式，是基于行的复制</li></ol><h2 id="数据库的锁机制"><a href="#数据库的锁机制" class="headerlink" title="数据库的锁机制"></a>数据库的锁机制</h2><ul><li><p>锁是在执行多线程时用于强行限制资源访问的同步机制</p></li><li><p>封锁、时间戳、乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。</p></li></ul><p><strong>锁的分类(oracle)</strong></p><ul><li><p>一、按操作划分，可分为DML锁、DDL锁</p></li><li><p>二、按锁的粒度划分，可分为表级锁、行级锁、页级锁（mysql）</p></li><li><p>三、按锁级别划分，可分为共享锁、排他锁</p></li><li><p>四、按加锁方式划分，可分为自动锁、显示锁</p></li><li><p>五、按使用方式划分，可分为乐观锁、悲观锁</p></li></ul><p>DML锁（data locks，数据锁），用于保护数据的完整性，其中包括行级锁，表级锁。 DDL锁（dictionary locks，数据字典锁），用于保护数据库对象的结构，如表、索引等的结构定义。其中包排他DDL锁、共享DDL锁、可中断解析锁</p><h2 id="MySQL中的行级锁-表级锁-页级锁"><a href="#MySQL中的行级锁-表级锁-页级锁" class="headerlink" title="MySQL中的行级锁,表级锁,页级锁"></a>MySQL中的行级锁,表级锁,页级锁</h2><ul><li><p>按照锁的粒度把数据库锁分为行级锁(INNODB引擎)、表级锁(MYISAM引擎)和页级锁(BDB引擎 )。</p></li><li><p><strong>行级锁</strong>是Mysql中锁定粒度最细的一种锁，表示只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。行级锁分为共享锁 和 排他锁。</p><ul><li>开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</li></ul></li><li><p><strong>表级锁</strong>是MySQL中锁定粒度最大的一种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少。MYISAM与INNODB都支持表级锁定。</p><ul><li>分为表共享读锁（共享锁）与表独占写锁（排他锁）。</li><li>开销小，加锁快；不会出现死锁；锁定粒度大，发出锁冲突的概率最高，并发度最低。</li></ul></li><li><p><strong>页级锁</strong>是MySQL中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。BDB支持页级锁。</p><ul><li>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</li></ul></li></ul><p><strong>MySQL常用存储引擎的锁机制</strong></p><blockquote><p>MyISAM和MEMORY采用表级锁(table-level locking)<br>BDB采用页面锁(page-level locking)或表级锁，默认为页面锁<br>InnoDB支持行级锁(row-level locking)和表级锁,默认为行级锁</p></blockquote><p><strong>一致性非锁定读：在读已提交隔离级别下，总是读取最新的快照版本，可重复读级别，总是读取事务开始时的数据。行多版本技术。</strong></p><p><strong>行锁的三个算法：</strong><br>Record Lock ：单个记录上的锁。<br>Gap Lock：间隙锁，不包含记录本身。<br>Next-Key-Lock：上面两个的结合。例如一个索引有10,11,13,20，则可能的区间是</p><pre><code>(负无穷，10], (10,11],(11,13],(13,20],(20,正无穷)，主要是为了解决幻读。</code></pre><p>当查询的索引有唯一属性时，会变成记录锁。仅锁住索引本身。不是范围。<br>如果是辅助索引，就不但锁住当前索引所在的那个范围，还会对辅助索引下一个键值加上gap Lock</p><h2 id="Innodb中的行锁与表锁"><a href="#Innodb中的行锁与表锁" class="headerlink" title="Innodb中的行锁与表锁"></a>Innodb中的行锁与表锁</h2><ul><li>InnoDB行锁是通过给索引上的索引项加锁来实现的, <strong>意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！</strong></li></ul><p><strong>InnoDB锁的特性</strong></p><ol><li><p>在不通过索引条件查询的时候,InnoDB 确实使用的是表锁,而不是行锁。</p></li><li><p>由于 MySQL 的行锁是针对索引加的锁,不是针对记录加的锁,所以虽然是访问不同行 的记录,但是<strong>如果是使用相同的索引键,是会出现锁冲突的</strong>。应用设计的时候要注意这一点。</p></li><li><p>当表有多个索引的时候,不同的事务可以使用不同的索引锁定不同的行,另外,不论 是使用主键索引、唯一索引或普通索引,InnoDB 都会使用行锁来对数据加锁。</p></li><li><p>即便在条件中使用了索引字段,但是否使用索引来检索数据是由 MySQL 通过判断不同 执行计划的代价来决定的,如果 MySQL 认为全表扫 效率更高,比如对一些很小的表,它 就不会使用索引,这种情况下 InnoDB 将使用表锁,而不是行锁。因此,在分析锁冲突时, 别忘了<strong>检查 SQL 的执行计划,以确认是否真正使用了索引</strong>。</p></li></ol><p><strong>行级锁和死锁</strong><br>1、MyISAM中是不会产生死锁的，因为MyISAM总是一次性获得所需的全部锁，要么全部满足，要么全部等待。而在InnoDB中，锁是逐步获得的，就造成了死锁的可能。</p><p>2、在MySQL中，行级锁并不是直接锁记录，而是锁索引。索引分为主键索引和非主键索引两种，如果一条sql语句操作了主键索引，MySQL就会锁定这条主键索引；如果一条语句操作了非主键索引，MySQL会先锁定该非主键索引，再锁定相关的主键索引。 <strong>在UPDATE、DELETE操作时，MySQL不仅锁定WHERE条件扫描过的所有索引记录，而且会锁定相邻的键值，即所谓的next-key locking。</strong></p><ul><li>当两个事务同时执行，一个锁住了主键索引，在等待其他相关索引。另一个锁定了非主键索引，在等待主键索引。这样就会发生死锁。</li></ul><p>4、发生死锁后，InnoDB一般都可以检测到，并使一个事务释放锁回退，另一个获取锁完成事务。</p><p><strong>避免死锁的方法</strong><br>1、如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会。<br>2、在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率；<br>3、对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率；</p><h2 id="MySQL中的共享锁与排他锁"><a href="#MySQL中的共享锁与排他锁" class="headerlink" title="MySQL中的共享锁与排他锁"></a>MySQL中的共享锁与排他锁</h2><p>行级锁分为共享锁和排他锁两种。</p><p>1、共享锁又是读锁。<br>   <code>SELECT ... LOCK IN SHARE MODE;</code></p><p>  <code>在查询语句后面增加LOCK IN SHARE MODE</code>，Mysql会对查询结果中的<code>每行都加共享锁</code>，当没有其他线程对查询结果集中的任何一行使用排他锁时，可以成功申请共享锁，否则会被阻塞。其他线程也可以读取<code>使用了共享锁的表</code>，而且这些线程读取的是同一个版本的数据。</p><p>2、排他锁又是写锁</p><p><code>SELECT ... FOR UPDATE;</code></p><p><code>在查询语句后面增加FOR UPDATE</code>，Mysql会对查询结果中的每行都加排他锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，可以成功申请排他锁，否则会被阻塞。</p><p>3、意向锁</p><ul><li>意向锁是表级锁，其设计目的主要是为了在一个事务中揭示下一行将要被请求锁的类型。InnoDB中的两个表锁：<ul><li>意向共享锁（IS）：表示事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须先取得该表的IS锁</li></ul></li></ul><ul><li>意向排他锁（IX）：类似上面，表示事务准备给数据行加入排他锁，说明事务在一个数据行加排他锁前必须先取得该表的IX锁。</li></ul><p><strong>意向锁是InnoDB自动加的，不需要用户干预。</strong></p><p><code>对于insert、update、delete，InnoDB会自动给涉及的数据加排他锁（X）；对于一般的Select语句，InnoDB不会加任何锁，事务可以通过以下语句给显示加共享锁或排他锁。</code></p><ul><li>共享锁：SELECT … LOCK IN SHARE MODE;</li><li>排他锁：SELECT … FOR UPDATE;</li></ul><h2 id="数据库的乐观锁悲观锁"><a href="#数据库的乐观锁悲观锁" class="headerlink" title="数据库的乐观锁悲观锁"></a>数据库的乐观锁悲观锁</h2><p>1、 悲观锁：认为每次修改数据都会有冲突，所以要提前加锁。“先取锁再访问”的保守策略。数据库实现：在对任意记录进行修改前，先尝试为该记录加上排他锁。</p><ul><li>悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。</li><li>要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;<ul><li>先用select…for update把数据给锁住（基于排他锁实现悲观锁），但是要注意如果不是索引，则变成表锁，这个就没用了。</li></ul></li><li>缺点：加锁产生额外的开销，容易产生死锁，对于读操作不需要加锁也加了，并发性低。但是比较安全</li></ul><p>2、乐观锁：它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。</p><ul><li>相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。<ul><li>当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。</li><li>实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。</li></ul></li><li>版本号方法遇上高并发时会出现大量失败，可以使用这个语句。通过quantity – 1 &gt; 0的方式进行乐观锁控制。<ul><li><code>update item set quantity=quantity - 1 where id = 1 and quantity - 1 &gt; 0</code></li><li>乐观锁优点：不会产生任何锁和死锁。乐观锁并未真正加锁，效率高。一旦锁的粒度掌握不好，更新失败的概率就会比较高，容易发生业务失败。悲观锁依赖数据库锁，效率低。更新失败的概率比较低。</li></ul></li></ul><h2 id="InnoDB的关键特性"><a href="#InnoDB的关键特性" class="headerlink" title="InnoDB的关键特性"></a>InnoDB的关键特性</h2><ol><li>插入缓冲，对于索引是辅助索引（就是插入不按着顺序），索引不唯一，同时满足这两个条件。内部是一个B+树。如果要插入的索引页不在缓冲池中，则插入到这个插入缓冲，然后异步同步到辅助索引里边。</li><li>两次写，一个写缓冲池，一个共享表，都是用来存储页。当进行脏页刷新时，不直接写磁盘，而是先复制到2MB的写缓冲里边，然后分两次，每次1MB写入共享表空间的物理磁盘上，然后马上同步磁盘。这样子共享表里边就有页的副本，发生故障时可以先把页复制到表空间，然后再重做日志。</li><li>自适应哈希索引，根据热点数据构建一个hash表</li><li>异步IO<ul><li>主要为了同时查询多个索引页，</li><li>还可以在刷新邻接页时用一次IO操作替代原来的很多次IO。会判断三个页是连续的，成为一次IO。</li></ul></li><li>刷新邻接页。刷新一个页时，检查它所在区的其它页是否是脏的。内存页数据和磁盘页数据不一样。</li></ol><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul><li><p>共享表空间文件和独立表空间文件（数据，索引，插入缓冲）</p></li><li><p>重做日志：先写入重做日志缓冲，从缓冲往磁盘写入时是按512字节，也就是一个扇区的大小，因为扇区是最小的写入单位，可以保证写入成功，不需要两次写。</p><ul><li>一般插入时，先写重做日志，再修改页。不管事务是否提交都会记录下来，如数据库掉电，InnoDB存储引擎会使用redo log恢复到掉电前的时刻，以此来保证数据的完整性。</li><li>确保事务的持久性。防止在发生故障的时间点，尚有脏页未写入磁盘，在重启mysql服务的时候，根据redo log进行重做，从而达到事务的持久性这一特性。</li><li>它具有幂等性，因此记录日志的方式极其简练。幂等性的意思是多次操作前后状态是一样的，例如新插入一行后又删除该行，前后状态没有变化。</li></ul></li><li><p>Cardinality,表示一个列的选择性，如果是性别，选择性就很低，索引没啥作用。</p></li><li><p>回滚日志：保存了事务发生之前的数据的一个版本，可以用于回滚，同时可以提供多版本并发控制下的读（MVCC），也即非锁定读</p></li></ul><h2 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h2><ul><li>扁平事务：只能提交或回滚事务的全部。</li><li>带有保存点的扁平事务：可以回滚或提交到事务的保存点。允许事务执行中回滚到同一事务中较早的一个状态。保存点会计数，递增，即使回滚了，也要递增。保存点不是持久的，系统崩溃</li><li>链事务</li><li>嵌套事务</li><li>分布式事务</li></ul><p>事务的隔离性由锁实现，redo保证原子性和持久性（恢复提交事务修改的页操作，通常是物理日志，记录的是页的物理修改操作），undo（用来回滚行记录到某个特定版本，是逻辑日志，根据每行记录进行记录，事务回滚和MVCC，事务结束就不需要了），保证一致性。</p><h2 id="mysql面试"><a href="#mysql面试" class="headerlink" title="mysql面试"></a>mysql面试</h2><ol><li><p>如果一个表中有自增主键ID，当insert17条记录后，删除第15,16,17条记录，再重启MySQL，再insert一条记录，这条记录的ID是18还是15？<br>答：如果是MyISAM，ID是18.因为MyISAM会把自增主键的最大ID记录到数据文件里，重启MySQL自增主键的最大ID也不会丢失。<br>若果是InnoDB，ID是15.因为InnoDB只会把自增主键的最大ID记录到内存中，重启数据库会导致最大ID丢失。</p></li><li><p>存储过程</p><ul><li>就是一些编译好了的SQL语句，这些SQL语句代码像一个方法一样实现一些功能，然后给这些代码块取一个名字，在用到这个功能的时候调用即可。</li><li>优点：执行效率比较高，只需要创建一次，然后就可以随时在任何地方使用，可以替代大量SQL语句。</li><li>缺点：调试麻烦（没有像开发程序那样容易），可移植性不灵活（因为存储过程依赖于具体的数据库）</li></ul></li></ol><h2 id="用户级线程和内核级线程的区别"><a href="#用户级线程和内核级线程的区别" class="headerlink" title="用户级线程和内核级线程的区别"></a>用户级线程和内核级线程的区别</h2><ul><li>内核支持线程是OS内核可感知的，而用户级线程是OS内核不可感知的。</li><li>用户级线程的创建、撤消和调度不需要OS内核的支持。</li><li>用户级线程发生系统调用阻塞会导致它所在的进程阻塞。</li><li>用户级线程执行系统调用指令时将导致其所属进程被中断，而内核支持线程执行系统调用指令时，只导致该线程被中断。</li><li>在只有用户级线程的系统内，CPU调度还是以进程为单位，处于运行状态的进程中的多个线程，由用户程序控制线程的轮换运行；在有内核支持线程的系统内，CPU调度则以线程为单位，由OS的线程调度程序负责线程的调度。</li></ul><h2 id="重做日志，二进制日志，undo-log"><a href="#重做日志，二进制日志，undo-log" class="headerlink" title="重做日志，二进制日志，undo log"></a>重做日志，二进制日志，undo log</h2><p>重做日志：保证事务的原子性，持久性，在Innodb存储引擎层产生，记录对于每个页的修改。在事务进行中不断写入，顺序是一致的。写入是并发的，并非是事务开始的顺序。重做日志都是以512字节进行存储的<br>undo log：保证事务的一致性。主要是回滚操作，<br>二进制日志：用于主从复制。每个数据库都有这个，记录对应的SQL语句。在事务提交时一次写入。<br>慢查询日志：用于记录比较慢的SQL语句。</p><h2 id="怎么理解原子性"><a href="#怎么理解原子性" class="headerlink" title="怎么理解原子性?"></a>怎么理解原子性?</h2><p>事务就是一个操作序列。</p><p>同一个事务下，多个操作要么成功要么失败，不存在部分成功或者部分失败的情况</p><h2 id="MySQL的分布式事务"><a href="#MySQL的分布式事务" class="headerlink" title="MySQL的分布式事务"></a>MySQL的分布式事务</h2><p>必须设置隔离级别为串行化。<br>外部分布式事务：主要是有多个数据库，然后通过事务管理器管理<br>内部分布式事务：主要是二进制日志和重做日志的写入，它俩必须是原子操作。如果数据库宕机了，重做日志没有写入，但是二级制日志写入了，发生数据不一致。所以加了一个InnoDB Prepare阶段，加了分布式事务。事务提交时，先做prepare阶段，然后写二级制，如果提交前宕机了，就不会发生数据不一致。</p><ul><li>在应用程序中最好手动控制事务的开始，提交，回滚。</li></ul><h2 id="MySQL的count-函数"><a href="#MySQL的count-函数" class="headerlink" title="MySQL的count()函数"></a>MySQL的count()函数</h2><ul><li>主要用法有COUNT(*)、COUNT(字段)和COUNT(1)。</li><li>count(*)和COUNT(1)会把字段是null的记录也算上，字段只计算非空的。</li><li>count(*)是标准语法。COUNT(星)和COUNT(1)效率一样。</li><li>在没有where和group条件下，MyISAM会缓存记录总数，InnoDB会使用非聚簇索引（非主键索引）。</li><li>字段会全表扫描并判断是否空。</li></ul><h2 id="char和varchar，char-length和Length函数"><a href="#char和varchar，char-length和Length函数" class="headerlink" title="char和varchar，char_length和Length函数"></a>char和varchar，char_length和Length函数</h2><ul><li>在不同的字符集下，char类型存储长度不一样。</li><li>char(n),这个n代表字符数，在uft8编码下，char(10)，最少可以存10字节的字符，最大可以存30字节的字符。</li><li>char_length: 字符数，length函数：字节数。</li><li>CHAR列的长度固定为创建表时声明的长度。长度可以为从0到255的任何值。当保存CHAR值时，在它们的右边填充空格以达到指定的长度。当检索到CHAR值时，尾部的空格被删除掉。在存储或检索过程中不进行大小写转换。</li><li>VARCHAR列中的值为可变长字符串。长度可以指定为0到65535之间的值。</li><li>在MySQL 4.1之前的版本，VARCHAR(50)的“50”指的是50字节（bytes）。如果存放UTF8汉字时，那么最多只能存放16个（每个汉字3字节）。从MySQL 4.1版本开始，VARCHAR(50)的“50”指的是50字符（character），无论存放的是数字、字母还是UTF8汉字（每个汉字3字节），都可以存放50个。</li><li>在进行检索的时候，若列值的尾部含有空格，则CHAR列会删除其尾部的空格，而VARCHAR则会保留空格。</li></ul><h2 id="drop，truncate，delete区别"><a href="#drop，truncate，delete区别" class="headerlink" title="drop，truncate，delete区别"></a>drop，truncate，delete区别</h2><ul><li>表和索引所占空间。当表被TRUNCATE 后，这个表和索引所占用的空间会恢复到初始大小，而DELETE操作不会减少表或索引所占用的空间。drop语句将表所占用的空间全释放掉。</li><li>delete语句为DML,这个操作会被放到 rollback segment中,事务提交后才生效。</li><li>truncate、drop是DLL,操作立即生效，原数据不放到 rollback segment中，不能回滚</li></ul><h2 id="什么是临时表，什么时候删除"><a href="#什么是临时表，什么时候删除" class="headerlink" title="什么是临时表，什么时候删除"></a>什么是临时表，什么时候删除</h2><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><h2 id="内连接，外连接，交叉连接"><a href="#内连接，外连接，交叉连接" class="headerlink" title="内连接，外连接，交叉连接"></a>内连接，外连接，交叉连接</h2><h2 id="事务的概念和用法"><a href="#事务的概念和用法" class="headerlink" title="事务的概念和用法"></a>事务的概念和用法</h2><p>事务就是一个操作序列。通过禁止自动提交开启事务。<br>设置auto-commit=0，然后start truncation，和commit组合使用。</p><h2 id="关联查询，分页查，效率优化"><a href="#关联查询，分页查，效率优化" class="headerlink" title="关联查询，分页查，效率优化"></a>关联查询，分页查，效率优化</h2><h2 id="约束和索引的区别"><a href="#约束和索引的区别" class="headerlink" title="约束和索引的区别"></a>约束和索引的区别</h2><p>当用户创建了一个唯一索引就创建了一个约束。但是约束是保证数据完整性的，索引是一个数据结构，还有着物理存储。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>使用：create/drop index indexName on tableName。或者alter table tblName add KEY idxname(colname,colname)。</p><p>通过查找B+树索引找到数据行所在的页，然后把页读到内存中，再在内存中进行查找，最后得到数据。只在叶子节点存放数据。</p><p>InnoDB索引和MyISAM索引的区别：</p><p>一是主索引的区别，InnoDB的数据文件本身就是索引文件。而MyISAM的索引和数据是分开的。</p><p>二是辅助索引的区别：InnoDB的辅助索引data域存储相应记录主键的值而不是地址。而MyISAM的辅助索引和主索引没有多大区别。</p><p>1、B+树索引</p><ul><li><p>聚集索引（主键索引），按主键构造B+树，同时叶节点存储整张表的行记录数据，叶子节点也叫数据页，每个数据页通过双向链表链接。每个表只有一个聚集索引。排序查找和范围查找快。</p></li><li><p>辅助索引（非聚集索引，非主键索引），叶子节点不包含行记录的全部数据，包含了一个书签，告诉哪里可以找到与索引对应的行数据。书签就是相应行数据的聚集索引键，去聚集索引里边找。可以有多个辅助索引。</p></li><li><p>应用</p><ul><li>联合索引：对表上的多个列进行索引。第一个列是有序排的，第二个不是，索引不能单独使用第二列查询。每个叶节点内数据是有序的，所以使用索引时中间如果少了某一列，则索引失效。使用filesort排序</li><li>覆盖索引：从辅助索引中就可以得到查询的记录，而不需要查询聚集索引中的记录。辅助索引空间小，精悍，一般cout(*)会用。</li><li>索引失效的情况：范围查找和Join连接等会失效。</li></ul></li></ul><p>2、自适应哈希索引：只用用来搜索等值的查询，范围查找不能用。</p><p>3、全文索引：例如like查询，B+树不可以，通常用倒排索引实现，在辅助表存储单词和单词自身在一个或多个文档中所在位置之间的映射。一个单词字段，一个位置信息。<code>select * from tbl where match(body) against(&#39;lala&#39;)</code></p><h2 id="复制和备份"><a href="#复制和备份" class="headerlink" title="复制和备份"></a>复制和备份</h2><p>快照：就是利用写时复制的原理，把数据库某一页的数据复制一下。</p><p>复制</p><ol><li>主服务器把数据更改记录到二进制日志。</li><li>从服务器把主服务器的二进制日志复制到自己的中继日志。</li><li>从服务器重做中继日志中的日志。是一个异步的。</li></ol><ul><li>好处：读取的负载平衡，数据库备份。高可用和故障转移。</li></ul><p>备份</p><ol><li>对从服务器上的数据库所在分区做一个快照，避免误删除操作对数据库造成影响。只需要把从服务器上的快照进行恢复，然后根据二进制日志进行恢复就可以了。</li></ol><h2 id="mysql-中-myisam-与-innodb-的区别？"><a href="#mysql-中-myisam-与-innodb-的区别？" class="headerlink" title="mysql 中 myisam 与 innodb 的区别？"></a>mysql 中 myisam 与 innodb 的区别？</h2><ol><li><p>事务支持 </p><ul><li>MyISAM ：强调的是性能，每次查询具有原子性 , 其执行数 度比 InnoDB 类型更快，但是不提供事务支持。 </li><li>InnoDB：支持事务，外部键等高级数据库功能。 具有事务(commit)、回滚 (rollback)和崩溃修复能力。</li></ul></li><li><p>InnoDB 支持行级锁，而 MyISAM 支持表级锁.</p><ul><li>用户在操作 myisam 表时，select，update，delete，insert 语句都会给表自动加锁，如果加锁以后的表满足 insert 并发的情况下，可以在表的尾部插入新的数据。 </li></ul></li><li><p>InnoDB 支持 MVCC, 而 MyISAM 不支持 </p></li><li><p>InnoDB 支持外键，而 MyISAM 不支持 </p></li><li><p>表主键 </p><ul><li>MyISAM ：允许没有任何索引和主键的表存在，索引都是保存行的地址。 </li><li>InnoDB：如果没有设定主键或者非空唯一索引，就会 自动生成一个 6 字节的主键(用户不可见)，数据是主索引的一部分，附 加索引保存的是主索引的值。 </li></ul></li><li><p>可移植性、备份及恢复 </p><ul><li>MyISAM ：数据是以文件的形式存储，所以 在跨平台的数据转移中会很方便。在备份和恢复时可单独针对某个表进 行操作。</li><li>InnoDB：免费的方案可以是拷贝数据文件、备份 binlog，或者用 mysqldump，在数据量达到几十 G 的时候就相对痛苦了 </li></ul></li><li><p>存储结构 </p><ul><li>MyISAM ：每个 MyISAM 在磁盘上存储成三个文件。第一 个文件的名字以表的名字开始，扩展名指出文件类型。 .frm 文件存储表 定义。数据文件的扩展名为 .MYD (MYData) 。索引文件的扩展名 是 .MYI (MYIndex) 。 </li><li>InnoDB：所有的表都保存在同一个数据文件 中（也可能是多个文件，或者是独立的表空间文件），InnoDB 表的大 小只受限于操作系统文件的大小，一般为 2GB。 </li></ul></li></ol><h2 id="HAVNG-子句-和-WHERE-的异同点"><a href="#HAVNG-子句-和-WHERE-的异同点" class="headerlink" title="HAVNG 子句 和 WHERE 的异同点?"></a>HAVNG 子句 和 WHERE 的异同点?</h2><ol><li>语法上：where 用表中列名，having 用 select 结果别名 </li><li>影响结果范围：where 从表读出数据的行数，having 返回客户端的行数 </li><li>索引：where 可以使用索引，having 不能使用索引，只能在临时结果集操作 </li><li>where 后面不能使用聚集函数，having 是专门使用聚集函数的。 </li></ol><h1 id="MQ相关"><a href="#MQ相关" class="headerlink" title="MQ相关"></a>MQ相关</h1><h2 id="几种中间件对比"><a href="#几种中间件对比" class="headerlink" title="几种中间件对比"></a>几种中间件对比</h2><img src="http://img3.tbcdn.cn/5476e8b07b923/TB1drnMPVXXXXXIaXXXXXXXXXXX"><ol><li><p>解耦：解耦是消息队列要解决的最本质问题。</p></li><li><p>最终一致性：最终一致性指的是两个系统的状态保持一致，要么都成功，要么都失败。最终一致性不是消息队列的必备特性，但确实可以依靠消息队列来做最终一致性的事情。</p></li><li><p>广播消息队列的基本功能之一是进行广播。有了消息队列，我们只需要关心消息是否送达了队列，至于谁希望订阅，是下游的事情，无疑极大地减少了开发和联调的工作量。</p></li><li><p>错峰与流控：典型的使用场景就是秒杀业务用于流量削峰场景。</p></li><li><p>ActiveMQ</p><ul><li>优点<ul><li>单机吞吐量：万级</li><li>topic数量都吞吐量的影响：</li><li>时效性：ms级</li><li>可用性：高，基于主从架构实现高可用性</li><li>消息可靠性：有较低的概率丢失数据</li><li>功能支持：MQ领域的功能极其完备</li></ul></li></ul></li><li><p>Kafka: Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生大量数据的互联网服务的数据收集业务。</p><ul><li>单机吞吐量：10万级</li><li>性能卓越，单机写入TPS约在百万条/秒，最大的优点，就是吞吐量高。</li><li>时效性：ms级</li><li>消费者采用Pull方式获取消息, 消息有序, 通过控制能够保证所有消息被消费且仅被消费一次;<br>缺点：消费失败不支持重试；支持消息顺序，但是一台代理宕机后，就会产生消息乱序；</li></ul></li><li><p>Rabbitmq</p><ul><li>吞吐量到万级，MQ功能比较完备</li><li>实现机制比较重，吞吐量较低。</li></ul></li><li><p>RocketMq：经历了双11的洗礼，厉害</p><ul><li>单机吞吐量：十万级</li><li>可用性：非常高，分布式架构</li><li>消息可靠性：经过参数优化配置，消息可以做到0丢失</li><li>功能支持：MQ功能较为完善，还是分布式的，扩展性好</li><li>支持10亿级别的消息堆积，不会因为堆积导致性能下降</li></ul></li></ol><img src="https://pic1.zhimg.com/80/v2-87643ff65973d1860f1ab6919f4b0aa4_hd.jpg"><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p><a href="https://zhuanlan.zhihu.com/p/61130442">https://zhuanlan.zhihu.com/p/61130442</a></p><img src="https://mmbiz.qpic.cn/mmbiz_png/UicsouxJOkBfBGPvWib6iaEWBuJySPwj8icMsM3A7m3XM2ibhG7prGhYnzBI5b3SlceiavhUASV9j3CGyXznCEZHicvAA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"><img src="https://mmbiz.qpic.cn/mmbiz_png/UicsouxJOkBfBGPvWib6iaEWBuJySPwj8icMEwK9ibvP9iciarG1ia72MLtSRLQZoUuTpm8KuuGNJa4Zz5jAoBsG93vVibg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"><h3 id="几个队列概念"><a href="#几个队列概念" class="headerlink" title="几个队列概念"></a>几个队列概念</h3><p><strong>1、延迟队列，死信队列，延迟消费。Dead-Letter-Exchange，可以称之为死信交换器，这个来实现。</strong></p><ul><li>通过在 channel.queueDeclare 方法中设置 x-dead-letter-exchange 参数来为这 个队列添加 DLX。<img src="https://img-blog.csdnimg.cn/2019072813195848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1ODA5MQ==,size_16,color_FFFFFF,t_70"></li></ul><p>2、优先级队列。</p><ul><li>通过设置队列的 x-max-priority 参数来实现，如果消费者速度很快，就没啥意义了。<pre><code>Map&lt;String, Object&gt; args = new HashMap&lt;String, Object&gt;() ;args.put( &quot;x-max-priority&quot; , 10) ;</code></pre></li></ul><h3 id="如何保证消息的可靠性，消息不丢失"><a href="#如何保证消息的可靠性，消息不丢失" class="headerlink" title="如何保证消息的可靠性，消息不丢失"></a>如何保证消息的可靠性，消息不丢失</h3><p><strong>1.生产者生产消息到RabbitMQ Server 消息丢失场景</strong><br>1） 外界环境问题导致：发生网络丢包、网络故障等造成RabbitMQ Server端收不到消息，因为生产环境的网络是很复杂的，网络抖动，丢包现象很常见，下面会讲到针对这个问题是如何解决的。<br>2） 代码层面，配置层面，考虑不全导致消息丢失</p><p><strong>2.RabbitMQ Server中存储的消息丢失或可靠性不足</strong><br>1）消息未完全持久化，当机器重启后，消息会全部丢失，甚至Queue也不见了<br>假如：你仅仅持久化了Message,而Exchange,Queue没有持久化，这个持久化是无效的。<br>2）单节点模式问题，如果某个节点挂了，消息就不能用了,业务可能瘫痪，只能等待，如果做了消息持久化方案，消息会持久化硬盘，机器重启后消息不会丢失；但是还有一个极端情况，这台服务器磁盘突然坏了，消息持久化不了。</p><ul><li>可以将所有message都设置为持久化，并且使用持久化的queue，但是这样仍然无法避免由于缓存导致的问题：<code>因为message在发送之后和被写入磁盘并执行fsync之间存在一个虽然短暂但是会产生问题的时间窗。通过publisher的confirm机制能够确保客户端知道哪些message已经存入磁盘，尽管如此，一般不希望遇到因单点故障导致服务不可用。</code></li></ul><p>3）普通集群模式：某个节点挂了，该节点上的消息不能用，有影响的业务瘫痪，只能等待节点恢复重启可用（建立在消息持久化）<br>虽然这个模式进步了一点点，多个节点，但是消息还是不能保证可靠，为什么呢？</p><p>因为RabbitMQ 集群模式有点特殊，队列的内容仅仅存在某一个节点上面，不会存在所有节点上面，所有节点仅仅存放消息结构和元数据（可以理解为索引，这也是为了提高性能，如果每次把所有内容同步到所有节点是有开销代价的）。镜像模式可以解决。</p><p><strong>3.RabbitMQ Server到消费者消息丢失</strong><br>消费端接收到相关消息之后，消费端还没来得及处理消息，消费端机器就宕机了，此时消息如果处理不当会有丢失风险，消费端也有ack机制。</p><pre><code>1. 发送方和mq保证消息送达到mq2. mq保证保存的消息不丢失3. 消费方和mq一起保证消息被成功消费</code></pre><ul><li>把一些耗时比较高并且可以异步处理的同步请求转换为异步处理来提高并发,并且把命令内容保存到数据库表中来提高数据可靠性并且通过重试来保证数据的最终一致性</li><li>像rabbitmq虽然有confirm回调 可以在这里重发消息 或者打印日志 可如果重发异常 并不会重试 这时候这个消息就会丢失 而使用rabbitmq事务提交 如果提交数据库事务成功 rabbitmq事务失败 会消息丢失.</li></ul><ol><li>Publisher<ul><li>事务机制（同步，不推荐）<ul><li>缺点：吞吐量下降。</li><li>事务机制和Confirm机制最大区别是：事务机制是同步的，提交之后会阻塞在那里，Confirm机制是异步的。</li></ul></li><li>Confirm机制（异步，推荐）</li></ul></li><li>MQ：开启消息持久化<ul><li>交换器Exchange持久化，通过durable=true来实现的。 </li><li>队列Queue持久化，通过durable=true来实现的。 </li><li>消息Message持久化，发布消息时deliveryMode=1代表不持久化，deliveryMode=2代表持久化。</li></ul></li><li>Consumer：关闭MQ自动ACK机制。手动应答。</li></ol><h4 id="发送方和mq保证消息送达到mq"><a href="#发送方和mq保证消息送达到mq" class="headerlink" title="发送方和mq保证消息送达到mq"></a>发送方和mq保证消息送达到mq</h4><ul><li>confirm模式<ul><li>串行confirm模式：producer每发送一条消息后，调用waitForConfirms()方法，等待broker端confirm，如果服务器端返回false或者在超时时间内未返回，客户端进行消息重传。</li><li>批量confirm模式：producer每发送一批消息后，调用waitForConfirms()方法，等待broker端confirm。</li><li>异步confirm模式：提供一个回调方法，broker confirm了一条或者多条消息后producer端会回调这个方法。</li></ul></li></ul><p>如果此交换器没有匹配的队列的话，那么消息也将会丢失，怎么办？</p><p>这里有两个解决方案，</p><ol><li><p>使用mandatory 设置true</p><ul><li>当mandatory标志位设置为true时，如果exchange根据自身类型和消息routeKey无法找到一个符合条件的queue， 那么会调用basic.return方法将消息返回给生产者。</li><li>当mandatory设置为false时，出现上述情形broker会直接将消息扔掉。</li><li>当immediate标志位设置为true时，如果exchange在将消息路由到queue(s)时发现对于的queue上没有消费者， 那么这条消息不会放入队列中。</li><li>当immediate标志位设置为false时,exchange路由的队列没有消费者时，该消息会通过basic.return方法返还给生产者。<ul><li>RabbitMQ 3.0版本开始去掉了对于immediate参数的支持，对此RabbitMQ官方解释是：这个关键字违背了生产者和消费者之间解耦的特性，因为生产者不关心消息是否被消费者消费掉</li></ul></li></ul></li><li><p>利用备份交换机（alternate-exchange）：实现没有路由到队列的消息</p></li></ol><p><strong>方案一</strong>、</p><ul><li>rabbitmq如果是用spring boot提供的模版接口发送 需要调用rabbitTemplate.convertSendAndReceive()方法发送 这个是当消息成功到队列了才会返回结果 如果失败则会抛异常 不过这就会导致等待时间比较长 <strong>适合高可靠场景。</strong><ul><li>比如插入订单表一笔订单 发送订单创建的消息 这两步是需要保证原子性的 要么都成功要么都失败。保证前四个操作是一个原子操作。这样如果<br>```</li></ul></li></ul><ol><li>开启事务</li><li>插入订单表</li><li>插入异步命令表</li><li>提交数据库事务</li><li>线程扫描异步命令表捞取消息</li><li>通过rabbitTemplate.convertSendAndReceive()方法发送</li><li>如果失败 则重试 并且报警<pre><code></code></pre></li></ol><p><strong>方案二</strong>、</p><ul><li>如采用rabbitTemplate.convertAndSend和confirms(消费回调)加Return(错误回调)模式<ul><li>convertAndSend 发送到mq 立刻返回 不管交换机是否成功处理 所以<strong>并发会高</strong></li><li>confirms(消费回调)  实现接口ConfirmCallback 消息成功<strong>发送到交换机上</strong>则会回调接口 入参ack为true代表成功发送到交换机 false代表异常</li><li>Return(错误回调) 实现接口ReturnCallback 消息从交换机到队列 成功不会回调 如果<strong>发送到队列失败</strong> 则会调用回调。只会回调一次</li></ul></li></ul><p>上面这种方式如果在回调中处理消息发送失败的逻辑时出现异常或者应用服务器挂了 则会导致消息丢失 因为只会回调一次<br><code>这种情况可以采用加一张消息表 先插入消息表 然后扫表发送消息 confirms回调成功 则更新表状态 如果回调的时候异常 则消息表会重新发送 这种就会出现消息重发的情况</code> 不过一般消息消费者都要保证幂等 所以这个问题不大 不过如果出现以下情况</p><p>数据库有两个字段 confirms默认0 和 return 默认0<br>回调成功confirms=1 回调失败confirms=2 错误回调return=2<br>当回调成功 confirms=1 错误回调处理失败没有成功更新表 则return还是0<br>这个时候你扫表就不确定需不需要重发消息 因为如果消息成功到队列 表的状态也是confirms=1 return=0<br>无法对发送队列成功和发送队列失败可在回调异常这两种情况做区分</p><h4 id="mq服务器保证可靠性"><a href="#mq服务器保证可靠性" class="headerlink" title="mq服务器保证可靠性"></a>mq服务器保证可靠性</h4><ol><li><p><strong>搭建一个mq集群</strong>，mq集群一个特点：queue及其内容仅仅存储于单个节点之上，所以一个节点的失效表现为其对应的queue不可用。</p></li><li><p>如果一个MQ集群由三个节点组成(MQ集群节点的模式也是有讲究的，一般三个节点会有一个RAM，两个DISK)，exchange、bindings 等元数据会在三个节点之间同步，但queue上的消息是不会同步的，且不特殊设置的情况下，Queue只会在一个节点存在。</p></li><li><p><strong>引入镜像队列</strong>的机制，可以将队列镜像到集群中的其他 Broker 节点之上，如果集群中的一个节点失效了，队列能自动地切换到镜像中的另一个节点上以保证服务的可用性。在通常的用法中，针对每一个配置镜像的队列(以下简称镜像队列〉都包含一个主节点（master）和若干个从节点 (slave)。</p></li><li><p>slave 会准确地按照 master 执行命令的顺序进行动作，故 slave 与 master 上维护的状态应该是相同的。如果 master 由于某种原因失效，那么”资历最老”的 slave 会被提升为新的 master。根据 slave 加入的时间排序，时间最长的 slave 即为”资历最老”。发送到镜像队列的所有消息会被同时发往 master 和所有的 slave 上，如果此时 master 挂掉了，消息还会在 slave 上，这样 slave提升为 master 的时候消息也不会丢失。除发送消息 (Basic.Publish) 外的所有动作都只会向 master 发送，然后再由 master 将命令执行的结果广播给各个 slave 。</p></li></ol><p>如果消费者与 slave 建立连接井进行订阅消费，其实质上都是从 master 上获取消息，只不过看似是从 slave 上消费而己。比如消费者与 slave 建立了 TCP 连接之后执行一个 Basic.Get的操作，那么首先是由 slave 将 Basic.Get 请求发往 master，再由 master 准备好数据返回给slave ，最后由 slave 投递给消费者。这里的 master 和 slave 是针对队列而言的，而队列可以均匀地散落在集群的各个 Broker 节点中以达到负载均衡的目的，因为真正的负载还是针对实际的物理机器而言的，而不是内存中驻留的队列进程。</p><ul><li>只要确保队列的 master 节点均匀散落在集群中的各个 Broker 节点即可确保很大程度上的负载均衡。</li></ul><h4 id="消费方和mq一起保证消息被成功消费"><a href="#消费方和mq一起保证消息被成功消费" class="headerlink" title="消费方和mq一起保证消息被成功消费"></a>消费方和mq一起保证消息被成功消费</h4><p>acknowledge=”manual”,消费者开启手动确认<br>channel.basicAck(),在业务代码里 成功处理业务 才返回给rabbitmq消费成功的确认<br>channel.basicNack(),如果业务处理失败则重新放到队列重新消费</p><ul><li>channel.basicNack 与 channel.basicReject 的区别在于basicNack可以拒绝多条消息，而basicReject一次只能拒绝一条消息，并决定是否重新放到队列<pre><code>接收消息把消息插入异步命令表返回rabbitmq成功异步组件执行业务逻辑调用接口失败重试重试一定次数则不重试 由人工进行处理 也可以把重试间隔设置的长一点 比如前三次每隔1s重试 第四次隔一个小时重试</code></pre></li></ul><h3 id="如何顺序消费"><a href="#如何顺序消费" class="headerlink" title="如何顺序消费"></a>如何顺序消费</h3><ul><li>RabbitMQ：<strong>一个 queue，多个 consumer存在消费顺序不一致问题</strong>。比如，生产者向 RabbitMQ 里发送了三条数据，顺序依次是 data1/data2/data3，压入的是 RabbitMQ 的一个内存队列。有三个消费者分别从 MQ 中消费这三条数据中的一条，结果消费者2先执行完操作，把 data2 存入数据库，然后是 data1/data3。这不明显乱了。</li></ul><img src="https://ask.qcloudimg.com/http-save/4069756/o497zazrr6.jpeg?imageView2/2/w/1620"><p><strong>三个队列依次发给消费者，然后消费者依次执行这三个队列中的每一个任务就ok了</strong></p><img src="https://segmentfault.com/img/bVbspGe?w=358&h=551"><h3 id="消息怎么路由？"><a href="#消息怎么路由？" class="headerlink" title="消息怎么路由？"></a>消息怎么路由？</h3><ul><li>消息提供方-&gt;路由-&gt;一至多个队列消息发布到交换器时，消息将拥有一个路由键（routing key），在消息创建时设定。通过队列路由键，可以把队列绑定到交换器上。消息到达交换器后，RabbitMQ 会将消息的路由键与队列的路由键进行匹配（针对不同的交换器有不同的路由规则）；常用的交换器主要分为一下三种：</li></ul><p>fanout：如果交换器收到消息，将会广播到所有绑定的队列上<br>direct：如果路由键完全匹配，消息就被投递到相应的队列<br>topic：可以使来自不同源头的消息能够到达同一个队列。 使用 topic 交换器时，可以使用通配符</p><h3 id="消息基于什么传输？"><a href="#消息基于什么传输？" class="headerlink" title="消息基于什么传输？"></a>消息基于什么传输？</h3><ul><li>RabbitMQ 使用信道的方式来传输数据。信道是建立在真实的 TCP 连接内的虚拟连接，且每条 TCP 连接上的信道数量没有限制。</li></ul><h3 id="如何消峰"><a href="#如何消峰" class="headerlink" title="如何消峰"></a>如何消峰</h3><ul><li>客户端send消息到mq-server，mq消费者主动pull消息消费。</li><li>由MQ-server推模式，升级为MQ-client拉模式。消费者可以根据自己的能力拉取一定的消息。</li></ul><p>rabbitmq提供了一种服务质量保障功能，即在<strong>非自动确认消息</strong>的前提下，如果一定数目的消息未被确认，不进行消费新的消息。<br>使用 basicQos方法：</p><pre><code>void basicQos(int prefetchSize , int prefetchCount , boo1ean global) prefetchSize：0,表示消费者所能接收未确认消息的总体大小的上限，prefetCount：当 prefetchCount 设置为 0 则表示没有上限。这个值一般在设置为非自动ack的情况下生效，一般大小为1global： true是channel级别， false是消费者级别</code></pre><h3 id="如何保证高可用"><a href="#如何保证高可用" class="headerlink" title="如何保证高可用"></a>如何保证高可用</h3><ol><li>基于主从模式</li><li>普通集群，但是queue数据只存在一个broker中，不可靠。</li><li>镜像队列+集群，所有机器都有queue中的数据，可以做成分布式的啊，队列分布在多台机器上。</li></ol><h3 id="如何保证不被重复消费（幂等性）"><a href="#如何保证不被重复消费（幂等性）" class="headerlink" title="如何保证不被重复消费（幂等性）"></a>如何保证不被重复消费（幂等性）</h3><ul><li>就一个数据，或者一个请求，给你重复来多次，你得确保对应的数据是不会改变的，不能出错。</li><li>在消息生产时，MQ 内部针对每条生产者发送的消息生成一个 inner-msg-id，作为去重的依据（消息投递失败并重传），避免重复的消息进入队列；</li><li>在消息消费时，要求消息体中必须要有一个 bizId（对于同一业务全局唯一，如支付 ID、订单 ID、帖子 ID 等）作为去重的依据，避免同一条消息被重复消费。</li><li>比如你是写redis，那没问题了，反正每次都是set，天然幂等性</li><li>还可以先根据主键查一下，如果有了就不要插了。</li></ul><h3 id="如何解决消息队列的延时问题和过期失效问题"><a href="#如何解决消息队列的延时问题和过期失效问题" class="headerlink" title="如何解决消息队列的延时问题和过期失效问题"></a>如何解决消息队列的延时问题和过期失效问题</h3><ul><li><p>RabbtiMQ 是可以设置过期时间的，也就是 TTL。如果消息在 queue 中积压超过一定的时间就会被 RabbitMQ 给清理掉，这个数据就没了。<strong>可以设置延时队列啊</strong></p></li><li><p>假设 1 万个订单积压在 mq 里面，没有处理，其中 1000 个订单都丢了，你只能手动写程序把那 1000 个订单给查出来，手动发到 mq 里去再补一次。</p></li></ul><h3 id="队列满了之后如何处理"><a href="#队列满了之后如何处理" class="headerlink" title="队列满了之后如何处理"></a>队列满了之后如何处理</h3><ul><li>临时写程序，接入数据来消费，消费一个丢弃一个，都不要了，快速消费掉所有的消息。然后</li></ul><h3 id="有几百万消息积压几个小时怎么解决"><a href="#有几百万消息积压几个小时怎么解决" class="headerlink" title="有几百万消息积压几个小时怎么解决"></a>有几百万消息积压几个小时怎么解决</h3><p><strong>紧急扩容</strong></p><ol><li>先修复 consumer 的问题，确保其恢复消费速度，然后将现有 consumer 都停掉。</li><li>新建一个 topic，partition 是原来的 10 倍，临时建立好原先 10 倍的 queue 数量。</li><li>然后写一个临时的分发数据的 consumer 程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的 10 倍数量的 queue。</li><li>接着临时征用 10 倍的机器来部署 consumer，每一批 consumer 消费一个临时 queue 的数据。这种做法相当于是临时将 queue 资源和 consumer 资源扩大 10 倍，以正常的 10 倍速度来消费数据。</li><li>等快速消费完积压数据之后，得恢复原先部署的架构，重新用原先的 consumer 机器来消费消息。</li></ol><h2 id="Kalfka相关"><a href="#Kalfka相关" class="headerlink" title="Kalfka相关"></a>Kalfka相关</h2><p><a href="https://www.jianshu.com/p/d3e963ff8b70">https://www.jianshu.com/p/d3e963ff8b70</a><br><a href="https://blog.csdn.net/lingbo229/article/details/80761778">https://blog.csdn.net/lingbo229/article/details/80761778</a><br><a href="https://juejin.im/post/5c99e6b16fb9a070ec7b2631">https://juejin.im/post/5c99e6b16fb9a070ec7b2631</a><br><a href="https://www.cnblogs.com/hello-/articles/10345021.html">https://www.cnblogs.com/hello-/articles/10345021.html</a></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>高吞吐，高积压，对消息的重复，丢失，错误没有严格的限制。</li></ul><h3 id="Partion选主机制"><a href="#Partion选主机制" class="headerlink" title="Partion选主机制"></a>Partion选主机制</h3><h3 id="如何保证高可用-1"><a href="#如何保证高可用-1" class="headerlink" title="如何保证高可用"></a>如何保证高可用</h3><p>副本机制<br>kalfa一个Topic的数据分布在多个节点上，Rabbitmq一格Queue的数据只分布在一个节点上。</p><h3 id="如何保证消息可靠性，不丢失"><a href="#如何保证消息可靠性，不丢失" class="headerlink" title="如何保证消息可靠性，不丢失"></a>如何保证消息可靠性，不丢失</h3><ol><li><p>Publisher</p></li><li><p>MQ</p><ul><li>给Topic设置副本数大于一个</li></ul></li><li><p>Consumer</p></li></ol><h2 id="redis相关"><a href="#redis相关" class="headerlink" title="redis相关"></a>redis相关</h2><h2 id="QPS计算"><a href="#QPS计算" class="headerlink" title="QPS计算"></a>QPS计算</h2><p>统计一段时间内的有效请求的日志行数（记为N），这段时间的总时长（秒）记为T，那么这段时间内的QPS就是：<br>QPS=N/T</p><h1 id="合集"><a href="#合集" class="headerlink" title="合集"></a>合集</h1><p><a href="https://developer.aliyun.com/ask/257905?spm=a2c6h.13066354.0.0.7c5633b5pc3aOH">https://developer.aliyun.com/ask/257905?spm=a2c6h.13066354.0.0.7c5633b5pc3aOH</a></p><h2 id="一致性哈希算法"><a href="#一致性哈希算法" class="headerlink" title="一致性哈希算法"></a>一致性哈希算法</h2><p><a href="https://zhuanlan.zhihu.com/p/34985026">https://zhuanlan.zhihu.com/p/34985026</a></p><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><ul><li>真正对限流起作用的配置就是rate=6r/s和burst=5这两个配置，对同一个ip来说<ul><li>6r/s，代表平均每秒请求频率不能超过6次。</li><li>burst：代表一个缓冲队列，当一秒内有超过6次的请求，剩下的往队列放，当队列满了，就会返回503，造成页面卡了，在缓冲队列不会造成页面迟钝。</li></ul></li></ul><p>参考：大佬博客地址：<a href="https://skyao.io/">https://skyao.io/</a></p><ul><li>通过异步非阻塞的事件处理机制，Nginx实现由进程循环处理多个准备好的事件，从而实现高并发和轻量级。 只是在请求间进行不断地切换</li><li>只要未准备好，就放入epoll队列中，有好的了就去执行。一个队列可以放很多请求，并发性高。</li><li>master/worker结构：一个master进程，生成一个或多个worker进程，线程少，切换资源方便。<ul><li>Master进程的作用是：读取并验证配置文件nginx.conf；管理worker进程；</li><li>Worker进程的作用是：每一个Worker进程都维护一个线程（避免线程切换），处理连接和请求；注意Worker进程的个数由配置文件决定，一般和CPU个数相关（有利于进程切换），配置几个就有几个Worker进程。</li></ul></li></ul><p><strong>多进程+异步非阻塞IO事件模型来处理各种连接请求。worker只需要从epoll队列循环处理即可。</strong></p><p>1、接收用户请求是异步的，即先将用户请求全部接收下来，再一次性发送后后端web服务器，极大的减轻后端web服务器的压力<br>2、发送响应报文时，是边接收来自后端web服务器的数据，边发送给客户端的</p><p>master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号。而基本的网络事件，则是放在worker进程中来处理了。<br>Nginx真正处理请求业务的是Worker之下的线程。worker进程中有一个ngx_worker_process_cycle()函数，执行无限循环，不断处理收到的来自客户端的请求，并进行处理，直到整个Nginx服务被停止。当来了一个新请求，多个worker进程通过互斥锁争抢这个请求，进程之间是独立的，也就是一个worker进程出现异常退出，其他worker进程是不会受到影响的；通过参数设置争抢锁，防止一直被一个进程获取到。</p><p><strong>Keepalived+Nginx实现高可用的思路：</strong></p><ul><li><p>第一：请求不要直接打到Nginx上，应该先通过Keepalived（这就是所谓虚拟IP，VIP）</p></li><li><p>第二：Keepalived应该能监控Nginx的生命状态（提供一个用户自定义的脚本，定期检查Nginx进程状态，进行权重变化,，从而实现Nginx故障切换）</p></li></ul><p><strong>Nginx如何做到热部署</strong></p><ul><li>就是配置文件nginx.conf修改后，不需要stop Nginx，不需要中断请求，就能让配置文件生效！（nginx -s reload 重新加载/nginx -t检查配置/nginx -s stop）</li><li>修改配置文件nginx.conf后，重新生成新的worker进程，以新的配置进行处理请求，而且新的请求必须都交给新的worker进程，至于老的worker进程，等把那些以前的请求处理完毕后，kill掉即可。</li></ul><p><strong>负载均衡的策略</strong></p><p>负载均衡的策略可以大致分为两大类：内置策略 和扩展策略</p><ul><li>内置策略：一般会直接编译进Nginx内核，常用的有、轮询、ip hash、最少连接。</li><li>扩展策略：fair、url hash等</li></ul><ol><li>轮询策略：，还可以加上权重，权重越大，轮询到几率越大</li><li>ip hash策略：使用hash算法对客户端IP地址计算，可以解决session的问题，同一个ip请求会被定位到一台服务器。</li><li>url_hash（第三方）<br>按访问url的hash结果来分配请求，使每个url定向到同一个（对应的）后端服务器，后端服务器为缓存时比较有效。</li><li>最少连接：下一个请求将被分派到活动<code>连接数量最少的服务器</code></li><li>fair（第三方）：按后端服务器的响应时间来分配请求，<code>响应时间短的优先分配</code>。</li></ol><p><strong>失败重试机制：</strong></p><ul><li>通过配置上游服务器的<code>max_fails</code>和<code>fail_timeout</code>，来指定每个上游服务器，<ul><li><code>当fail_timeout时间内失败了max_fails次请求</code>，则认为该上游服务器不可用/不存活，然后将摘掉该上游服务器</li><li>fail_timeout时间后会再次将该服务器加入到存活上游服务器列表进行重试。</li></ul></li></ul><p><strong>心跳检查</strong><br>interval：检测间隔时间，此处配置了每隔3s检测一次。<br>fall：检测失败多少次后，上游服务器被标识为不存活。<br>rise：检测成功多少次后，上游服务器被标识为存活，并可以处理请求。<br>timeout：检测请求超时时间配置。</p><ul><li>参考：<a href="https://skyao.gitbooks.io/learning-nginx/content/documentation/keep_alive.html">https://skyao.gitbooks.io/learning-nginx/content/documentation/keep_alive.html</a></li></ul><p>支持keep alive长连接<br>当使用nginx作为反向代理时，为了支持长连接，需要做到两点：</p><ul><li><p><strong>从client到nginx的连接是长连接</strong></p><ul><li>client发送的HTTP请求要求keep alive</li><li>nginx设置上支持keep alive<pre><code>http &#123;客户端连接在服务器端保持开启的超时值，超时就会关闭，通过计时器实现。keepalive_timeout  120s 120s;设置一个keep-alive连接上可以服务的请求的最大数量。当最大请求数量达到时，连接被关闭。默认是100。每个连接最多只能跑100个请求，超出会断开。QPS高时要提高这个值。keepalive_requests 10000;&#125;</code></pre></li><li>通过这两个机制来保证每个worker的连接数不会超过epoll所能管理的数目。</li></ul></li><li><p><strong>从nginx到server的连接是长连接</strong></p><ul><li><p>主要是keepalive参数：每个worker进程在缓冲中保持的到upstream服务器的<code>空闲keepalive连接的最大数量</code>。当这个数量被突破时，最近使用最少的连接将被关闭。</p></li><li><p>比如设置最大为10个空闲连接，现在建立了100个连接，但是请求只用了50个，那就会回收40个连接，保证不超出10个空闲连接。</p><pre><code>http &#123;upstream  BACKEND &#123;    server   192.168.0.1：8080  weight=1 max_fails=2 fail_timeout=30s;    server   192.168.0.2：8080  weight=1 max_fails=2 fail_timeout=30s;    keepalive 300;        // 这个很重要！&#125;server &#123;    listen 8080 default_server;    server_name &quot;&quot;;    location /  &#123;        proxy_pass http://BACKEND;        proxy_set_header Host  $Host;        proxy_set_header x-forwarded-for $remote_addr;        proxy_set_header X-Real-IP $remote_addr;        add_header Cache-Control no-store;        add_header Pragma  no-cache;        // 这两个最好也设置        proxy_http_version 1.1;         清空请求的Connection，即使客户端不是长连接，但是nginx到tomcat也可以是长连接        proxy_set_header Connection &quot;&quot;;        client_max_body_size  3072k;        client_body_buffer_size 128k;    &#125;&#125;&#125;</code></pre></li></ul></li></ul><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p>底层数据结构：<a href="https://database.51cto.com/art/201906/598234.htm">https://database.51cto.com/art/201906/598234.htm</a><br><a href="https://www.cnblogs.com/kismetv/p/9137897.html">https://www.cnblogs.com/kismetv/p/9137897.html</a></p><p><a href="https://blog.csdn.net/yejingtao703/article/details/78484151">https://blog.csdn.net/yejingtao703/article/details/78484151</a></p><h2 id="为什么redis集群的最大槽数是16384个？"><a href="#为什么redis集群的最大槽数是16384个？" class="headerlink" title="为什么redis集群的最大槽数是16384个？"></a>为什么redis集群的最大槽数是16384个？</h2><ul><li>Redis 集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分hash槽。</li><li>在redis节点发送心跳包时需要把所有的槽放到这个心跳包里，以便让节点知道当前集群信息，16384=16k，在发送心跳包时使用char进行bitmap压缩后是2k（2 * 8 (8 bit) * 1024(1k) = 2K），也就是说使用2k的空间创建了16k的槽数。</li></ul><p>虽然使用CRC16算法最多可以分配65535（2^16-1）个槽位，65535=65k，压缩后就是8k（8 * 8 (8 bit) * 1024(1k) = 8K），也就是说需要需要8k的心跳包，作者认为这样做不太值得；并且一般情况下一个redis集群不会有超过1000个master节点，所以16k的槽位是个比较合适的选择。</p><h2 id="redis对象的内存管理"><a href="#redis对象的内存管理" class="headerlink" title="redis对象的内存管理"></a>redis对象的内存管理</h2><ul><li>垃圾回收<br>redis 内存对象的垃圾回收，采用的是引用计数去维护。之所以可以采用这正简单的机制，原因在于redis对象之间没有深层次的嵌套，因此也就不存在循环引用的隐患。</li><li>内存共享优化<br>redis 在初始化服务器时，会创建10000个字符串对象，包含了0-9999的所有整数值，当服务器需要用到0-9999的字符串对象时，服务器就会共享这些对象，而不是创建新对象，这点是与python 的机制是一样的。</li></ul><h2 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h2><p>redis 提供 6种数据淘汰策略：</p><pre><code>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最常用的）allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！</code></pre><p>4.0版本后增加以下两种：</p><pre><code>volatile-lfu：从已设置过期时间的数据集(server.db[i].expires)中挑选最不经常使用的数据淘汰allkeys-lfu：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的key</code></pre><h2 id="使用过Redis做异步队列么，你是怎么用的？有什么缺点？"><a href="#使用过Redis做异步队列么，你是怎么用的？有什么缺点？" class="headerlink" title="使用过Redis做异步队列么，你是怎么用的？有什么缺点？"></a>使用过Redis做异步队列么，你是怎么用的？有什么缺点？</h2><ul><li>一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep 一会再重试。 </li><li>缺点： 在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如rabbitmq等。 </li><li>能不能生产一次消费多次呢？ 使用pub/sub主题订阅者模式，可以实现1:N的消息队列。 </li></ul><h2 id="什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？"><a href="#什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？" class="headerlink" title="什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？"></a>什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？</h2><p><strong>缓存穿透</strong></p><ul><li>一些恶意的请求会故意查询不存在的key,请求量很大，就会对后端系统造成很大的压力。这就叫 做缓存穿透。 如何避免？ <ul><li>1：对查询结果为空的情况也进行缓存，缓存时间设置短一点，或者该key对应的数据insert了之后清理 缓存。 </li><li>2：对一定不存在的key进行过滤。可以把所有的可能存在的key放到一个大的Bitmap中，查询时通过 该bitmap过滤。 </li></ul></li></ul><p><strong>缓存雪崩</strong> </p><ul><li>当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，会给后端系统带来很大压 力。导致系统崩溃。 如何避免？ <ul><li>做好redis集群的高可用</li><li>1：限流机制，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线 程查询数据和写缓存，其他线程等待。</li><li>2：做二级缓存，A1为原始缓存，A2为拷贝缓存，A1失效时，可以访问A2，A1缓存失效时间设置为 短期，A2设置为长期 </li><li>3：不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀 </li></ul></li></ul><h2 id="redis即使开启事务，但是别的连接依然可以操作事务中的键"><a href="#redis即使开启事务，但是别的连接依然可以操作事务中的键" class="headerlink" title="redis即使开启事务，但是别的连接依然可以操作事务中的键"></a>redis即使开启事务，但是别的连接依然可以操作事务中的键</h2><pre><code>  A               Bwatch lxwmultiset lxw 1                  set lxw 2exec此时exec返回nil，代表数据被更改了</code></pre><h2 id="如何保证缓存与数据库双写时的数据一致性"><a href="#如何保证缓存与数据库双写时的数据一致性" class="headerlink" title="如何保证缓存与数据库双写时的数据一致性?"></a>如何保证缓存与数据库双写时的数据一致性?</h2><p>你只要用缓存，就可能会涉及到缓存与数据库双存储双写，你只要是双写，就一定会有数据一致性的问题，那么你如何解决一致性问题？</p><p>一般来说，就是如果你的系统不是严格要求缓存+数据库必须一致性的话，缓存可以稍微的跟数据库偶尔有不一致的情况，最好不要做这个方案，读请求和写请求串行化，串到一个内存队列里去，这样就可以保证一定不会出现不一致的情况</p><p>串行化之后，就会导致系统的吞吐量会大幅度的降低，用比正常情况下多几倍的机器去支撑线上的一个请求。</p><h2 id="1-7-解决DB和redis一致性的问题"><a href="#1-7-解决DB和redis一致性的问题" class="headerlink" title="1.7. 解决DB和redis一致性的问题"></a>1.7. 解决DB和redis一致性的问题</h2><h3 id="1-7-1-使用mq解决"><a href="#1-7-1-使用mq解决" class="headerlink" title="1.7.1. 使用mq解决"></a>1.7.1. 使用mq解决</h3><ul><li>经常用到的模式是先使用缓存查询然后更新DB后，然后再去更新缓存那么如何让保证缓存的数据一致性的问题。</li><li>解决这个问题的关键是如何保证多个线程更新有序性，<strong>化并行行为为串行是解决这个问题的基本思路</strong>。所以可以考虑引入队列的方式来解决。比如使用rabbitmq，rocketmq等，消费端保证只有一个线程顺序消费消息即可。如果要增大吞吐量，可以使用多个队列，每个队列对应一个消费者。使用消息队列可以充分利用其特性，比如说消息的持久化，消息失败后的重试等，可以更好地保证数据的最终一致性。</li></ul><h3 id="1-7-2-定期的全量更新，就是定期把缓存全部清理掉，然后再全部加载。"><a href="#1-7-2-定期的全量更新，就是定期把缓存全部清理掉，然后再全部加载。" class="headerlink" title="1.7.2. 定期的全量更新，就是定期把缓存全部清理掉，然后再全部加载。"></a>1.7.2. 定期的全量更新，就是定期把缓存全部清理掉，然后再全部加载。</h3><h3 id="1-7-3-给缓存设置一个失效期"><a href="#1-7-3-给缓存设置一个失效期" class="headerlink" title="1.7.3. 给缓存设置一个失效期"></a>1.7.3. 给缓存设置一个失效期</h3><ul><li>任何不一致都可以靠失效期解决，失效期越短，数据的一致性越高。</li></ul><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><pre><code>合并某分支到当前分支：git merge &lt;name&gt;删除分支：git branch -d &lt;name&gt;git pull，将远程主机的某个分支的更新取回，并与本地指定的分支合并.rebase操作可以把本地未push的分叉提交历史整理成直线；git pull = git fetch + git merge,</code></pre><h2 id="1-4-maven"><a href="#1-4-maven" class="headerlink" title="1.4. maven"></a>1.4. maven</h2><h3 id="1-4-1-maven的生命周期"><a href="#1-4-1-maven的生命周期" class="headerlink" title="1.4.1. maven的生命周期"></a>1.4.1. maven的生命周期</h3><ul><li><p>maven由三套生命周期：clean 清理项目，default 构建项目，site建立项目文档</p></li><li><p>clean周期</p><ul><li>pre-clean：清理前的准备工作</li><li>clean ：   主要用于清理上一次构建产生的文件，可以理解为删除target目录</li><li>post-clean ：清理后的收尾工作</li></ul></li><li><p>site周期</p><ul><li>pre-site  ：执行生成前的准备工作</li><li>site   ：产生项目的站点文档</li><li>post-site  </li><li>site-deploy    将项目的站点文档部署到服务器</li></ul></li><li><p>default生命周期</p><ul><li>process-resources 复制主资源文件到主输出目录。</li><li>compile 编译主代码至主输出目录</li><li>process-test-resource 复制测试资源文件至测试输出目录</li><li>test-compile 编译测试代码到测试输出目录</li><li>test 执行测试例子</li><li>package 将项目打成jar包</li><li>install 将项目输出到本地仓库</li><li>deploy将项目输出构件部署到远程仓库</li></ul></li></ul><h3 id="1-4-2-maven的deploy"><a href="#1-4-2-maven的deploy" class="headerlink" title="1.4.2. maven的deploy"></a>1.4.2. maven的deploy</h3><ul><li>deploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享。</li></ul><h3 id="maven间接依赖"><a href="#maven间接依赖" class="headerlink" title="maven间接依赖"></a>maven间接依赖</h3><p>一种是Sub Module对Parent Module的<strong>继承依赖</strong>，另一种就是<strong>依赖传递</strong>。</p><p>在A项目里引入日志，但是我的日志里边又引入了logback，所以A就间接依赖了logback。</p><h2 id="maven依赖冲突"><a href="#maven依赖冲突" class="headerlink" title="maven依赖冲突"></a>maven依赖冲突</h2><ul><li><p>选择传递依赖 </p><ul><li>同样是传递依赖，maven优先选传递路径短的那个。</li><li>如上图中的D:2.0，它离A只差一个节点；而D:1.0离A差两个节点。</li></ul></li><li><p>选择直接依赖 </p><ul><li>maven优先选配置在前面的那个（老版本没有这个特性）。</li><li>例如同一个pom里面约定了两个study-F，先约定的是2.0，后约定的是1.0，maven选2.0那个。</li></ul></li></ul><h3 id="maven去除依赖"><a href="#maven去除依赖" class="headerlink" title="maven去除依赖"></a>maven去除依赖</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Spring官方建议不要用这个 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="maven查看所有依赖"><a href="#maven查看所有依赖" class="headerlink" title="maven查看所有依赖"></a>maven查看所有依赖</h3><ul><li>mvn dependency:tree，在pom.xml文件目录下执行</li><li>idea的maven有个按钮可以查看依赖树。</li></ul><h3 id="依赖管理-dependencyManagement"><a href="#依赖管理-dependencyManagement" class="headerlink" title="依赖管理 - dependencyManagement"></a>依赖管理 - dependencyManagement</h3><p>Parent的dependencyManagement节点的作用是管理整个项目所需要用到的第三方依赖。<br>只要约定了第三方依赖的坐标（GroupId:ArtifactId:version），后代模块即可通过GroupId:ArtifactId进行依赖的引入。<br>这样能够避免依赖版本的冲突。当然，这里只是进行约定，并不会真正地引用依赖。</p><h3 id="继承与聚合-Parent-Aggregator"><a href="#继承与聚合-Parent-Aggregator" class="headerlink" title="继承与聚合 - Parent/Aggregator"></a>继承与聚合 - Parent/Aggregator</h3><p>maven里面有两种父子关系：</p><p>亲爹 - 管继承，在sub module（子模块）里面通过parent元素进行配置<br>干爹 - 管聚合，在Aggregator（聚合器）里面通过modules元素进行配置</p><h2 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h2><h3 id="docker容器的优势"><a href="#docker容器的优势" class="headerlink" title="docker容器的优势"></a>docker容器的优势</h3><ul><li>docker镜像 一个镜像可以被重复利用创建新的镜像，所以镜像可以被高效的存储和创建。镜像是静态的，镜像对每一层都是可读的。</li><li>容器是动态的，动态的运行着我们指定的应用。一个镜像可以创建多个容器。每个容器都有自己的可读写层，这些层相互独立共享下面的镜像。</li><li>docker是一个开源的项目，这个项目旨在通过应用程序打包位可移植性，自给自足的容器。</li><li>docker一次构建可以放在任何地方就可以运行，不需要进行任何改变。docker就类似于一个容器。可以将容器内所有的东西镜像备份下来，等下次就可以直接拿来使用。</li><li>docker的启动速度远大于虚拟机</li><li>docker的资源利用率也远大于虚拟机</li></ul><h3 id="docker和虚拟机的区别"><a href="#docker和虚拟机的区别" class="headerlink" title="docker和虚拟机的区别"></a>docker和虚拟机的区别</h3><p>容器共享OS资源，虚拟机虚拟化一套硬件出来。<br>容器镜像保存了应用运行所需要的环境。镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等 。</p><ul><li>虚拟机更擅长于彻底<strong>隔离整个运行环境</strong>。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。</li><li>Docker通常用于<strong>隔离不同的应用</strong>，例如前端，后端以及数据库。</li><li><a href="https://www.cnblogs.com/kex1n/p/6933039.html">https://www.cnblogs.com/kex1n/p/6933039.html</a></li></ul><h2 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h2><ul><li>令牌桶这种控制机制基于令牌桶中是否存在令牌来指示什么时候可以发送流量。令牌桶中的每一个令牌都代表一个字节。如果令牌桶中存在令牌，则允许发送流量；而如果令牌桶中不存在令牌，则不允许发送流量。因此，如果突发门限被合理地配置并且令牌桶中有足够的令牌，那么流量就可以以峰值速率发送。</li><li>只要令牌桶中存在令牌，那么就允许突发地传输数据直到达到用户配置的门限，因此它适合于具有突发特性的流量。</li><li>当一个n个字节的请求过来，如果令牌桶中少于n个令牌，那么不会删除令牌，并且认为这个数据包在流量限制之外（n个字节，需要n个令牌。该数据包将被缓存或丢弃）；</li></ul><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ul><li><p>和boot连用，在类上加注解：@RunWith(SpringRunner.class)和SpringBootTest，然后注入service即可</p></li><li><p>单独就是@BeforeClass，@AfterClass，Before，After，Test等注解就可以。</p></li></ul><p>模拟测试：Mockito。<br>//配置mock，也要加上spring的两个注解，可以测试controller。<br>Mock可以创建一个虚拟的对象来代替那些不易构造或不易获取的对象，通常就是request对象。</p><pre class="line-numbers language-java"><code class="language-java">初始化mockMvc <span class="token operator">=</span> MockMvcBuilders<span class="token punctuation">.</span><span class="token function">standaloneSetup</span><span class="token punctuation">(</span>helloWorldController<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>RequestBuilder request <span class="token operator">=</span> MockMvcRequestBuilders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/HelloWorld"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//发送所用的数据格式</span>                <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//接收所使用的数据格式</span>                <span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"201801"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//附加参数</span>        <span class="token comment" spellcheck="true">// 执行请求</span>        ResultActions result <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分析结果</span>        result<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>MockMvcResultMatchers<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 执行状态</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>MockMvcResultMatchers<span class="token punctuation">.</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">"Tesla"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 期望值</span>                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span>MockMvcResultHandlers<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印</span>                <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 返回</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为什么用HttpClient"><a href="#为什么用HttpClient" class="headerlink" title="为什么用HttpClient"></a>为什么用HttpClient</h2><ul><li><p>在HTTP1.0和HTTP1.1中利用KeepAlive保持持久连接；</p></li><li><p>直接获取服务器发送的response code和 headers；</p></li><li><p>设置连接超时的能力；</p></li><li><p>HttpURLConnection是基于HTTP协议的，其底层通过socket通信实现。如果不设置超时（timeout），在网络异常的情况下，可能会导致程序僵死而不继续往下执行。</p></li><li><p>HttpURLConnection的connect()函数，实际上只是建立了一个与服务器的TCP连接，并没有实际发送HTTP请求。HTTP请求实际上直到我们获取服务器响应数据（如调用getInputStream()、getResponseCode()等方法）时才正式发送出去。并且HttpURLConnection对象的配置都需要在connect()方法执行之前完成。</p></li></ul><h2 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h2><ul><li><p>MVC是Model-View-Controller(模型-视图-控制器)的缩写，是一种混合设计模式。用到这种设计模式时，我们所创建的对象要分为：Model 对象，View对象和Controller对象。</p><p>  1）最上面的一层，是直接面向最终用户的”视图层”（View）。它是提供给用户的操作界面，是程序的外壳。</p><p>  2）最底下的一层，是核心的”数据层”（Model），也就是程序需要操作的数据或信息。</p><p>  3）中间的一层，就是”控制层”（Controller），它负责根据用户从”视图层”输入的指令，选取”数据层”中的数据，然后对其进行相应的操作，产生最终结果。</p></li><li><p>MVC设计模式解决了对象间耦合问题，使得程序易于复用、扩展和变更。</p></li><li><p>MVC要实现的目标是将软件<strong>用户界面和业务逻辑分离</strong>以使代码可扩展性、可复用性、可维护性、灵活性加强。</p></li></ul><h2 id="REST风格的设计模式"><a href="#REST风格的设计模式" class="headerlink" title="REST风格的设计模式"></a>REST风格的设计模式</h2><p>REST就是一种设计API的模式。最常用的数据格式是JSON。也就是项目简单时用，基于HTTP协议。<br>和SOAP相比，REST只是对URI做了一些规范，数据才有JSON格式，底层传输使用HTTP/HTTPS来通信</p><p><strong>如果一个架构符合REST原则，就称它为RESTful架构。</strong></p><ul><li><p>Representational State Transfer：表现层状态转化</p></li><li><p>用URI去定位一个资源，每个资源有独一无二的URI，</p></li><li><p>资源的表现形式叫做表现层，URI只代表资源的实体，不代表它的形式。</p></li><li><p>如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</p><ul><li>客户端用到的手段，只能是HTTP协议。就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</li></ul></li></ul><p>RESTful架构：</p><p>（1）每一个URI代表一种资源；</p><p>（2）客户端和服务器之间，传递这种资源的某种表现层；</p><p>（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p><ul><li>URI里面不能有动词，版本号。</li></ul><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>即通过微服务架构实施后扩展性的变化：</p><ol><li>Y轴：本质是应用的分解，即将传统的单体应用分解为多个微服务应用。</li><li>X轴：水平弹性扩展能力，即通过负载均衡来实现水平弹性扩展，但是DB问题无法解决，引入3</li><li>Z轴：当单个微服务应用引入了DB弹性扩展能力要解决的时候，我们引入了对数据库进行拆分和DaaS。每个服务器只负责数据的一个子集。与X轴伸缩一样，Z轴收缩可以提高应用程序的容量和可用性。Z 轴伸缩会拆分相似的服务, Y 轴伸缩会拆分不同的服务。</li></ol><p>微服务架构的不足，简单总结如下：</p><ol><li>CAP原则：由于服务无状态和引入了分布式，较难解决事务一致性问题。</li><li>集成复杂：任何彻底的分解都将带来集成的复杂度，即模块在集成时候需要外部微服务模块更多的配合。</li><li>部署问题：稍大项目都涉及到上100个服务节点部署，还涉及到部署后的配置，扩展和监控问题。</li></ol><h2 id="SOA设计模式"><a href="#SOA设计模式" class="headerlink" title="SOA设计模式"></a>SOA设计模式</h2><p>SOA粗暴理解：把系统按照实际业务，拆分成刚刚好大小的、合适的、独立部署的模块，每个模块之间相互独立。然后通过服务治理发现调用方和服务方的关系，dubbbo，cloud等。</p><ul><li>就是把所有的服务都对外以HTTP或者其他协议方式对外暴露，绝对不允许相同的服务在不同的业务系统独立一套，然后共用底层数据库。服务化的设计系统，所有拆分的业务，彼此之间都通过暴露的服务接口通信，操作对方的数据。这样，各个业务系统之间开始独立自主的向着美好的方向发展了。</li></ul><p>实际上SOA只是一种架构设计模式，而SOAP、REST、RPC就是根据这种设计模式构建出来的规范，其中SOAP通俗理解就是http+xml的形式，REST就是http+json的形式，RPC是基于socket的形式。</p><ul><li>单个服务内部越来越大，也不好管理，所以出现了微服务用来控制内部服务，把单个业务系统中一些功能细节的结构封装成服务，大的对外业务系统，组装各个微服务的接口数据，然后提供SOA服务。</li></ul><h2 id="SOAP简单对象访问协议"><a href="#SOAP简单对象访问协议" class="headerlink" title="SOAP简单对象访问协议"></a>SOAP简单对象访问协议</h2><ul><li>SOAP，是基于XML数据格式来交换数据的；其内部定义了一套复杂完善的XML标签。绝大多数情况下，请求和应答使用HTTP协议传输，那么发送请求就使用HTTP的POST方法。</li></ul><h2 id="RPC架构"><a href="#RPC架构" class="headerlink" title="RPC架构"></a>RPC架构</h2><p>一个完整的RPC架构里面包含了四个核心的组件，分别是Client ,Server,Client Stub以及Server Stub，这个Stub大家可以理解为存根。分别说说这几个组件：</p><ul><li>客户端（Client），服务的调用方。</li><li>服务端（Server），真正的服务提供者。</li><li>客户端存根，存放服务端的地址消息，再将客户端的请求参数打包成网络消息，然后通过网络远程发送给服务方。</li><li>服务端存根，接收客户端发送过来的消息，将消息解包，并调用本地的方法</li></ul><p>RPC要解决的两个问题：=socket + 动态代理</p><ol><li>解决分布式系统中，服务之间的调用问题。减少每次调用都要发起HTTP连接，三次握手的动作。</li><li>远程调用时，要能够像本地调用一样方便，让调用者感知不到远程调用的逻辑。</li></ol><p>每个RPC组件，基本上都是直接基于Socket来开发通信层功能，但是在网络传输的数据由于网络链路和协议的问题，会出现半包，分包和粘包情况。通过序列化数据传输。</p><h2 id="在有限的内存限制下实现数十亿级手机号码去重"><a href="#在有限的内存限制下实现数十亿级手机号码去重" class="headerlink" title="在有限的内存限制下实现数十亿级手机号码去重"></a>在有限的内存限制下实现数十亿级手机号码去重</h2><ul><li>利用BitMap原理</li><li>假设手机号11位，然后用bit位来表示，一个char类型占用两字节，足够了。</li><li>然后把手机号转为long值，进行除法和取余。</li></ul><p><a href="https://blog.csdn.net/v_JULY_v/article/details/6279498">https://blog.csdn.net/v_JULY_v/article/details/6279498</a></p><h2 id="语雀收集"><a href="#语雀收集" class="headerlink" title="语雀收集"></a>语雀收集</h2><ul><li><a href="https://www.yuque.com/sansenlian/sdut2q/cyhw92">https://www.yuque.com/sansenlian/sdut2q/cyhw92</a></li><li><a href="https://www.yuque.com/chenyuli-kwmi3/wxhdms/lz9dcg">https://www.yuque.com/chenyuli-kwmi3/wxhdms/lz9dcg</a></li><li><a href="https://www.yuque.com/yulongsun/java/ttq0zo">https://www.yuque.com/yulongsun/java/ttq0zo</a></li></ul><h3 id="1-3-25-java里面的32中设计模式。"><a href="#1-3-25-java里面的32中设计模式。" class="headerlink" title="1.3.25. java里面的32中设计模式。"></a>1.3.25. java里面的32中设计模式。</h3><ul><li><p>创建型模式</p><ul><li><p>单例模式：某个类只有一个实例，提供全局的访问点（spring单例的bean，Runntime类采用饿汉式加载）</p></li><li><p>简单工厂：一个工厂类根据传入的参量决定创建出那一种产品类的实例。</p></li><li><p>工厂方法：定义一个创建对象的接口，让子类决定实例化哪个类。符合开闭原则，当我们需要增加一个产品时，我们只需要增加一个具体的产品类和与之对应的具体工厂即可，无需修改原有的系统。但是每次增加新产品都要增加两个类，这样势必会导致系统的复杂度增加。类创建型模式。jdbc，迭代器和collection接口。</p></li><li><p>抽象工厂：提供一个接口，创建相关或依赖对象的家族，而无需明确指定具体类。优点：隔离了具体类的生成，是的客户端不需要知道什么被创建了，但是缺点在于新增加新的行为比较麻烦。添加新的行为时，需要修改接口以及其下的所有子类。</p></li><li><p>建造者模式：封装一个复杂对象的构建过程，并且按照步骤构造。将这些具体部位的创建工作和对象的创建进行解耦。多出来一个导演类，用来指挥创建对象。</p></li><li><p>原型模式：通过复制现有的实例来创建新的对象。</p></li></ul></li><li><p>结构型模式</p><ul><li>适配器模式：将一个类的方法接口转换成客户希望的另一个接口。将目标类和适配者类解耦，增加了类的透明性和复用性。新的类实现目标接口，调用旧的接口方法，然后再加入别的操作，实现一个新的接口。</li><li>组合模式：将对象组合成树形结构以表示“部分整体”的层次构造。</li><li>装饰模式：动态的给对象添加新的功能。</li><li>代理模式：为对象提供一个代理以便控制这个对象的访问。</li><li>亨元模式：通过共享技术来有效的支持大量细粒度的对象。如果在一个系统中存在多个相同的对象，那么只需要共享一份对象的拷贝,而不必为每一次使用都创建新的对象。</li><li>外观模式：对外提供一个统一的方法，来访问子系统中的一群接口。</li><li>桥接模式：将抽象部分和它的实现部分分离，使他们都可以独立的变化。</li></ul></li><li><p>行为型模式</p><ul><li>访问者模式：在不改变数据结构的前提下，增加作用于一组对象元素的新功能。</li><li>策略模式：if，else，就是一种策略，把这个策略封装到一个类里边，解耦了。但是要创建很多策略类。配合享元模式让每个策略类只有一个实例。通过组合多个类实例实现</li><li>模板方法模式：是一种类的行为型模式，在它的结构图中只有类之间的继承关系，没有对象关联关系。</li><li>迭代器模式：就是帮助我们遍历容器</li></ul></li></ul><p><strong>创建型模式对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。</strong><br>简单工厂 ： 用来生产同一等级结构中的任意产品。（添加具体产品修改工厂类）<br>工厂方法 ：用来生产同一等级结构中的固定产品。（增加产品，不改工厂类，直接实现接口）<br>抽象工厂：用来生产不同产品族的全部产品。添加产品族（就是舒适车）不改工厂，添加产品等级修改工厂。</p><p><strong>结构型模式描述如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构。</strong></p><p>结构型模式可以分为类结构型模式和对象结构型模式：</p><h2 id="为什么要面向接口编程"><a href="#为什么要面向接口编程" class="headerlink" title="为什么要面向接口编程"></a>为什么要面向接口编程</h2><ul><li>解耦合：各个实现类之间没啥关系</li><li>可以多实现：实现类不需要去关注我重写了接口有啥影响</li><li>可以选择更多的实现。</li></ul><h2 id="超线程"><a href="#超线程" class="headerlink" title="超线程"></a>超线程</h2><ul><li>Intel的超线程技术，目的是为了<code>更充分地利用一个单核CPU的资源</code>。</li><li>CPU在执行一条机器指令时，并<code>不会完全地利用所有的CPU资源</code>，而且实际上，是有大量资源被闲置着的。</li><li><code>超线程技术允许两个线程同时不冲突地使用CPU中的资源</code>。- 比如一条整数运算指令只会用到<code>整数运算单元</code>，此时<code>浮点运算单元</code>就空闲了，若使用了超线程技术，且另一个线程刚好此时要执行一个浮点运算指令，CPU就允许属于两个不同线程的整数运算指令和浮点运算指令<code>同时执行，这是真的并行</code>。</li><li>我不了解其它的硬件多线程技术是怎么样的，但单就超线程技术而言，它是<code>可以实现真正的并行的</code>。但这也<code>并不意味着</code>两个线程在同一个CPU中<code>一直都可以并行执</code>行，只是恰好碰到两个线程当前要执行的指令不使用相同的CPU资源时才可以真正地并行执行。</li></ul><h2 id="protected和default"><a href="#protected和default" class="headerlink" title="protected和default"></a>protected和default</h2><p>private和protected不能修饰类</p><p>修饰方法：<br>protected 包内所有类可见，包外有继承关系的子类可见，就是子类对象可以访问继承来的这个方法。<br>default表示默认，在同一个包下，通过new那个对象，可以访问（不需要是子类），包外部，子类和别的都不行。</p><h2 id="lambda原理"><a href="#lambda原理" class="headerlink" title="lambda原理"></a>lambda原理</h2><ol><li>在类编译时，会生成一个私有静态方法+一个内部类；</li><li>在内部类中实现了函数式接口，在实现接口的方法中，会调用编译器生成的静态方法；</li><li>在使用lambda表达式的地方，通过传递内部类实例，来调用函数式接口方法。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printString</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Print<span class="token operator">&lt;</span>String<span class="token operator">></span> print<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        print<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      根据参数和语句生成一个静态方法        <span class="token function">printString</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PrintString</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Print<span class="token operator">&lt;</span>String<span class="token operator">></span> print<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        print<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">PrintString</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LambdaTest</span>$$Lambda$<span class="token function">1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> lambda$main$<span class="token function">0</span><span class="token punctuation">(</span>String x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">new</span>一个静态内部类访问方法    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">LambdaTest</span>$$Lambda$<span class="token number">1</span> <span class="token keyword">implements</span> <span class="token class-name">Print</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            LambdaTest<span class="token punctuation">.</span>lambda$main$<span class="token function">0</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> LambdaTest$$Lambda$<span class="token function">1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">Print</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mybatis的Mapper原理"><a href="#mybatis的Mapper原理" class="headerlink" title="mybatis的Mapper原理"></a>mybatis的Mapper原理</h2><ol><li>构建 SqlSessionFactory ( 通过 xml 配置文件 , 或者直接编写Java代码)</li><li>从 SqlSessionFactory 中获取 SqlSession</li><li>从SqlSession 中获取 Mapper</li><li>调用 Mapper 的方法 ，例如：blogMapper.selectBlog(int blogId)</li></ol><pre class="line-numbers language-java"><code class="language-java">configuration<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加Mapper接口</span>SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. </span>SqlSession session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. </span>BlogMapper mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.</span>Blog blog <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectBlog</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Mapper 接口在初始SqlSessionFactory 注册的。</li><li>Mapper 接口注册在了名为 MapperRegistry 类的 HashMap中， key = Mapper class， value = 创建当前Mapper的工厂。</li><li>Mapper 注册之后，可以从SqlSession中get</li><li>SqlSession.getMapper 运用了 JDK动态代理，产生了目标Mapper接口的代理对象。</li><li>动态代理的 代理类是 MapperProxy ，这里边最终完成了增删改查方法的调用。</li></ol><p>因为对象才会有方法的具体实现，所以session.getMapper() 方法内部产生了BlogMapper的实现类，利用jdk动态代理。<br>configuration.addMapper(BlogMapper.class); 其实最终被放到了MapperRegistry的HashMap中，其名为knownMappers ，knowMappers是MapperRegistry 类的一个私有属性，它是一个HashMap 。其Key 为当前Class对象，value 为一个MapperProxyFactory 实例。<br>session.getMapper(BlogMapper.class);会到MapperRegistry中调用getMapper方法，MapperProxyFactory(BlogMapper) 对象调用mapperProxyFactory.newInstance(sqlSession); 生成代理类mapperProxy（实现了InnvocationHandler接口），通过invoke方法调用，</p><h2 id="Error可以被捕获，但是不建议"><a href="#Error可以被捕获，但是不建议" class="headerlink" title="Error可以被捕获，但是不建议"></a>Error可以被捕获，但是不建议</h2><h2 id="进程，线程，协程"><a href="#进程，线程，协程" class="headerlink" title="进程，线程，协程"></a>进程，线程，协程</h2><ul><li><strong>进程</strong>：每个进程都有自己的独立内存空间，进程切换开销比较大。</li><li><strong>线程</strong>：进程下面有很多线程，实现一个进程同时做很多任务，并且切换开销小，只需要程序计数器，栈等少量的。线程是不能独立运行的。</li><li><strong>协程</strong>：一般一个内核线程下面会对应一个用户级进程，这个用户级进程下面有很多线程，线程的调度是在用户层面实现的，但是同时只有一个协程可以访问资源，并且会引起进程阻塞，挂起。协程拥有自己的寄存器上下文和栈。因为它是在线程下面分的，所以不存在多个线程访问共享资源的冲突，他会把自己的内容保存到一个地方，切换回来时再使用，没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</li></ul><p><strong>进程和线程的区别</strong>：线程是不能独立于进程而存在的，如果进程结束，该进程创建的线程必然消亡；但与此同时，每一个线程都是CPU调度运行的最基本单位，当进程有多个线程时，操作系统是以线程为单位分配时间片。</p><ul><li>用户级线程：是指不需要内核支持而在用户程序中实现的线程，它的内核的切换是由用户态程序自己控制内核的切换，不需要内核的干涉。但是它不能像内核级线程一样更好的运用多核CPU。<ul><li>可以在不支持线程的OS中实现，一个进程对应多个用户级线程。</li><li>在基于进程机制得OS中，如果一个线程发生系统调用而阻塞，不仅该线程被阻塞，这个进程也会被阻塞，导致其他线程也被阻塞。而在内核支持线程中，进程中的其他线程仍然可以运行。</li><li>多线程应用不能利用多处理机进行多重处理的优点，内核每次分给一个进程的只有一个cpu，进程中只有一个线程能执行，在这个线程放弃cpu之前，其他的只能等待。</li></ul></li><li>内核支持线程：内核可以同时调度同一进程中的多个线程并行执行，如果一个线程阻塞了，不影响别的线程。线程切换快。<ul><li>对于用户的线程切换来说，模式切换开销大，在同一个进程中，从一个线程切换到另一个线程，需要从用户态到核心态转换。线程的调度和管理是在内核进行的。</li></ul></li></ul><h2 id="线程系统调用阻塞是否导致进程阻塞的问题"><a href="#线程系统调用阻塞是否导致进程阻塞的问题" class="headerlink" title="线程系统调用阻塞是否导致进程阻塞的问题"></a>线程系统调用阻塞是否导致进程阻塞的问题</h2><p>在多对一模型下，会发生阻塞，用户线程和内核线程多对一</p><p><a href="https://www.cnkirito.moe/rpc-protocol/">https://www.cnkirito.moe/rpc-protocol/</a></p><p>rpc解释：<a href="https://www.zhihu.com/question/41609070/answer/1030913797">https://www.zhihu.com/question/41609070/answer/1030913797</a></p><img src="https://pic3.zhimg.com/80/v2-f79abd8e489337fafc7aafe75799b599_720w.jpg"><ul><li>首先，调用方调用的是接口，必须得为接口构造一个假的实现。显然，要使用动态代理。这样，调用方的调用就被动态代理接收到了。</li><li>第二，动态代理接收到调用后，应该想办法调用远程的实际实现。这包括下面几步：<ul><li>识别具体要调用的远程方法的IP、端口</li><li>将调用方法的入参进行序列化</li><li>通过通信将请求发送到远程的方法中这样，远程的服务就接收到了调用方的请求。</li></ul></li><li>它应该：反序列化各个调用参数定位到实际要调用的方法，然后输入参数，执行方法按照调用的路径返回调用的结果</li></ul><h2 id="redis-1"><a href="#redis-1" class="headerlink" title="redis"></a>redis</h2><ul><li><a href="https://www.cnblogs.com/kismetv/p/9137897.html">https://www.cnblogs.com/kismetv/p/9137897.html</a></li></ul><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p><a href="https://www.cnblogs.com/rjzheng/p/9950951.html">https://www.cnblogs.com/rjzheng/p/9950951.html</a></p><h2 id="TPS和QPS"><a href="#TPS和QPS" class="headerlink" title="TPS和QPS"></a>TPS和QPS</h2><ul><li><p><strong>Tps即每秒处理事务数</strong>，包括了</p><ul><li>用户请求服务器</li><li>服务器自己的内部处理</li><li>服务器返回给用户</li></ul></li><li><p>这三个过程，每秒能够完成N个这三个过程，Tps也就是N；</p></li><li><p>Qps基本类似于Tps，但是不同的是，对于一个页面的一次访问，形成一个Tps；但一次页面请求，可能产生多次对服务器的请求，服务器对这些请求，就可计入“Qps”之中。</p></li></ul><p>例如：访问一个页面会请求服务器3次，一次访问，产生一个“T”，产生3个“Q”</p><p>系统吞吐量几个重要参数：QPS（TPS）、并发数、响应时间。<br>QPS（TPS）：每秒钟request/事务数量<br>并发数： 系统同时处理的request/事务数<br>响应时间：  一般取平均响应时间</p><p>QPS（TPS）= 并发数/平均响应时间</p><ul><li><strong>线程数</strong>：并发数量，能跑多少量。具体说是一次存在多少用户同时访问</li><li><strong>Rame-Up Period</strong>(in seconds) : 表示JMeter每隔多少秒发动并发。理解成准备时长：设置虚拟用户数需要多长时间全部启动。如果线程数是20，准备时长为10，那么需要10秒钟启动20个数量，也就是每秒钟启动2个线程。</li><li><strong>循环次数</strong>：这个设置不会改变并发数，可以延长并发时间。总请求数=线程数*循环次数</li><li><strong>调度器</strong>：设置压测的启动时间、结束时间、持续时间和启动延迟时间。</li></ul><h2 id="测试指标"><a href="#测试指标" class="headerlink" title="测试指标"></a>测试指标</h2><ol><li><p>并发数：是指系统同时能处理的请求数量，这个反映了系统的负载能力。</p></li><li><p>响应时间：指执行一个请求从开始到最后收到响应数据所花费的总时间。</p></li><li><p>吞吐率：指<strong>单位时间内系统能处理的请求数量，单位时间的吞吐量就是吞吐率；</strong>体现系统处理请求的能力。通常使用 reqs/s （服务器每秒处理的请求数量）来表示。主要是用户体验，我不但你要处理快，还要你数据传送快。</p><ul><li>通常情况下，吞吐率用“字节数/秒”来衡量，当然，你可以用“请求数/秒”和“页面数/秒”来衡量。本质还是字节数</li></ul></li><li><p>吞吐量：<strong>一次性能测试过程中网络上传输的数据量的总和，是指在没有帧丢失的情况下，设备能够接受的最大速率。</strong>。反映的是服务器承受的压力。一段时间内系统可以处理的请求数量，也就是我这次秒杀，系统可以接收多少流量冲击，多了系统就受不了了，就蹦了，就是系统可以处理很多请求，我可以处理的很快，但是不能保证数据传送的很快。</p></li><li><p>QPS：每秒查询数：QPS &gt; 并发数 / 平均响应时间, 一个TPS包含集合QPS。</p></li><li><p>TPS：每秒事务数：TPS = 并发数 / 平均响应时间</p></li><li><p>并发数 &gt;= 吞吐量</p></li></ol><p><strong>Samples</strong> : 表示一共发出的请求数</p><p><strong>Average</strong>：平均响应时间，默认情况下是单个Request的平均响应时间（ms）</p><p><strong>Error</strong>% : 测试出现的错误请求数量百分比。若出现错误就要看服务端的日志，配合开发查找定位原因</p><p><strong>Throughput</strong> : 简称tps,吞吐量，默认情况下表示每秒处理的请求数，也就是指服务器处理能力，tps越高说明服务器处理能力越好。</p><p><code>Throughput吞吐量每秒请求的数大于并发数</code>，则可以慢慢的往上面增加；若在压测的机器性能很好的情况下，<code>出现吞吐量小于并发数，说明并发数不能再增加了</code>，可以慢慢的往下减，找到最佳的并发数；</p><h2 id="日志的压测结果"><a href="#日志的压测结果" class="headerlink" title="日志的压测结果"></a>日志的压测结果</h2><ul><li>查询单个时，最大tps是100。（每秒处理的请求数），并发数设置的1000，然后tps可以达到100,不出错的情况。</li><li>查询所有时，只能达到10左右，并发数设置的是10，就不太行了。</li><li>插入时，设置并发1000,140/sec。平均1s返回。</li></ul><p><strong>插入接口</strong></p><h2 id="Spring几个版本的区别"><a href="#Spring几个版本的区别" class="headerlink" title="Spring几个版本的区别"></a>Spring几个版本的区别</h2><p>spring框架如何加载外部jar包中的类</p><p><strong>spring4</strong></p><ol><li>支持泛型Service，对于之前的是在抽象父类定义抽象方法，写一个set方法。在子类还需要使用注解注入，重新弄个set方法，这样代码很多了。我用的是接口方式。</li><li>支持注入map和list，可以在service里面用order注解定义注入顺序。@Lazy可以延迟依赖注入：<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> List<span class="token operator">&lt;</span>BaseService<span class="token operator">></span> list<span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p><strong>Spring5</strong><br>必须使用jav8以上版本，支持jdk9，在Spring核心接口中增加了声明default方法的支持，支持@Nullable注解</p><ol><li><p>使用 JUnit 5 执行条件和并发测试，Spring 5 全面接纳了函数式范例，并支持 JUnit 5 及其新的函数式测试风格。</p></li><li><p>使用 Lambda 表达式注册 bean</p><pre class="line-numbers language-java"><code class="language-java">GenericApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span>Book<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span>     <span class="token class-name">Book</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Author<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>支持HTTP/2，HTTP/2是第二代的HTTP协议，Spring Boot的Web容器选择中Tomcat</p></li><li><p>@Nullable和@NotNull注解精确的标记了方法的参数和返回值，这样可以在编译的时候处理null值，而不至于在运行的时候抛出空指针异常</p></li><li><p>Kotlin的函数式编程 和 Spring WebFlux很好的融合在了一起</p></li><li><p>响应式Web编程</p><ul><li>Spring 5.0有个新的模块叫做spring-webflux，可以支持响应式的Http和WebSocket客户端。</li><li>提供的一个非阻塞的基于响应式编程的进行Http请求的客户端工具。它的响应式编程的基于Reactor的。</li><li><a href="https://www.iteye.com/blog/elim-2427658">https://www.iteye.com/blog/elim-2427658</a></li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java">String baseUrl <span class="token operator">=</span> <span class="token string">"http://118.24.41.50:8081"</span><span class="token punctuation">;</span>WebClient webClient <span class="token operator">=</span> WebClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>Mono<span class="token operator">&lt;</span>RestData<span class="token operator">></span> mono <span class="token operator">=</span> webClient<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"/log/send"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bodyValue</span><span class="token punctuation">(</span>logVo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>RestData<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>RestData res <span class="token operator">=</span> mono<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送成功，code ："</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" , data : "</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送失败，code ："</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" , message : "</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>WebClient.create()创建一个WebClient的实例，<br>之后可以通过get()、post()等选择调用方式，<br>uri()指定需要请求的路径，<br>retrieve()用来发起请求并获得响应，<br>bodyToMono(RestData.class)用来指定请求结果需要处理为RestData，并包装为Reactor的Mono对象。当响应的结果是JSON时，也可以直接指定为一个Object，WebClient将接收到响应后把JSON字符串转换为对应的对象。</p><p><strong>阻塞式 vs 非阻塞式客户端</strong></p><ul><li><p>RestTemplate 阻塞式客户端, RestTemplate 使用了基于每个请求对应一个线程模型（thread-per-request）的 Java Servlet API。<br>这意味着，直到 Web 客户端收到响应之前，线程都将一直被阻塞下去。而阻塞代码带来的问题则是，每个线程都消耗了一定的内存和 CPU 周期。</p></li><li><p>WebClient 使用 Spring Reactive Framework 所提供的异步非阻塞解决方案。<br>当 RestTemplate 为每个事件（HTTP 请求）创建一个新的 线程 时，WebClient 将为每个事件创建类似于“任务”的东东。幕后，Reactive 框架将对这些 “任务” 进行排队，并仅在适当的响应可用时执行它们。<br>Reactive 框架使用事件驱动的体系结构。</p></li><li><p>WebClient同样能够以少量而固定的线程数处理高并发的Http请求，在基于Http的服务间通信方面，可以取代RestTemplate以及AsyncRestTemplate。</p></li></ul><p>创建http线程池</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">HelloController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    PoolingHttpClientConnectionManager connectionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoolingHttpClientConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connectionManager<span class="token punctuation">.</span><span class="token function">setDefaultMaxPerRoute</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connectionManager<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpComponentsClientHttpRequestFactory</span><span class="token punctuation">(</span>            HttpClientBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setConnectionManager</span><span class="token punctuation">(</span>connectionManager<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>使用 Spring WebFlux 执行集成测试</li></ol><p>Spring Test 现在包含一个 WebTestClient，后者支持对 Spring WebFlux 服务器端点执行集成测试。WebTestClient 使用模拟请求和响应来避免耗尽服务器资源，并能直接绑定到 WebFlux 服务器基础架构。</p><pre class="line-numbers language-java"><code class="language-java">WebTestClient testClient <span class="token operator">=</span> WebTestClient  <span class="token punctuation">.</span><span class="token function">bindToServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="两个鸡蛋测试：从100层楼往下扔鸡蛋，求最坏情况下确认保证鸡蛋可以不破的最大楼层所需次数"><a href="#两个鸡蛋测试：从100层楼往下扔鸡蛋，求最坏情况下确认保证鸡蛋可以不破的最大楼层所需次数" class="headerlink" title="两个鸡蛋测试：从100层楼往下扔鸡蛋，求最坏情况下确认保证鸡蛋可以不破的最大楼层所需次数"></a>两个鸡蛋测试：从100层楼往下扔鸡蛋，求最坏情况下确认保证鸡蛋可以不破的最大楼层所需次数</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>cglib都可以接口，类。</li><li>springboot2.0以后，默认cglib。</li><li>spring的切面只能切spring容器管理的bean。</li><li>自己定义一个切面，拦截我的方法。</li></ol><h2 id="a"><a href="#a" class="headerlink" title="a"></a>a</h2><p><a href="https://blog.csdn.net/weixin_41622183/article/list/1">https://blog.csdn.net/weixin_41622183/article/list/1</a><br>设计模式+框架源码<a href="https://www.cnblogs.com/leeSmall/p/10010006.html">https://www.cnblogs.com/leeSmall/p/10010006.html</a><br><a href="http://cmsblogs.com/?p=3828">http://cmsblogs.com/?p=3828</a><br><a href="https://blog.csdn.net/v_JULY_v/article/details/6685962">https://blog.csdn.net/v_JULY_v/article/details/6685962</a><br>基础：<a href="https://www.cnblogs.com/kundeg/category/952851.html">https://www.cnblogs.com/kundeg/category/952851.html</a><br>集合<a href="https://zhuanlan.zhihu.com/p/35723259">https://zhuanlan.zhihu.com/p/35723259</a><br>CountDownLatch：<a href="https://cloud.tencent.com/developer/article/1038486">https://cloud.tencent.com/developer/article/1038486</a><br>分布式mq：<a href="https://zhuanlan.zhihu.com/p/61130296">https://zhuanlan.zhihu.com/p/61130296</a><br><a href="https://www.zhihu.com/people/TaXueWWL/posts?page=2">https://www.zhihu.com/people/TaXueWWL/posts?page=2</a></p><p>mysql优化面试：<a href="https://www.nowcoder.com/discuss/150059?form=sx21">https://www.nowcoder.com/discuss/150059?form=sx21</a><br><a href="https://www.cnblogs.com/DataArt/p/10182649.html">https://www.cnblogs.com/DataArt/p/10182649.html</a><br><a href="https://juejin.im/entry/5b5eb7f2e51d4519700f7d3c">https://juejin.im/entry/5b5eb7f2e51d4519700f7d3c</a></p><p>至尊宝博客：<a href="https://www.cnblogs.com/aspirant/p/7081738.html">https://www.cnblogs.com/aspirant/p/7081738.html</a></p><p>DB和缓存一致性保证<br><a href="https://yq.aliyun.com/articles/175196">https://yq.aliyun.com/articles/175196</a><br><a href="https://www.cnblogs.com/rjzheng/p/9041659.html">https://www.cnblogs.com/rjzheng/p/9041659.html</a></p><h2 id="RocketMQ如何保证分布式事务最终一致性"><a href="#RocketMQ如何保证分布式事务最终一致性" class="headerlink" title="RocketMQ如何保证分布式事务最终一致性"></a>RocketMQ如何保证分布式事务最终一致性</h2><h2 id="Rabbitmq对于生产者发送丢失和消费者回传确认丢失的处理"><a href="#Rabbitmq对于生产者发送丢失和消费者回传确认丢失的处理" class="headerlink" title="Rabbitmq对于生产者发送丢失和消费者回传确认丢失的处理"></a>Rabbitmq对于生产者发送丢失和消费者回传确认丢失的处理</h2><p><strong>消费者回传确认丢失</strong></p><ul><li>消费者在订阅队列时，可以指定autoAck参数。<ul><li>当autoAck等于false时，RabbitMQ会等待消费者显式地回复确认信号后才从内存（或者磁盘）中移去消息（实质上是先打上删除标记，之后再删除）。</li><li>当autoAck等于true时，RabbitMQ会自动把发送出去的消息置为确认，然后从内存（或者磁盘）中删除，而不管消费者是否真正地消费到了这些消息。</li></ul></li></ul><p>当autoAck参数置为false，对于RabbitMQ服务端而言，队列中的消息分成了两个部分：一部分是等待投递给消费者的消息；一部分是已经投递给消费者，但是还没有收到消费者确认信号的消息。如果RabbitMQ一直没有收到消费者的确认信号，并且消费此消息的消费者已经断开连接，则RabbitMQ会安排该消息重新进入队列，等待投递给下一个消费者，当然也有可能还是原来的那个消费者。</p><p>RabbitMQ不会为未确认的消息设置过期时间，它判断此消息是否需要重新投递给消费者的唯一依据是消费该消息的消费者连接是否已经断开，这么设计的原因是RabbitMQ允许消费者消费一条消息的时间可以很久很久。</p><p><strong>生产者发送丢失</strong></p><ul><li>事务性<br>生产者将数据发送到rabbitmq的时候，可能因为网络问题导致数据就在半路给搞丢了。</li></ul><ol><li><p>使用事务（性能差）<br>可以选择用rabbitmq提供的事务功能，在生产者发送数据之前开启rabbitmq事务（channel.txSelect），然后发送消息，如果消息没有成功被rabbitmq接收到，那么生产者会收到异常报错，此时就可以回滚事务（channel.txRollback），然后重试发送消息；如果收到了消息，那么可以提交事务（channel.txCommit）。但是问题是，开始rabbitmq事务机制，基本上吞吐量会下来，因为太耗性能。</p></li><li><p>发送回执确认（推荐）<br>可以开启confirm模式，在生产者那里设置开启confirm模式之后，你每次写的消息都会分配一个唯一的id，然后如果写入了rabbitmq中，rabbitmq会给你回传一个ack消息，告诉你说这个消息ok了。如果rabbitmq没能处理这个消息，会回调你一个nack接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息id的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。<br>　　<br>事务机制和cnofirm机制最大的不同在于，事务机制是同步的，你提交一个事务之后会阻塞在那儿，但是confirm机制是异步的，你发送个消息之后就可以发送下一个消息，然后那个消息rabbitmq接收了之后会异步回调你一个接口通知你这个消息接收到了。</p></li></ol><h2 id="mq的共性"><a href="#mq的共性" class="headerlink" title="mq的共性"></a>mq的共性</h2><ul><li>异步和限流</li><li>立马返回结果。</li></ul><p>maven的间接依赖，去除依赖，查看所有依赖，mvn tree.<br>mq一致性，mq消费者不回复怎么办<br>dubbo，了解，<br>Spring5新特性。<br>mysql : 优化。<br>git好好看。</p><p>测试mysql和redis的QPS。</p><p>用【Shift + Enter】，可以【IDEA新建一行,并且光标移到新行】</p><h2 id="日志系统问题和扩展"><a href="#日志系统问题和扩展" class="headerlink" title="日志系统问题和扩展"></a>日志系统问题和扩展</h2><ul><li>日志：流水</li></ul><h3 id="使用问题"><a href="#使用问题" class="headerlink" title="使用问题"></a>使用问题</h3><ul><li>自己定义一个切面，拦截所有掉这个方法的请求，把日志收集起来，然后在这里可以用到slf4J去打印。</li></ul><h3 id="资源消耗"><a href="#资源消耗" class="headerlink" title="资源消耗"></a>资源消耗</h3><ul><li>主要是在http发请求，做一个http请求连接池，用长连接，一个连接发很多消息，而不是一条消息发一个请求，掉一个接口。用一个list或者阻塞队列去存储。</li></ul><p>我选择减少发送http请求的开销。<br>原因如下：<br>dubbo主要是透明化的远程方法调用，就像调用本地方法一样调用远程方法，只需简单配置，没有任何 API 侵入。但是他现在的生态不稳定，并且还是需要发请求，只不过内部给封装了一下，我这个项目的痛点是在每次发日志都要掉接口，那么如果是用dubbo暴露接口，还需要代理一系列的东西。同样也是这样，解决不了问题，所以我觉得应该从减少这方面的开销来考虑。</p><ul><li>然后可以使用http线程池，spring5新提供的WebClient，对dao层日志进行收集，每次分批发送，定时任务出队列。</li></ul><h3 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h3><p>查询和插入的QPS有多大。</p><ul><li>qps = questions / uptime<ul><li>questions = show global status like ‘questions’;</li><li>uptime = show global status like ‘uptime’;</li></ul></li></ul><pre><code>mysql&gt; show global status like &#39;questions&#39;;+---------------+--------+| Variable_name | Value  |+---------------+--------+| Questions     | 140113 |+---------------+--------+mysql&gt; show global status like &#39;uptime&#39;;+---------------+---------+| Variable_name | Value   |+---------------+---------+| Uptime        | 2717040 |+---------------+---------+最大连接数为1mysql&gt; show variables like &#39;%max_connections%&#39;;+-----------------+-------+| Variable_name   | Value |+-----------------+-------+| max_connections | 151   |+-----------------+-------+</code></pre><p>LAOPOLAOPO520laopo</p><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzI5NTYwNDQxNA==&amp;mid=2247486105&amp;idx=1&amp;sn=1fbc3b5c487db87ad05cd95f175502e3&amp;chksm=ec505348db27da5e4e6277e1cd12ecea986cdbc6cfa4976c22c1e9ce5f44eb18316b802f2763&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1584345235178&amp;sharer_shareid=3b470cb8f4732ef16863e7ea676c2c49#rd">https://mp.weixin.qq.com/s?__biz=MzI5NTYwNDQxNA==&amp;mid=2247486105&amp;idx=1&amp;sn=1fbc3b5c487db87ad05cd95f175502e3&amp;chksm=ec505348db27da5e4e6277e1cd12ecea986cdbc6cfa4976c22c1e9ce5f44eb18316b802f2763&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1584345235178&amp;sharer_shareid=3b470cb8f4732ef16863e7ea676c2c49#rd</a></p></li><li><p><a href="https://database.51cto.com/art/201909/602634.htm">https://database.51cto.com/art/201909/602634.htm</a></p></li><li><p><a href="https://database.51cto.com/art/201809/583857.htm">https://database.51cto.com/art/201809/583857.htm</a></p></li></ul><p>数据库数据会随着业务的发展而不断增多，因此数据操作，如增删改查的开销也会越来越大。<br>再加上物理服务器的资源有限(CPU、磁盘、内存、IO 等)。最终数据库所能承载的数据量、数据处理能力都将遭遇瓶颈。</p><p>以 MySQL 为例，在插入数据的时候，会对表进行加锁，分为表锁定和行锁定。<br>无论是哪种锁定方式，都意味着前面一条数据在操作表或者行的时候，后面的请求都在排队，当访问量增加的时候，都会影响数据库的效率。</p><p><strong>那么分库分表多少合适呢?</strong><br><strong>经测试在单表1000万条记录一下,写入读取性能是比较好的. 这样在留点buffer,那么单表全是数据字型的保持在800万条记录以下, 有字符型的单表保持在500万以下。</strong></p><ol><li><p>垂直拆分</p><ul><li>垂直分库：<code>把数据库表放到不同的数据库服务器上</code>，针对的是一个系统中的不同业务进行拆分，比如用户User一个库，商品Producet一个库，订单Order一个库。 就是一个mysql数据库负载会很高，可以把他们放到不同的数据库中。</li><li>垂直分表：<code>基于列字段进行的</code>，一个表中有很多字段，可以分为基本用户信息表，和详细用户信息表，这样子可以提高部分查询性能，避免查询时，数据量太大造成的“跨页”问题。</li></ul></li><li><p>水平拆分</p><ul><li>mysql物理结构：表-&gt;段-&gt;区-&gt;页-&gt;行。</li><li>水平分表：<code>基于数据行</code>，针对数据量巨大的单张表（比如订单表），可以根据mysql数据库的分区规则（基于行），把行记录分散到不同的区中。用这种方式存放数据以后，在访问具体数据的时候需要通过一个 Mapping Table 获取对应要响应的数据来自哪个数据表。</li><li>水平分库分表: 就是把一个表中的数据放到不同的服务器，然后再分区</li></ul></li></ol><p>如果之前有主从同步，只需要删除冗余数据，此时，再考虑数据库可用性，将扩展后的 4 个主库进行主备操作，针对每个主库都建立对应的从库，前者负责写操作，后者负责读操作。下次如果需要扩容也可以按照类似的操作进行。</p><p>双写数据库扩容，在没有数据库主从配置的情况下的扩容，建议先做全量同步再做数据校验。</p><h2 id="java8的流特点"><a href="#java8的流特点" class="headerlink" title="java8的流特点"></a>java8的流特点</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/76532152">https://zhuanlan.zhihu.com/p/76532152</a></li></ul><p>对于简单操作，比如最简单的遍历，Stream串行API性能明显差于显示迭代，但并行的Stream API能够发挥多核特性。<br>对于复杂操作，Stream串行API性能可以和手动实现的效果匹敌，在并行执行时Stream API效果远超手动实现。</p><p>并行流的内部使用了默认的 ForkJoinPool 分支/合并框架，它的默认线程数量就是你的处理器数量，这个值是由 Runtime.getRuntime().availableProcessors() 得到的</p><ul><li>对于基本类型的简单迭代，Stream串行迭代性能更差，但多核情况下Stream迭代时性能较好，比外部迭代快。</li><li>对于对象类型Stream串行迭代的性能开销仍然高于外部迭代开销（1.5倍），但差距没有基本类型那么大。Stream并行迭代的性能比串行迭代和外部迭代都好。<br>使用Stream并行API在单核情况下性能比for循环外部迭代差；随着使用核数的增加，Stream并行效果逐渐变好，多核带来的效果明显。</li><li>对于复杂的归约操作：Stream API的性能普遍好于外部手动迭代，并行Stream效果更佳；</li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ol><li>单一应用架构：所有功能部署在一起，</li><li>垂直应用架构：不不相干的功能拿出来单独开发，但是造成代码冗余。</li><li>分布式架构：将核心业务抽取出来，作为独立的服务，用于提高业务复用及整合的 分布式服务框架(RPC) 是关键。</li><li>流动计算架构：当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的 资源调度和治理中心(SOA) 是关键。</li></ol><h2 id="Future和CompleteFuture区别"><a href="#Future和CompleteFuture区别" class="headerlink" title="Future和CompleteFuture区别"></a>Future和CompleteFuture区别</h2><ul><li>Future主要是创建一个线程池，然后提交Runnable或者Callable的任务。然后可以用get来获取返回结果（执行完毕才会返回）。<ul><li>一定程度让任务异步执行了。</li><li>回调无法放到与任务不同的线程中执行。例如主线程等待各个异步执行的线程返回的结果来做下一步操作，则必须阻塞在future.get()的地方等待结果返回。这时候又变成同步了。</li></ul></li><li>CompleteFuture：异步的任务完成后，需要用其结果继续操作时，无需等待。可以直接通过thenAccept、thenApply、thenCompose等方式将前面异步处理的结果交给另外一个异步事件处理线程来处理。可见，这种方式才是我们需要的异步处理。<code>一个控制流的多个异步事件处理能无缝的连接在一起</code>。<pre class="line-numbers language-java"><code class="language-java">下面就可以看到，f2这个异步事件处理无缝引用了f这个异步事件处理的结果。整个过程中间不需要像future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>这样引入了不必要的同步阻塞CompletableFuture<span class="token operator">&lt;</span>Integer<span class="token operator">></span> f2 <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PlusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Waits until the "calculation" is done, then prints 2</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="DB和缓存双写一致性分析"><a href="#DB和缓存双写一致性分析" class="headerlink" title="DB和缓存双写一致性分析"></a>DB和缓存双写一致性分析</h2><ul><li><a href="https://www.cnblogs.com/rjzheng/p/9041659.html">https://www.cnblogs.com/rjzheng/p/9041659.html</a></li></ul><ol><li><p>先更新数据库，再更新缓存<br>这就导致了脏数据。<br>同时有请求A和请求B进行更新操作，那么会出现<br>（1）线程A更新了数据库<br>（2）线程B更新了数据库<br>（3）线程B更新了缓存<br>（4）线程A更新了缓存<br>写数据库比较多，每次更新缓存耗费大。</p></li><li><p>先删缓存，再更新数据库</p></li></ol><p>同时有一个请求A进行更新操作，另一个请求B进行查询操作。那么会出现如下情形:<br>（1）请求A进行写操作，删除缓存<br>（2）请求B查询发现缓存不存在<br>（3）请求B去数据库查询得到旧值<br>（4）请求B将旧值写入缓存<br>（5）请求A将新值写入数据库<br>如果不采用给缓存设置过期时间策略，该数据永远都是脏数据。<br><strong>采用延时双删策略解决, 确保读请求结束，写请求可以删除读请求造成的缓存脏数据。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>Object data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  redis<span class="token punctuation">.</span><span class="token function">delKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  db<span class="token punctuation">.</span><span class="token function">updateData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  redis<span class="token punctuation">.</span><span class="token function">delKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果你用了mysql的读写分离架构怎么办</strong><br>还是使用双删延时策略。只是，睡眠时间修改为在主从同步的延时时间基础上，加几百ms。</p><p><strong>采用这种同步淘汰策略，吞吐量降低怎么办</strong>？<br>ok，那就将第二次删除作为异步的。自己起一个线程，异步删除。这样，写的请求就不用沉睡一段时间后了，再返回。这么做，加大吞吐量。</p><p><strong>第二次删除,如果删除失败怎么办</strong><br>提供一个保障的重试机制即可</p><ol start="3"><li>先更新数据库，再删缓存</li></ol><p>一个请求A做查询操作，一个请求B做更新操作，那么会有如下情形产生<br>（1）缓存刚好失效<br>（2）请求A查询数据库，得一个旧值<br>（3）请求B将新值写入数据库<br>（4）请求B删除缓存<br>（5）请求A将查到的旧值写入缓存<br>ok，如果发生上述情况，确实是会发生脏数据。<br><strong>然而，发生这种情况的概率又有多少呢？</strong><br>发生上述情况有一个先天性条件，就是<strong>步骤（3）的写数据库操作比步骤（2）的读数据库操作耗时更短</strong>，才有可能使得步骤（4）先于步骤（5）。<br>数据库的读操作的速度远快于写操作的。</p><p><strong>保障的重试机制</strong></p><pre><code>   ---------           消息队列   |                    / \4.需要删除的key           |   |                3. 需要删除的key   |                      |   |                      |    -----2. 删除缓存失败---&gt;   |---------------&gt;   业务代码                          缓存                          |    -----5. 重试删除操作---&gt;                          |                       1. 更新数据库                          |                         \ /                        数据库</code></pre><img src="https://images.cnblogs.com/cnblogs_com/rjzheng/1202350/o_update1.png"><p>（1）更新数据库数据；<br>（2）缓存因为种种问题删除失败<br>（3）将需要删除的key发送至消息队列<br>（4）自己消费消息，获得需要删除的key<br>（5）继续重试删除操作，直到成功<br>然而，该方案有一个缺点，对业务线代码造成大量的侵入。</p><p><strong>在方案二</strong>中，启动一个订阅程序去订阅数据库的binlog，获得需要操作的数据。在应用程序中，另起一段程序，获得这个订阅程序传来的信息，进行删除缓存操作。</p><img src="https://images.cnblogs.com/cnblogs_com/rjzheng/1202350/o_update2.png"><p>（1）更新数据库数据<br>（2）数据库会将操作信息写入binlog日志当中<br>（3）订阅程序提取出所需要的数据以及key<br>（4）另起一段非业务代码，获得该信息<br>（5）尝试删除缓存操作，发现删除失败<br>（6）将这些信息发送至消息队列<br>（7）重新从消息队列中获得该数据，重试操作。<br>上述的订阅binlog程序在mysql中有现成的中间件叫canal，可以完成订阅binlog日志的功能。另外，重试机制，博主是采用的是消息队列的方式。如果对一致性要求不是很高，直接在程序中另起一个线程，每隔一段时间去重试即可。</p><h2 id="Spring源码分析"><a href="#Spring源码分析" class="headerlink" title="Spring源码分析"></a>Spring源码分析</h2><ol><li><p>导入没有加Spring注解的类或者jar包。</p><ul><li>使用@Import(要导入的组件类型,A.class,B.class),里边可以传一个数组。id默认是全类名。</li><li>自定义逻辑返回需要导入的组件，public class MyImportSelector implements ImportSelector，返回一个全类名数组。</li><li>implements ImportBeanDefinitionRegistrar，@EnableAspectJAutoProxy用的就是这种方式<pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//指定Bean定义信息；（Bean的类型，Bean。。。）</span> 这个类型可以自己定义类加载器加载类，然后获取到，在这个地方注册。根据类型生成BeanDefinition对象。       RootBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>RainBow<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//注册一个Bean，指定bean名</span>       registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"rainBow"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用Spring提供的 FactoryBean（工厂Bean）;在里边重写方法获取bean的方法。每个类会有一个自己的工厂bean。<ul><li>1）、默认获取到的是工厂bean调用getObject创建的对象</li><li>2）、要获取工厂Bean本身，我们需要给id前面加一个&amp;</li></ul></li><li>implements BeanDefinitionRegistryPostProcessor，它继承了bean工厂后处理器，所以是先把bean定义信息保存起来，然后才是调用工厂后处理器处理这个方法，对bean进行加工，解析占位符等操作。postProcessBeanFactory(beanFactory)</li></ul></li></ol><ol start="2"><li><p>AutowiredAnnotationBeanPostProcessor:解析完成自动装配功能；就是利用Bean后处理器对bean加工，获取到它依赖的bean。</p></li><li><p>自定义组件想要使用Spring容器底层的一些组件（ApplicationContext，BeanFactory，xxx）；<br> 自定义组件实现xxxAware；在创建对象的时候，会调用接口规定的方法注入相关组件；Aware；<br> 把Spring底层一些组件注入到自定义的Bean中；<br> xxxAware：功能使用xxxProcessor；<br> ApplicationContextAware==》ApplicationContextAwareProcessor（实现了BeanPostProcessor接口），在postProcessBeforeInitialization中把aware设置到bean中。</p></li></ol><p>从Bean的作用范围和实例化Bean的阶段来说。@PostConstruct和@PreDestroy代表init-method和destroy-method，可以有多个。</p><p>可以划分为4类方法<br>1、Bean自身的方法：构造函数实例化Bean，调用Setter()设置属性值，通过init-method定义了初始化方法和destroy-method指定的方法。<br>2、Bean级生命周期接口方法：BeaNameAware,BeanFactoryAware，InitializingBean和DisposableBean，这些接口由Bean类直接实现，主要解决个性化的问题。<br>3、容器级生命周期接口方法：InstantiationAwareBeanPostProcessor和BeanPostProcessor这两个接口实现的。独立于Bean。主要解决共性化问题。<br>4、工厂后处理器接口方法：也是容器级别的，在应用上下文装配配置文件后立即调用。ApplicationContext用的。</p><p>第一步之前若是context，则调用工厂后处理器对工厂加工。</p><ol><li>通过getBean()获取某一个Bean，然后如果容器注册了InstantiationAwareBeanPostProcessor接口，实例化Bean之前，调用postProcessBeforeInstantiation()方法。</li><li>根据配置情况调用bean的构造函数或工厂方法实例化Bean。</li><li>实例化后调用InstantiationAwareBeanPostProcessor的postProcessAfterInstantiation()进行打扮。</li></ol><p>上面其实主要是为了后面的切面处理，如果一个类被切面拦截，那么在最后实例化这些bean时，会把切面和原先的类一起变成一个代理对象</p><ol start="4"><li>设置属性值之前调用InstantiationAwareBeanPostProcessor的postProcessPropertyValues()。</li><li>设置属性值</li><li>如果bean实现了beanNameAware接口，就调用setBeanName（）方法将配置文件中的name设置到bean中，让Bean获取配置文件中对应的配置名称。</li><li>如果bean实现了BeanFactoryAware接口，则调用setBeanFactory（）把beanFactory容器实例设置到Bean中，让Bean感知容器（实例）。下一步如果是ApplicationContext则，如果bean实现了ApplicationContextAware接口，要执行setApplicationContext</li><li>如果BeanFactory装配了BeanPostProcessor后处理器，调用postProcessBeforeInitialzation().对bean加工。AOP，动态代理在这里实现。后续加工处理的接入点。</li><li>如果bean实现了InitializingBean接口，调用afterPropertiesSet()方法。</li><li>如果bean中指定了init-method方法，则执行这个方法。</li><li>调用BeanPostProcessor的postProcessAfterInitialzation()再进行一次加工处理。</li><li>如果是prototype类型，交给调用者管理Bean的生命周期。如果是singleton，交给spring容器管理，放到IoC容器的缓存池中，将Bean的引用给调用者。</li><li>对于单例，容器关闭时，如果Bean实现了DiposableBean接口，则调用destroy()，可以在这编写释放资源，记录日志等操作。</li><li>如果bean的destroy-method指定了bean的销毁方法，spring执行这个方法，完成bean的资源释放。</li></ol><p>Spring容器的refresh()【创建刷新】;<br>1、prepareRefresh()刷新前的预处理;<br>    1）、initPropertySources()初始化一些属性设置;子类自定义个性化的属性设置方法；<br>    2）、getEnvironment().validateRequiredProperties();检验属性的合法等<br>    3）、earlyApplicationEvents= new LinkedHashSet<ApplicationEvent>();保存容器中的一些早期的事件；</ApplicationEvent></p><p>2、obtainFreshBeanFactory();获取BeanFactory；<br>    1）、refreshBeanFactory();刷新【创建】BeanFactory；<br>            创建了一个this.beanFactory = new DefaultListableBeanFactory();<br>            设置id；<br>    2）、getBeanFactory();返回刚才GenericApplicationContext创建的BeanFactory对象；<br>    3）、将创建的BeanFactory【DefaultListableBeanFactory】返回；</p><p>3、prepareBeanFactory(beanFactory); BeanFactory的预准备工作（BeanFactory进行一些设置）；<br>    1）、设置BeanFactory的类加载器、支持表达式解析器…<br>    2）、添加部分BeanPostProcessor【ApplicationContextAwareProcessor】<br>    3）、设置忽略的自动装配的接口EnvironmentAware、EmbeddedValueResolverAware、xxx；<br>    4）、注册可以解析的自动装配；我们能直接在任何组件中自动注入：<br>            BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext<br>    5）、添加BeanPostProcessor【ApplicationListenerDetector】<br>    6）、添加编译时的AspectJ；<br>    7）、给BeanFactory中注册一些能用的组件；<br>        environment【ConfigurableEnvironment】、<br>        systemProperties【Map&lt;String, Object&gt;】、<br>        systemEnvironment【Map&lt;String, Object&gt;】</p><p>4、postProcessBeanFactory(beanFactory);BeanFactory准备工作完成后进行的后置处理工作；<br>    1）、子类通过重写这个方法来在BeanFactory创建并预准备完成以后做进一步的设置<br>======================以上是BeanFactory的创建及预准备工作==================================</p><p>5、invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor的方法；<br>    BeanFactoryPostProcessor：BeanFactory的后置处理器。在BeanFactory标准初始化之后执行的；<br>    两个接口：BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor<br>1）、<strong>执行BeanFactoryPostProcessor的方法</strong>；<br><strong>先执行BeanDefinitionRegistryPostProcessor</strong><br>  1）、获取所有的BeanDefinitionRegistryPostProcessor；<br>  2）、看先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor、<br>    postProcessor.postProcessBeanDefinitionRegistry(registry)<br>  3）、在执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor；<br>    postProcessor.postProcessBeanDefinitionRegistry(registry)<br>  4）、最后执行没有实现任何优先级或者是顺序接口的BeanDefinitionRegistryPostProcessors；<br>    postProcessor.postProcessBeanDefinitionRegistry(registry)</p><p><strong>再执行BeanFactoryPostProcessor的方法</strong><br>        1）、获取所有的BeanFactoryPostProcessor<br>        2）、看先执行实现了PriorityOrdered优先级接口的BeanFactoryPostProcessor、<br>            postProcessor.postProcessBeanFactory()<br>        3）、在执行实现了Ordered顺序接口的BeanFactoryPostProcessor；<br>            postProcessor.postProcessBeanFactory()<br>        4）、最后执行没有实现任何优先级或者是顺序接口的BeanFactoryPostProcessor；<br>            postProcessor.postProcessBeanFactory()</p><p>6、registerBeanPostProcessors(beanFactory);注册BeanPostProcessor（Bean的后置处理器）【 intercept bean creation】<br>        不同接口类型的BeanPostProcessor；在Bean创建前后的执行时机是不一样的<br>        BeanPostProcessor、<br>        DestructionAwareBeanPostProcessor、<br>        InstantiationAwareBeanPostProcessor、<br>        SmartInstantiationAwareBeanPostProcessor、<br>        MergedBeanDefinitionPostProcessor【internalPostProcessors】、</p><pre><code>    1）、获取所有的 BeanPostProcessor;后置处理器都默认可以通过PriorityOrdered、Ordered接口来执行优先级    2）、先注册PriorityOrdered优先级接口的BeanPostProcessor；        把每一个BeanPostProcessor；添加到BeanFactory中        beanFactory.addBeanPostProcessor(postProcessor);    3）、再注册Ordered接口的    4）、最后注册没有实现任何优先级接口的    5）、最终注册MergedBeanDefinitionPostProcessor；    6）、注册一个ApplicationListenerDetector；来在Bean创建完成后检查是否是ApplicationListener，如果是        applicationContext.addApplicationListener((ApplicationListener&lt;?&gt;) bean);</code></pre><p>7、initMessageSource();初始化MessageSource组件（做国际化功能；消息绑定，消息解析）；<br>        1）、获取BeanFactory<br>        2）、看容器中是否有id为messageSource的，类型是MessageSource的组件<br>            如果有赋值给messageSource，如果没有自己创建一个DelegatingMessageSource；<br>                MessageSource：取出国际化配置文件中的某个key的值；能按照区域信息获取；<br>        3）、把创建好的MessageSource注册在容器中，以后获取国际化配置文件的值的时候，可以自动注入MessageSource；<br>            beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);<br>            MessageSource.getMessage(String code, Object[] args, String defaultMessage, Locale locale);</p><p>8、initApplicationEventMulticaster();初始化事件派发器；<br>        1）、获取BeanFactory<br>        2）、从BeanFactory中获取applicationEventMulticaster的ApplicationEventMulticaster；<br>        3）、如果上一步没有配置；创建一个SimpleApplicationEventMulticaster<br>        4）、将创建的ApplicationEventMulticaster添加到BeanFactory中，以后其他组件直接自动注入</p><p>9、onRefresh();留给子容器（子类）<br>        1、子类重写这个方法，在容器刷新的时候可以自定义逻辑；</p><p>10、registerListeners();给容器中将所有项目里面的ApplicationListener注册进来；<br>        1、从容器中拿到所有的ApplicationListener<br>        2、将每个监听器添加到事件派发器中；<br>            getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);<br>        3、派发之前步骤产生的事件；</p><p>11、finishBeanFactoryInitialization(beanFactory);初始化所有剩下的单实例bean；<br>    1、beanFactory.preInstantiateSingletons();初始化后剩下的单实例bean<br>        1）、获取容器中的所有Bean，依次进行初始化和创建对象<br>        2）、获取Bean的定义信息；RootBeanDefinition<br>        3）、Bean不是抽象的，是单实例的，是懒加载；<br>            1）、判断是否是FactoryBean；是否是实现FactoryBean接口的Bean；<br>            2）、不是工厂Bean。利用getBean(beanName);创建对象<br>                0、getBean(beanName)； ioc.getBean();<br>                1、doGetBean(name, null, null, false);<br>                2、先获取缓存中保存的单实例Bean。如果能获取到说明这个Bean之前被创建过（所有创建过的单实例Bean都会被缓存起来）<br>                    从private final Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;String, Object&gt;(256);获取的<br>                3、缓存中获取不到，开始Bean的创建对象流程；<br>                4、标记当前bean已经被创建<br>                5、获取Bean的定义信息；<br>                6、【获取当前Bean依赖的其他Bean;如果有按照getBean()把依赖的Bean先创建出来；】<br>                7、启动单实例Bean的创建流程；<br>                    1）、createBean(beanName, mbd, args);<br>                    2）、Object bean = resolveBeforeInstantiation(beanName, mbdToUse);让BeanPostProcessor先拦截返回代理对象；<br>                        【InstantiationAwareBeanPostProcessor】：提前执行；<br>                        先触发：postProcessBeforeInstantiation()；<br>                        如果有返回值：触发postProcessAfterInitialization()；<br>                    3）、如果前面的InstantiationAwareBeanPostProcessor没有返回代理对象；调用4）<br>                    4）、Object beanInstance = doCreateBean(beanName, mbdToUse, args);创建Bean<br>                         1）、【创建Bean实例】；createBeanInstance(beanName, mbd, args);<br>                             利用工厂方法或者对象的构造器创建出Bean实例；<br>                         2）、applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);<br>                             调用MergedBeanDefinitionPostProcessor的postProcessMergedBeanDefinition(mbd, beanType, beanName);<br>                         3）、【Bean属性赋值】populateBean(beanName, mbd, instanceWrapper);<br>                             赋值之前：<br>                             1）、拿到InstantiationAwareBeanPostProcessor后置处理器；<br>                                 postProcessAfterInstantiation()；<br>                             2）、拿到InstantiationAwareBeanPostProcessor后置处理器；<br>                                 postProcessPropertyValues()；<br>                             =====赋值之前：===<br>                             3）、应用Bean属性的值；为属性利用setter方法等进行赋值；<br>                                 applyPropertyValues(beanName, mbd, bw, pvs);<br>                         4）、【Bean初始化】initializeBean(beanName, exposedObject, mbd);<br>                             1）、【执行Aware接口方法】invokeAwareMethods(beanName, bean);执行xxxAware接口的方法<br>                                 BeanNameAware\BeanClassLoaderAware\BeanFactoryAware<br>                             2）、【执行后置处理器初始化之前】applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);<br>                                 BeanPostProcessor.postProcessBeforeInitialization（）;<br>                             3）、【执行初始化方法】invokeInitMethods(beanName, wrappedBean, mbd);<br>                                 1）、是否是InitializingBean接口的实现；执行接口规定的初始化；<br>                                 2）、是否自定义初始化方法；<br>                             4）、【执行后置处理器初始化之后】applyBeanPostProcessorsAfterInitialization<br>                                 BeanPostProcessor.postProcessAfterInitialization()；<br>                         5）、注册Bean的销毁方法；<br>                    5）、将创建的Bean添加到缓存中singletonObjects；<br>                ioc容器就是这些Map；很多的Map里面保存了单实例Bean，环境信息。。。。；<br>        所有Bean都利用getBean创建完成以后；<br>            检查所有的Bean是否是SmartInitializingSingleton接口的；如果是；就执行afterSingletonsInstantiated()；</p><p>12、finishRefresh();完成BeanFactory的初始化创建工作；IOC容器就创建完成；<br>        1）、initLifecycleProcessor();初始化和生命周期有关的后置处理器；LifecycleProcessor<br>            默认从容器中找是否有lifecycleProcessor的组件【LifecycleProcessor】；如果没有new DefaultLifecycleProcessor();<br>            加入到容器；</p><pre><code>        写一个LifecycleProcessor的实现类，可以在BeanFactory            void onRefresh();            void onClose();        2）、    getLifecycleProcessor().onRefresh();        拿到前面定义的生命周期处理器（BeanFactory）；回调onRefresh()；    3）、publishEvent(new ContextRefreshedEvent(this));发布容器刷新完成事件；    4）、liveBeansView.registerApplicationContext(this);======总结===========1）、Spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息；    1）、xml注册bean；&lt;bean&gt;    2）、注解注册Bean；@Service、@Component、@Bean、xxx2）、Spring容器会合适的时机创建这些Bean    1）、用到这个bean的时候；利用getBean创建bean；创建好以后保存在容器中；    2）、统一创建剩下所有的bean的时候；finishBeanFactoryInitialization()；3）、后置处理器；BeanPostProcessor    1）、每一个bean创建完成，都会使用各种后置处理器进行处理；来增强bean的功能；        AutowiredAnnotationBeanPostProcessor:处理自动注入        AnnotationAwareAspectJAutoProxyCreator:来做AOP功能；        xxx....        增强的功能注解：        AsyncAnnotationBeanPostProcessor        ....4）、事件驱动模型；    ApplicationListener；事件监听；    ApplicationEventMulticaster；事件派发：</code></pre><h2 id="AOP原理"><a href="#AOP原理" class="headerlink" title="AOP原理"></a>AOP原理</h2><ul><li>使用AspectJ，加上注解@EnableAspectJAutoProxy；其实就是导入了一个AnnotationAwareAspectJAutoProxyCreator组件，</li><li>最后一个父类implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware，所以它具有这些功能。</li></ul><p>AnnotationAwareAspectJAutoProxyCreator【InstantiationAwareBeanPostProcessor】    的作用：<br>1）、每一个bean创建之前，调用postProcessBeforeInstantiation()；关心自己的bean和LogAspect的创建，获取候选的增强器。<br>2）、创建对象，postProcessAfterInitialization；如果当前bean需要增强，创建当前bean的代理对象；<br>3）、目标方法执行，根据ProxyFactory对象获取将要执行的目标方法拦截器链；遍历所有的增强器，将其转为Interceptor；如果是cglib，就会拦截对应的方法，然后按着拦截器链的顺序执行。</p><ul><li>注册BeanPostProcessor，实际上就是创建BeanPostProcessor对象，保存在容器中；把BeanPostProcessor注册到BeanFactory中；</li><li>然后就是实例化自己的bean了，此时会用到上面注册的后处理器，对bean进行加工，在初始化以后，返回一个代理，把对象放到代理工厂里边。<ul><li>创建每个bean之前，获取候选的增强，</li></ul></li></ul><h2 id="spring的事务传播行为和动态代理"><a href="#spring的事务传播行为和动态代理" class="headerlink" title="spring的事务传播行为和动态代理"></a>spring的事务传播行为和动态代理</h2><ul><li><p><a href="https://segmentfault.com/a/1190000015794446?utm_source=tag-newest">https://segmentfault.com/a/1190000015794446?utm_source=tag-newest</a></p></li><li><p>对于在一个service里边，如果是父方法调用子类方法，不会新开一个事务，假设现在是父方法默认传播行为（requires），子方法是required_new,这样因为动态代理，只有走一次代理，就是会把子方法放到父方法里面执行，所以他俩一起成功或失败。</p></li><li><p>对于不在一个service里边的，</p></li><li><p>Propagation.REQUIRES_NEW 的一般使用场景是作为内层事务可以单独回滚. 而不是回滚整个外层事务. 因此如果调用者和被调用者如果在一个类中, Propagation.REQUIRES_NEW 注解的方法并 不会 开启一个新的事务. 因此就达不到内层事务单独回滚的目的.</p></li></ul><h2 id="spring中用到的九种设计模式-1"><a href="#spring中用到的九种设计模式-1" class="headerlink" title="spring中用到的九种设计模式"></a>spring中用到的九种设计模式</h2><ul><li><p>简单工厂：又称为静态工厂方法模式，实质是由一个工厂类根据传入的参数，动态的决定创建哪一个产品类。spring中的BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获取bean对象，但是在传入参数后创建  还是传入参数前创建这个要根据情况来定。</p><ul><li>把BeanDefinition对象注册到注册表中，然后自己实现的BeanFactoryPostProcessor接口会把BeanDefinition取出来对占位符进行解析，把半成品的bean定义信息变成成品。</li></ul></li><li><p>工厂方法：即应用程序将对象的创建以及初始化交给工厂对象。一般情况下，应用程序有自己的工厂对象来创建bean，如果将应用程序自己的工厂对象交给spring管理，那么spring管理的就不是普通的bean，而是工厂bean。</p><ul><li>spring会在使用getBean()调用获得该bean时，会自动调用该bean的getObject()方法，所以返回的不是factory这个bean，而是这个bean.getOjbect()方法的返回值。</li><li>比如通过sqlSessionFactory获取的是sqlSession对象。</li></ul></li><li><p>单例模式：保证一个类仅有一个单例，并提供一个访问它的全局访问点。spring中默认的bean都是单例的，可以设置scope来指定。</p><ul><li>都是发生在AbstractBeanFactory的getBean里。getBean的doGetBean方法调用getSingleton进行bean的创建。spring依赖注入时，使用了 双重判断加锁 的单例模式</li></ul></li></ul><ul><li><p>适配器：在springAop中使用的Advice 来增强代理类的功能。spring实现这一AOP功能的原理就是使用代理模式对类进行方法级别的切面增强，即生成被代理类的代理类，并且在代理类的方法前设置拦截器，通过执行拦截器的内容增强了代理方法的功能，实现面向切面编程。前置通知，后置通知等。</p><ul><li>SpringMVC中的适配器HandlerAdatper。HandlerAdatper根据Handler规则执行不同的Handler。</li><li>Spring定义了一个适配接口，使得每一种Controller有一种对应的适配器实现类，让适配器代替controller执行相应的方法。这样在扩展Controller时，只需要增加一个适配器类就完成了SpringMVC的扩展了。</li></ul></li><li><p>包装器 spring中的包装器模式在类名上有两种表现：一种是在类名中含有wrapper等，基本上是动态的给对象添加一些额外的职责。</p></li><li><p>代理模式 为其他对象提供一种代理以控制对这个对象的访问。动态代理两种模式。</p></li><li><p>观察者模式 定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖它的对象都得到通知并被自动更新。spring中观察者模式常用的地方就是listener的实现。如applicationListener。事件，事件监听者，事件发布者（通过applicationContext创建），在发布事件时，调用publishEvent，然后就是广播，用了一个Executor或者同步方式调用监听者，让监听者执行监听方法，实现发布订阅。</p></li><li><p>策略模式：定义一系列的算法，把他们一个个封装起来，并且使他们可以相互转换。这个模式可以使得算法可独立于使用它的用户而发生变化。spring中实例化对象的时候使用的instantiationStrategy 负责根据beandefinition对象创建一个bean的实例。</p></li><li><p>模板方法：定义了一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定的步骤。模板方法模式一般需要继承的。spring中的jdbcTemplate就是这种模式。</p></li></ul><h2 id="差分数组"><a href="#差分数组" class="headerlink" title="差分数组"></a>差分数组</h2><p><a href="https://www.cnblogs.com/COLIN-LIGHTNING/p/8436624.html">https://www.cnblogs.com/COLIN-LIGHTNING/p/8436624.html</a></p><p><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/he-wei-kde-zi-shu-zu-by-leetcode/">https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/he-wei-kde-zi-shu-zu-by-leetcode/</a><br><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/</a><br><a href="https://leetcode-cn.com/problems/minimum-moves-to-equal-array-elements/solution/zui-xiao-yi-dong-ci-shu-shi-shu-zu-yuan-su-xiang-d/">https://leetcode-cn.com/problems/minimum-moves-to-equal-array-elements/solution/zui-xiao-yi-dong-ci-shu-shi-shu-zu-yuan-su-xiang-d/</a></p><h2 id="HTTP请求和响应"><a href="#HTTP请求和响应" class="headerlink" title="HTTP请求和响应"></a>HTTP请求和响应</h2><ul><li><p>HTTP 协议的数据交换只会消耗 1-RTT，当客户端和服务端仅处理一次 HTTP 请求时，从 HTTP 协议本身我们已经无法进行优化。不过随着请求的数量逐渐增加，HTTP/2 就可以复用已经建立的 TCP 连接减少 TCP 和 TLS 握手带来的额外开销。</p></li><li><p>当客户端想要通过 HTTPS 请求访问服务端时，整个过程需要经过 7 次握手并消耗 9 倍的延迟。（相比于http的1RTT，是9倍）</p><ul><li>TCP 协议需要通过三次握手建立 TCP 连接保证通信的可靠性（1.5-RTT）；</li><li>TLS 协议会在 TCP 协议之上通过四次握手建立 TLS 连接保证通信的安全性（2-RTT）；</li><li>HTTP 协议会在 TCP 和 TLS 上通过一次往返发送请求并接收响应（1-RTT）；</li></ul></li><li><p>HTTP/3（解决了握手次数多的问题） 就是一个这样的例子，它会使用基于 UDP 的 QUIC 协议进行握手，将 TCP 和 TLS 的握手过程结合起来，把 7 次握手减少到了 3 次握手，直接建立了可靠并且安全的传输通道。</p></li><li><p>HTTP/2（解决了需要多次建立连接的问题，实现在一个连接上同时传输多个）</p></li></ul><h2 id="rabbitmq队列最大数量"><a href="#rabbitmq队列最大数量" class="headerlink" title="rabbitmq队列最大数量"></a>rabbitmq队列最大数量</h2><ul><li>x-max-length 参数限制了一个队列的消息总数，当消息总数达到限定值时，队列头的消息会被抛弃。此外，处于 Unacked 状态的消息不纳入消息总数计算。但是，当 Unacked 消息被 reject 并重新入队时，就会受 x-max-length 参数限制。根据OS的情况进行控制。</li><li>x-max-length-bytes：对队列中消息体总字节数进行限制</li></ul><h2 id="RabbitMQ-允许发送的-message-最大可达多大"><a href="#RabbitMQ-允许发送的-message-最大可达多大" class="headerlink" title="RabbitMQ 允许发送的 message 最大可达多大"></a>RabbitMQ 允许发送的 message 最大可达多大</h2><h2 id="mysql加锁分析"><a href="#mysql加锁分析" class="headerlink" title="mysql加锁分析"></a>mysql加锁分析</h2><ul><li><a href="https://www.cnblogs.com/rjzheng/p/9950951.html">https://www.cnblogs.com/rjzheng/p/9950951.html</a></li></ul><ol><li><p>RC/RU + 条件列非索引/聚集索引</p><ul><li><p>聚集索引时就是把num换成id，这样子还是在聚集索引上加锁。</p></li><li><p>select * from t where num = 200 /  num &gt; 200 : 快照读，不加锁</p></li><li><p>where num = 200 lock in share mode : 有两条记录，在id对应的聚集索引的对应行上加行级S锁。采用当前读。</p></li><li><p>where num &gt; 200 lock in share mode：对应id为3，对id=3的聚集索引上加行级S锁</p></li><li><p>where num = 200 for update ：在对应id加行级X锁。</p></li><li><p>where num &gt; 200 for update ：在对应id加行级x锁。有一个加一个。只要是大于的。</p></li><li><p>在这个隔离级别下，mysql server会释放不符合条件的行上的锁。</p></li></ul></li><li><p>RC/RU + 辅助索引（非聚集索引）</p></li></ol><p>因为不是覆盖索引，所以有个回表的操作。<br>对于不加锁的都是快照读。<br>s锁，会先在辅助索引上加s锁，然后在对应聚集索引上加s锁。<br>x锁，在辅助索引和聚集索引上加x锁。</p><ol start="3"><li>RR/Serializable + 条件列非索引</li></ol><p>RR级别需要多考虑的就是gap lock，他的加锁特征在于，无论你怎么查都是锁全表</p><ul><li>select * from table where num = 200<ul><li>rr下，快照读，不加锁。</li><li>串行化，在id对应聚集索引加S锁，并且在聚集索引的所有间隙加gap lock。</li></ul></li><li>select * from table where num &gt; 200<ul><li>rr下，快照读。</li><li>串行化，全表记录聚集索引加S锁，所有间隙加gap lock。</li></ul></li><li>where num = 200 lock in share mode<ul><li>全表记录聚集索引加S锁，所有间隙加gap lock。</li></ul></li><li>where num &gt; 200 lock in share mode<ul><li>全表记录聚集索引加S锁，所有间隙加gap lock。</li></ul></li><li>where num = 200 for update或者大于。<ul><li>全表所有记录）的聚簇索引上加X锁，所有间隙加gap lock。</li></ul></li></ul><ol start="4"><li>RR/Serializable + 条件列是聚集索引</li></ol><p>因为是唯一索引，所以等值查询只存在行锁，范围查询才会有间隙锁。对于辅助索引，则是在辅助索引上加next-key lock，在聚集索引加行锁。</p><ul><li>select * from table where pId = 2<ul><li>RR级别下，不加任何锁，是快照读。</li><li>Serializable下，在pId=2的聚簇索引上加S锁，不存在gap lock。</li></ul></li><li>select * from table where pId &gt; 2<ul><li>rr下，不加锁，快照读</li><li>串行化，聚集索引S锁，有间隙锁。</li></ul></li><li>where pId = 2 lock in share mode，或者for update<ul><li>聚集索引s锁 / x锁，无间隙锁。</li></ul></li><li>where pId &gt; 2 lock in share mode，或者for update<ul><li>聚集索引S锁 / x锁，有间隙锁。</li></ul></li></ul><h2 id="阿里妈妈三面"><a href="#阿里妈妈三面" class="headerlink" title="阿里妈妈三面"></a>阿里妈妈三面</h2><p>行锁防止别的事务修改或删除，GAP锁防止别的事务新增，行锁和GAP锁结合形成的的Next-Key锁共同解决了RR级别在写数据时的幻读问题。间隙锁的唯一目的是防止其他事务插入间隙。间隙锁（S/X锁）可以共存。</p><ol><li><p>设计模式（分类，策略，责任链，单例）</p><ul><li>分类：创建型，结构型，行为型。</li><li>策略模式的意思，优缺点，解释java和spring的用到了哪些，怎么用的。</li><li>责任链，同上，</li><li>单例，几种方式，双重检验锁的锁，下一个问题了。</li><li>最好看看书</li></ul></li><li><p>volatile和synchronized底层原理。</p></li><li><p>spring的ioc和aop，详细原理，mvc原理。url到浏览器那一个步骤，经历了什么，详细的说，负载均衡，解析什么的。</p><ul><li>ioc，aop，说完我自己的总结，理解就过了。</li><li>先问浏览器到服务器响应过程，后来说了http常见请求头，用来干啥，然后就问请求怎么到服务器的，怎么响应的，中间过程，说到了mvc原理。</li></ul></li><li><p>常见状态码，605的错误码是什么：拨号网络由于设备安装错误不能使用端口。卸载干净任何PPPoE软件，重新安装。</p></li><li><p>数据库隔离级别，以及问题和解决。</p></li><li><p>spring的优点，特点，为什么用。</p></li><li><p>自己干过前端吗。</p></li><li><p>参加过社团组织吗，学习到了什么，性格优缺点。</p></li><li><p>dubbo原理。分布式这些。</p></li><li><p>jvm类加载过程。扯了双亲委派模型。类加载详细过程。</p></li><li><p>问项目的时候，说了很多，说了mq相关的东西。</p></li><li><p>为什么隔离级别在可重复读下，还会出现幻读。</p><ul><li>从锁的级别上来说，就是行锁，表锁，什么的，根据具体情况来说。</li><li>在rr级别下，不是说可以防止幻读吗，那这种情况怎么说。</li></ul><p>在可重复读隔离级别下，A事务读取数据，B事务不能修改，但是可以插入，分析为什么，从锁的角度考虑。</p><ul><li>首先rr下，如果是不加锁的读（等值和范围），会使用mvcc，不会影响到别人修改或删除。</li><li>加锁读（S/X锁，等值）：<ul><li>对于唯一索引，所以会降级为行锁，别人不能修改，但是没了间隙锁，所以别人插入没有问题，符合问题描述。</li><li>对于辅助索引，会加next-key lock。</li></ul></li><li>加锁读（S/X锁，范围）<ul><li>对于聚集索引，会在聚集索引上加行锁和间隙锁（next-key lock），所以别人是不能修改数据的。插入也不行。不符合问题描述。</li><li>对于辅助索引，如果我的where条件是辅助索引，那么会在辅助索引加间隙锁和行锁，但是只在聚集索引上加行锁，所以此时不能修改数据，但是如果我插入的数据聚集索引列未被锁定，并且辅助索引的那个值不在间隙锁的范围内，是可以正常插入的。符合问题描述。</li><li><strong>读已提交状态下：对于表（id,name,tid）,id为主键，tid为辅助索引，如果where条件是tid，那么在我锁定辅助索引某一行的时候，其他事务是可以插入的，所以就出现了幻读</strong>。<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">begin</span><span class="token punctuation">;</span>                                                                        <span class="token keyword">begin</span>；<span class="token keyword">select</span> name<span class="token punctuation">,</span>tid <span class="token keyword">from</span> t <span class="token keyword">where</span> tid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                                      <span class="token keyword">update</span> t <span class="token keyword">set</span> name<span class="token operator">=</span>xx <span class="token keyword">where</span> tid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                                                          <span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'lalala'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>插入一个和以前数据相等的数据。本来是想看一下有没有改，结果事务B插入了一个和以前一样的数据，所以就出现幻读。<span class="token keyword">select</span> name<span class="token punctuation">,</span>tid <span class="token keyword">from</span> t <span class="token keyword">where</span> tid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">commit</span>；                                                                       <span class="token keyword">commit</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>比方说我们使用mysql5.7 建一张表 引擎使用innodb, 表结构为 a b c 三列 a为自增主键 bc为整型,然后插入三条数据  （1，1，1） （2，2，2） （3，3，3）</li></ul></li><li>隔离级别设置为RR级别 然后开启一个事务A, 执行一下select * 读一下数据</li><li>此时再打开一个事务B,执行insert一条（4，4，4）然后commit。</li><li>再然后回到事务A 继续select *一下，此时查不到4这个数据，此时事务A继续自己的业务 尝试插入（4，4，4），数据库报错 说主键为4的数据已存在，然后A继续select *一下 发现仍然是（1，1，1）（2，2，2）（3，3，3）。业务无法继续运行，发生了幻读。</li><li>加锁解决这个问题，在A第一次select * 时最后加上 for update。那么被A select的数据集合将全部被加锁 其他事务无法动这些数据。</li><li>B执行insert（4，4，4）会进入阻塞 一段时间后报超时，那么A继续insert就不会有问题了</li><li>串行化意思是自动为你的每一个事务的select 后边加上for update。也就是说你想要的数据都会被加锁，所以解决了幻读。</li></ul></li></ol><ol start="13"><li>从一个很大的文件，选出出现次数最多的10个关键字算法，时间复杂度。</li><li>2个线程同时修改一条数据，以<strong>非锁的方式</strong>进行避免覆盖操作。就是一个可能会回滚。</li></ol><h2 id="Spring漏洞"><a href="#Spring漏洞" class="headerlink" title="Spring漏洞"></a>Spring漏洞</h2><p>漏洞出在path参数值的处理上</p><h2 id="spring的好处"><a href="#spring的好处" class="headerlink" title="spring的好处"></a>spring的好处</h2><ol><li>方便解耦，简化开发。通过spring的IOC容器，将对象的创建给spring进行控制。可以更关注上层的应用。</li><li>AOP编程的支持。面向切面的编程。</li><li>声明事务的支持。很方便的进行事务管理。</li><li>方便程序测试。</li><li>方便集成各种优秀的框架。</li></ol><h2 id="springMVC源码分析"><a href="#springMVC源码分析" class="headerlink" title="springMVC源码分析"></a>springMVC源码分析</h2><ul><li><a href="https://www.cnblogs.com/1013wang/p/11763404.html">https://www.cnblogs.com/1013wang/p/11763404.html</a></li></ul><ol><li>IOC怎么在容器中发挥作用，其它框架如何与容器结合。</li><li>MVC框架的实现原理。</li></ol><ul><li><p>ContextLoaderListener extends ContextLoader implements ServletContextListener。</p><ul><li><p>ServletContextListener：提供了与servlet生命周期的回调。</p><ul><li>contextInitialized(ServletContextEvent sce)：在其中建立webApplicationContext ==》（ContextLoader.initWebApplicationContext(),父类里面初始化）</li><li>contextDestroyed(ServletContextEvent sce)</li></ul></li><li><p>ContextLoader：建立WebApplicationContext，载入ioc容器。创建和初始化spring主容器对应的WebApplicationContext。主要负责加载spring主容器，即root ApplicationContext。</p><ul><li>通过contextInitialized方法，初始化方法，完成WebApplicationContext的参数设置，然后就是refresh方法的调用了，和之前的ioc是一样的。</li><li>WebApplicationContext extends ApplicationContext ，用来加载载入ioc容器，读取xml配置文件或者通过注解方式的bean，获取beanDefinition，使用beanDefinitionReader载入BeanDefinition，完成整个上下文的初始化过程。</li></ul></li></ul></li></ul><p>ContextLoaderListener通过实现ServletContextListener接口，将spring容器融入web容器当中。这个可以分两个角度来理解：</p><ul><li>web项目自身：接收web容器启动web应用的通知，开始自身配置的解析加载，创建bean实例，通过一个WebApplicationContext来维护spring项目的主容器相关的bean，以及其他一些组件。</li><li>web容器：web容器使用ServletContext来维护每一个web应用，ContextLoaderListener将spring容器，即WebApplicationContext，作为ServletContext的一个属性。保存在ServletContext中，从而web容器和spring项目可以通过ServletContext来交互。</li></ul><p>在完成对ContextLoaderListener的初始化之后，Web容器开始初始化DispatcherServlet，它会建立自己的上下文来持有MVC的bean对象，在建立自己持有的这个IOC容器时，会从ServletContext中获取到根上下文作为DispatcherServlet持有上下文的双亲上下文。有了这个根上下文，再对自己的进行初始化。最后把自己的上下文放到ServletContext中。</p><p>在DispatcherServlet的类的继承体系中，从下到上依次为：DispatcherServlet -&gt; FrameworkServlet -&gt; HttpServletBean。</p><ul><li>根上下文对应一个web应用，一个应用可以有很多servlet，根上下文会被所有servlet共享。<ul><li>首先在HttpServletBean.init()中获取servlet的初始化参数，对bean进行属性设置。然后调用子类(FrameworkServlet.initServletBean)进行详细初始化，最后调用refresh完成DispatcherServlet绑定的这个WebApplicationContext的创建。最后就是创建应用上下文，然后保存到servletContext里边。<ul><li>HttpServletBean的主要作用就是将于该servlet相关的init-param，封装成bean属性，然后保存到Environment当中，从而可以在spring容器中被其他bean访问。</li></ul></li><li>根上下文中的bean可以被DispatcherServlet的上下文使用。通过getBean获取时，首选去双亲ioc容器中获取。它持有一个以自己servlet名称命名的IOC容器。</li></ul></li></ul><p>在HttpServletBean的init方法中，定义initServletBean模板方法，供子类实现。<br>其中FrameworkServlet的initServletBean方法实现为创建WebApplicationContext，即调用initWebApplicationContext方法来完成WebApplicationContext的创建，并在initWebApplicationContext方法中定义onRefresh模板方法由子类实现，其中DispatcherServlet的onRefresh方法实现为从initWebApplicationContext的WebApplicationContext获取其功能子组件的bean，保存在自身的引用中。FrameworkServlet.initServletBean()==&gt;FrameworkServlet.initWebApplicationContext()==&gt;DispatcherServlet.onRefresh();</p><p>DispatcherServlet作为springMVC框架的一个统一前端控制器，需要接收所有发送到这个应用的请求，然后在自身启动时，已经加载好的URI和请求处理器映射，获取对应的请求处理器，由请求处理器进行实际的请求处理。为了对组件的封装和隔离性，每个DispatcherServlet使用了一个自身独立spring子容器WebApplicationContext来管理自身的子功能组件。然后共享同一个root WebApplicationContext（即WEB-INF/applicationContext.xml）来获取公用组件，如数据库连接池等。</p><ul><li>DispatcherServlet在接收到客户端请求时，会遍历DispatcherServlet自身维护的一个HandlerMapping集合，来查找该请求对应的请求处理器，然后由该请求处理器来执行请求处理。<ul><li>先是通过HandlerExecutionChain mappedHandler = getHandler(processedRequest);拿到请求处理器，然后HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());通过HandlerAdapter接口来提供一个模板实现，即以统一的方式，调用不同handler来执行请求处理。<ul><li>HandlerExecutionChain：由请求执行器handler和匹配的拦截器链interceptors组成。</li></ul></li></ul></li></ul><p>请求和请求处理器handler的映射map</p><p>使用@Controller和@RequestMapping的<br>将每个注解标注的处理方法在springMVC中都会抽象成一个HandlerMethod对象，</p><ul><li><p>HandlerMethod：基于方法的请求执行器，主要用于封装@Controller注解的类的使用@RequestMapping。核心属性为bean，即@Controller注解类对象；method请求方法，主要用于反射调用；</p></li><li><p>RequestMappingInfo：请求的匹配条件，主要是对@RequestMapping注解的相关属性进行封装，然后作为请求和请求处理器映射map的key。</p></li><li><p>RequestMappingHandlerMapping：基于HandlerMethod和RequestMappingInfo的HandlerMapping实现。</p><ul><li>RequestMappingHandlerMapping是HandlerMapping的一个实现，其请求和请求处理器的映射map是以RequestMappingInfo为key，HandlerMethod为value的。根据注解配置的信息找到RequestMappingInfo，也就是key，然后就能找到value了；<br>RequestMappingHandlerMapping -&gt; RequestMappingInfoHandlerMapping -&gt; AbstractHandlerMethodMapping -&gt; AbstractHandlerMapping，InitializingBean</li></ul></li><li><p>由类的继承体系可知，实现了InitializingBean接口，故spring容器在创建这个bean时，填充好所有属性之后，会调用InitializingBean的afterPropertiesSet方法</p></li></ul><p>根据ModelAndView中的设置的视图名称进行解析，得到对应的视图对象，对视图名进行解析，然后就是通过ApplicationContext获取到view对象。<br>然后把view中的模型数据和其他请求数据都放到request里面，</p><p>public void afterPropertiesSet() {<br>    初始化处理器方法，并且注册处理器<br>        initHandlerMethods();<br>}</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span>ApplicationContext context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">initStrategies</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Initialize the strategy objects that this servlet uses.     * &lt;p>May be overridden in subclasses in order to initialize further strategy objects.     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initStrategies</span><span class="token punctuation">(</span>ApplicationContext context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    就是初始化这个，之后在发生请求调用时，会从map中获取到。其中使用最多的是RequestMappingHandlerMapping，也就是注解标注的，它对应两个参数，HandlerMethod和RequestMappingInfo        <span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.分布式秒杀如果不用mq怎么做？我说直接去掉mq用异步+分布式事务，大佬说不好，还有吗？</p><p>11.统计用户url访问次数，我说用拦截器存redis，大佬问java有没有提供这种系统或者工具直接用？我说令牌桶也行，大佬没说话。用hyperloglog</p><h2 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h2><ul><li><a href="http://www.linkedkeeper.com/1045.html">http://www.linkedkeeper.com/1045.html</a></li></ul><p>三个BeanDefinition，分别为</p><ul><li>AnnotationTransactionAttributeSource</li><li>TransactionInterceptor</li><li>BeanFactoryTransactionAttributeSourceAdvisor</li></ul><p>并将前两个BeanDefinition添加到第三个BeanDefinition的属性当中，这三个bean支撑了整个事务功能。</p><pre class="line-numbers language-java"><code class="language-java">advisorDef <span class="token operator">==</span> BeanFactoryTransactionAttributeSourceAdvisor的定义信息。sourceName <span class="token operator">==</span> AnnotationTransactionAttributeSource的bean名字。interceptorName <span class="token operator">==</span> TransactionInterceptor的Bean名字。advisorDef<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"transactionAttributeSource"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeBeanReference</span><span class="token punctuation">(</span>sourceName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>advisorDef<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"adviceBeanName"</span><span class="token punctuation">,</span> interceptorName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注册<code>InfrastructureAdvisorAutoProxyCreator</code>，这个类间接实现了BeanPostProcessor接口，Spring会保证所有bean在实例化的时候都会调用其postProcessAfterInitialization方法，我们可以使用这个方法包装和改变bean，而真正实现这个方法是在其父类AbstractAutoProxyCreator类中：</p></li><li><p>然后就是在postProcessAfterInitialization方法中 先找出所有对应Advisor的类的beanName，再通过beanFactory.getBean方法获取这些bean并返回。其中BeanFactoryTransactionAttributeSourceAdvisor实现了Advisor接口，所以这个bean就会在此被提取出来，而另外两个bean被织入了BeanFactoryTransactionAttributeSourceAdvisor当中，所以也会一起被提取出来。</p></li><li><p>然后判断我们的业务方法或者类上<code>是否有@Transactional注解</code>，跟踪AnnotationTransactionAttributeSource的getTransactionAttribute方法：</p><ul><li>方法中的事务声明优先级最高，如果方法上没有声明则在类上寻找：就是看上面标注的有没有Transactionl注解，然后对属性进行解析，返回一个TransactionAttribute。获取到目标bean匹配的增强器之后，<code>会为bean创建代理</code>，在执行代理类的目标方法时，会调用Advisor的getAdvice获取MethodInterceptor并执行其invoke方法，而我们本文的主角BeanFactoryTransactionAttributeSourceAdvisor的getAdvice方法会返回我们在文章开始看到的为其织入的另外一个bean，也就是TransactionInterceptor，它实现了MethodInterceptor，所以我们分析其invoke方法：</li></ul></li><li><p>开始 ：就是选择事务管理器，然后根据事务信息执行spring事务管理的那一套。</p></li><li><p>判断是否存在事务 ：判断当前线程是否存在事务就是判断记录的数据库连接是否为空并且transactionActive状态为true。</p></li><li><p>开启新事务 ：REQUIRESNEW会开启一个新事务并挂起原事务，当然开启一个新事务就需要一个新的数据库连接：这里我们看到了数据库连接的获取，如果是新事务需要获取新一个新的数据库连接，并为其设置了隔离级别、是否只读等属性，下面就是将事务信息记录到当前线程中：</p></li><li><p>回滚 ：保存点一般用于嵌入式事务，内嵌事务的回滚不会引起外部事务的回滚。就是获取当前线程的数据库连接并调用其rollback方法进行回滚，使用的是底层数据库连接提供的API。</p></li><li><p>恢复 ：如果事务执行前有事务挂起，那么当前事务执行结束后需要将挂起的事务恢复，挂起事务时保存了原事务信息，重置了当前事务信息，所以恢复操作就是将当前的事务信息设置为之前保存的原事务信息。到这里事务的回滚操作就结束了。</p></li><li><p>提交 ：提交操作也是很简单的调用数据库连接底层API的commit方法</p></li></ul><p>“只读事务”并不是一个强制选项，它只是一个“暗示”，提示数据库驱动程序和数据库系统，这个事务并不包含更改数据的操作，<br>那么JDBC驱动程序和数据库就有可能根据这种情况对该事务进行一些特定的优化，<br>比方说不安排相应的数据库锁，以减轻事务对数据库的压力，毕竟事务也是要消耗数据库的资源的。 </p><p>我觉得我这次表现的不是太好，你有什么建议或者评价给我吗</p><p>接下来我会有一段空档期，有什么值得注意或者建议学习的吗</p><p>未来如果我要加入这个团队，你对我的期望是什么</p><h2 id="mysql联合索引注意"><a href="#mysql联合索引注意" class="headerlink" title="mysql联合索引注意"></a>mysql联合索引注意</h2><ol><li>满足最左匹配原则，范围右边的列索引失效。Mysql有优化器会自动调整查询列（例如a,b）的顺序与索引顺序一致</li><li>建立索引时，区分度高的放在前面。等值查询的列一定是在前面的，防止范围查询导致等值查询的索引也失效。</li></ol><h2 id="设计模式总结"><a href="#设计模式总结" class="headerlink" title="设计模式总结"></a>设计模式总结</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><p><strong>创建型模式</strong></p><ul><li><p>单例模式：某个类只有一个实例，提供全局的访问点（spring单例的bean，Runntime类采用饿汉式加载）</p></li><li><p>简单工厂：一个工厂类根据传入的参量决定创建出那一种产品类的实例。</p></li><li><p>工厂方法：定义一个创建对象的接口，让子类决定实例化哪个类。符合开闭原则，当我们需要增加一个产品时，我们只需要增加一个具体的产品类和与之对应的具体工厂即可，无需修改原有的系统。但是每次增加新产品都要增加两个类，这样势必会导致系统的复杂度增加。类创建型模式。jdbc，迭代器和collection接口。</p></li><li><p>抽象工厂：提供一个接口，创建相关或依赖对象的家族，而无需明确指定具体类。优点：隔离了具体类的生成，是的客户端不需要知道什么被创建了，但是缺点在于新增加新的行为比较麻烦。添加新的行为时，需要修改接口以及其下的所有子类。</p></li><li><p>建造者模式：封装一个复杂对象的构建过程，并且按照步骤构造。将这些具体部位的创建工作和对象的创建进行解耦。多出来一个导演类，用来指挥创建对象。</p></li><li><p>原型模式：通过复制现有的实例来创建新的对象。</p></li></ul></li><li><p><strong>结构型模式</strong></p><ul><li>适配器模式：将一个类的方法接口转换成客户希望的另一个接口。将目标类和适配者类解耦，增加了类的透明性和复用性。新的类实现目标接口，调用旧的接口方法，然后再加入别的操作，实现一个新的接口。</li><li>组合模式：将对象组合成树形结构以表示“部分整体”的层次构造。</li><li>装饰模式：动态的给对象添加新的功能。</li><li>代理模式：为对象提供一个代理以便控制这个对象的访问。</li><li>亨元模式：通过共享技术来有效的支持大量细粒度的对象。如果在一个系统中存在多个相同的对象，那么只需要共享一份对象的拷贝,而不必为每一次使用都创建新的对象。</li><li>外观模式：对外提供一个统一的方法，来访问子系统中的一群接口。比如一个操作很复杂，有很多步骤，每个步骤一个类，然后通过一个总类把它们包装起来，使用者只需要访问总类的一个方法就可以</li><li>桥接模式：将抽象部分和它的实现部分分离，使他们都可以独立的变化。例如图形和颜色的搭配，可以来一个图形类，一个颜色类，然后把它们组合。</li></ul></li><li><p><strong>行为型模式</strong></p><ul><li>访问者模式 ：在不改变数据结构的前提下，增加作用于一组对象元素的新功能。</li><li>策略模式 ：if，else，就是一种策略，把这个策略封装到一个类里边，解耦了。但是要创建很多策略类。配合享元模式让每个策略类只有一个实例。通过组合多个类实例实现</li><li>模板方法模式 ：是一种类的行为型模式，在它的结构图中只有类之间的继承关系，没有对象关联关系。</li><li>迭代器模式 ：就是帮助我们遍历容器。</li><li>责任链模式 ：</li><li>命令模式 ：命令模式可以对发送者和接受者完全解耦，发送者也接收者之间并没有直接的联系，发送者只需要知道如何发送请求，不需要关心请求是如何完成了。</li><li>解释器模式 ：</li><li>观察者模式 ：</li><li>状态模式 ：行为会导致一个东西的状态变化，比如房间状态，然后又预定，入住，退订，退房，很多操作，原生的要写判断，后来把不同房间状态都有对应的操作，然后在房间类里边进行操作就行了</li></ul></li></ol><h3 id="设计原则："><a href="#设计原则：" class="headerlink" title="设计原则："></a>设计原则：</h3><ol><li>找出变化，分开变化和不变的</li><li>开闭原则：对扩展开放，对修改关闭。</li><li>最少知道原则 ：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</li><li>面向接口编程 ：依赖于抽象而不依赖于具体。</li><li>合成复用原则 ：是尽量使用合成/聚合的方式，而不是使用继承。</li><li>单一职责原则 ：方法/类 设计的原则，每个方法只负责一个功能，不要把很多功能写在一个方法里面</li><li>接口隔离原则 ：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思</li></ol><h2 id="GC调优"><a href="#GC调优" class="headerlink" title="GC调优"></a>GC调优</h2><p><a href="https://tech.meituan.com/2017/12/29/jvm-optimize.html">https://tech.meituan.com/2017/12/29/jvm-optimize.html</a></p><h2 id="智力题"><a href="#智力题" class="headerlink" title="智力题"></a>智力题</h2><ul><li>100个球，每次只能拿1-6个，两个人拿，谁拿到最后谁赢，有没有必赢策略。<ul><li>A先拿，拿完让它剩余个数为7的倍数，比如先拿2个，之后如果B拿几个，那么A就拿7-几的个数。保证剩余的是7的倍数。</li></ul></li></ul><p>hexo generate –deploy</p><h2 id="dubbo学习"><a href="#dubbo学习" class="headerlink" title="dubbo学习"></a>dubbo学习</h2><p><strong>单一应用架构</strong><br>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p><strong>垂直应用架构</strong><br>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将<strong>应用拆成互不相干的几个应用</strong>，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><p><strong>分布式服务架构</strong><br>当垂直应用越来越多，应用之间交互不可避免，将<strong>核心业务抽取出来</strong>，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><p><strong>流动计算架构</strong><br>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个<strong>调度中心</strong>基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p><p>DubboNameSpaceHandler中会初始化一系列标签对应的Config类，比如ProviderConfig类，service-》ServiceBean，reference-》ReferenceBean等，然后就是有一个DubboBeanDefinitionParse类用来解析xml配置文件，然后看是属于哪个类，获取标签里边的属性，放到beanDenifition里边，</p><ol><li><p>不同粒度配置的覆盖关系</p><ul><li>以 timeout 为例，其它 retries, loadbalance, actives 等类似：</li><li>方法级优先，接口级次之，全局配置再次之。</li><li>如果级别一样，则消费方优先，提供方次之。</li></ul></li><li><p>启动时检查</p></li><li><p>集群容错</p><ul><li>failover ：可以设置重试次数，如果失败了回去重试别的服务。</li><li>Failfast ：快速失败，用于非幂等操作，插入数据，</li><li>failback ：失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</li></ul></li><li><p>负载均衡策略</p><ul><li>随机 ：适合于动态调整</li><li>轮询 ：可能会卡在某个节点</li><li>最少活跃调用数 ：使慢的提供者收到更少请求</li><li>一致性hash ：相同参数的请求总是发到同一提供者，一个挂了不会引起特别大的变动。</li></ul></li><li><p>只订阅</p><ul><li>可以让服务提供者开发方，只订阅服务(开发的服务可能依赖其它服务)，而不注册正在开发的服务，通过直连测试正在开发的服务。</li></ul></li><li><p>dubbo协议</p><ul><li>Dubbo 缺省协议采用单一长连接和 NIO 异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。</li><li>反之，Dubbo 缺省协议不适合传送大数据量的服务，比如传文件，传视频等，除非请求量很低。</li><li>传输协议：TCP</li><li>序列化：Hessian 二进制序列化</li></ul></li><li><p>注册中心–zookeeper</p><ul><li>服务提供者启动时 : 向 /dubbo/com.foo.BarService/providers 目录下写入自己的 URL 地址</li><li>服务消费者启动时 : 订阅 /dubbo/com.foo.BarService/providers 目录下的提供者 URL 地址。并向 /dubbo/com.foo.BarService/consumers 目录下写入自己的 URL 地址</li><li>监控中心启动时 : 订阅 /dubbo/com.foo.BarService 目录下的所有提供者和消费者 URL 地址。</li><li>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</li></ul></li></ol><img src="http://dubbo.apache.org/docs/zh-cn/user/sources/images/zookeeper.jpg"><h2 id="引用计数法分析缺点"><a href="#引用计数法分析缺点" class="headerlink" title="引用计数法分析缺点"></a>引用计数法分析缺点</h2><ul><li>如何解决循环引用<ul><li>编译之前解决，做一个限制。</li><li>可达性分析和引用计数一起用。</li></ul></li></ul><h2 id="数字证书的体现"><a href="#数字证书的体现" class="headerlink" title="数字证书的体现"></a>数字证书的体现</h2><ul><li>正版和盗版软件的区别就体现了证书的作用。</li></ul><h2 id="JDK和JRE的区别是什么"><a href="#JDK和JRE的区别是什么" class="headerlink" title="JDK和JRE的区别是什么"></a>JDK和JRE的区别是什么</h2><ul><li>JVM ：解释器，执行器等。</li><li>JRE ：JVM，类加载器，java类库</li><li>JDK ：JRE，编译器，调试器（jconsole，jvisualvm等工具软件）。</li></ul><p>Java的跨平台意思就是经过javac编译器编译成二进制的.class字节码文件是跨平台的。</p><p>查看本地tomcat使用的什么垃圾收集器</p><pre><code>-XX:InitialHeapSize=125290368 -XX:MaxHeapSize=2004645888 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC</code></pre><img src="https://img2018.cnblogs.com/blog/759801/201901/759801-20190109214833372-741151082.png"><h2 id="线程池的线程数设置"><a href="#线程池的线程数设置" class="headerlink" title="线程池的线程数设置"></a>线程池的线程数设置</h2><p>最佳线程数目 = （（线程等待时间+线程CPU时间）/线程CPU时间 ）* CPU数目</p><p>最佳线程数目 = （线程等待时间 / 线程CPU时间 + 1）* CPU数目</p><p>线程等待时间所占比例越高，需要越多线程。线程CPU时间所占比例越高，需要越少线程</p><p>高并发、任务执行时间短的业务怎样使用线程池？并发不高、任务执行时间长的业务怎样使用线程池？并发高、业务执行时间长的业务怎样使用线程池？ </p><p>（1）高并发、任务执行时间短的业务，线程池线程数可以设置为CPU核数+1，减少线程上下文的切换 </p><p>（2）并发不高、任务执行时间长的业务要区分开看： </p><p>　　a）假如是业务时间长集中在IO操作上，也就是IO密集型的任务，因为IO操作并不占用CPU，所以不要让所有的CPU闲下来，可以适当加大线程池中的线程数目，让CPU处理更多的业务 </p><p>　　b）假如是业务时间长集中在计算操作上，也就是计算密集型任务，这个就没办法了，和（1）一样吧，线程池中的线程数设置得少一些，减少线程上下文的切换 </p><p>（3）并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考（2）最后，业务执行时间长的问题，也可能需要分析一下，看看能不能使用中间件对任务进行拆分和解耦。</p><h2 id="面向对象的设计思想"><a href="#面向对象的设计思想" class="headerlink" title="面向对象的设计思想"></a>面向对象的设计思想</h2><ul><li>面向对象是一种设计的思想，系统中一切事物皆为对象；对象是属性及其操作的封装体；对象是对现实事物的一种抽象，通过程序来实现对事物的描述。</li><li>面向对象编程——Object Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。</li></ul><ul><li>面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。可以分为好几个函数执行。</li><li>面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。</li></ul><p>面向对象编程的三大<strong>特征</strong>：封装、继承和多态。</p><p>在面向过程的方法中，我们头脑中首先出现的是类似流程图的的东西，而采用OOP我们头脑中首先出现的是类似对象关系图的东西。</p><p>面向对象的<strong>本质</strong> ：答案是抽象。从面对的问题域抽象出解决问题所需的对象是面向对象方法的核心思想。能否恰当抽象出足够的对象类型，特别是抽象出潜在的对象是决定软件设计好坏的关键。如果从更宽泛的角度讲，对我们所面对的复杂问题进行抽象，抓住本质，得出高度精炼的逻辑模型，对问题的求解具有重要的意义。从这个角度来说，抽象并不仅仅局限于对象的抽象，也包括流程和更高层的系统结构。</p><p>就是对类型或者系统结构的抽象。</p><ul><li>分离变化</li><li>多用组合少用继承 ：类继承强调的是抽象复用（属于同一类）而对象组合强调的是实现复用（借用一下其他对象的行为实现）。因为现实编程中很多人把继承当做实现复用，导致滥用。</li><li>多用抽象</li></ul><p>设计模式的设计原则</p><ol><li>单一职责原则 ：每个类或方法只负责一个功能，所以引起类或方法变化的原因只有一个。</li><li>开闭原则 ：对外修改关闭，对外扩展开放。</li><li>里式替换原则 ：任何一个父类出现的地方，都可以用子类去替换，意思是同一个继承体系中的对象应该有共同的行为规范。</li><li>迪米特法则/最少知道原则 ：一个对象应当对其他对象尽可能少的了解，降低各个对象之间的耦合，提高系统的可维护性。</li><li>面向抽象/接口编程 ：要依赖于抽象，不要依赖于具体实现。</li><li>接口隔离原则 ：一个接口应该对外只提供一种功能，而不是把所有功能写到一个接口里面</li></ol><p>设计模式的分类 ：创建型，结构型，行为型</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ul><li><p>软负载均衡（又被称为 4 层或者 7 层负载）</p><ul><li><p>因为网络模型是OSI的7层或者TCP/IP的4层。</p></li><li><p>在一台服务器的操作系统上，安装一个附加软件来实现负载均衡，如Nginx负载均衡。优点是基于特定环境、配置简单、使用灵活、成本低廉，可以满足大部分的负载均衡需求。</p><img src="https://ask.qcloudimg.com/http-save/4069756/u4ofbl8f0n.png?imageView2/2/w/1620"></li><li><p>软负载方面的软件特别多，比如早期阿里章文嵩博士的 LVS，再比如 Nginx 的负载均衡等。通常软负载有这些大的分类技术，http重定向、DNS负载均衡、反向代理负载均衡、IP负载均衡(LVS-NAT)、直接路由(LVS-DR)、IP隧道(LVS-TUN)等技术。</p></li><li><p>负载能力受服务器本身性能的影响，性能越好，负载能力越大。就是剖析服务器内部情况。</p></li></ul></li><li><p>硬负载均衡</p><ul><li>硬负载效率比软负载高。它的原理是把目标 IP 地址改为后台服务器的 ip 地址。</li><li>直接在服务器和外部网络间安装负载均衡设备，这种设备我们通常称之为负载均衡器。由于专门的设备完成专门的任务，独立于操作系统，整体性能得到大量提高，</li><li>负载性能强更适用于一大堆设备、大访问量、简单应用。配置冗余，只是从网络上进行判断，有可能机器处理能力已经不行了，但是还没来得及反应</li></ul></li></ul><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><ul><li><a href="https://www.hollischuang.com/archives/category/%e5%88%86%e5%b8%83%e5%bc%8f">https://www.hollischuang.com/archives/category/%e5%88%86%e5%b8%83%e5%bc%8f</a></li></ul><h3 id="分布式与集群"><a href="#分布式与集群" class="headerlink" title="分布式与集群"></a>分布式与集群</h3><ul><li><p>分布式（distributed）是指<strong>在多台不同的服务器中部署不同的服务模块</strong>，通过远程调用协同工作，对外提供服务。</p></li><li><p>集群（cluster）是指<strong>在多台不同的服务器中部署相同应用或服务模块</strong>，构成一个集群，通过负载均衡设备对外提供服务。</p></li></ul><h3 id="分布式系统的一些点"><a href="#分布式系统的一些点" class="headerlink" title="分布式系统的一些点"></a>分布式系统的一些点</h3><p>主要是为了提高系统可用性和性能。<br>可用性 ：将数据复制到分布式部署的多台机器中，可以消除单点故障。防止系统由于某台（些）机器宕机导致的不可用。<br>性能 ：通过负载均衡技术，能够让分布在不同地方的数据副本全都对外提供服务。有效提高系统性能。</p><ol><li><p>数据一致性 ：在数据库系统中通常用事务来保证数据的一致性和完整性。而在分布式系统中，数据一致性往往指的是由于数据的复制，不同数据节点中的数据内容是否完整并且相同。</p><ul><li>如何保证一个系统的修改同步到所有机器上。</li><li>在集中式系统中，进行一个同步操作要写同一个数据的时候，可以直接使用事务+锁来管理保证数据的ACID。</li><li>比如我们在电商网站下单，需要经历扣减库存、扣减红包、扣减折扣券等一系列操作。如果库存库存扣减成功，但是红包和折扣券扣减失败的话，也可以说是数据没有保证一致性。</li></ul></li><li><p>一致性模型</p><ul><li>强一致性 ：写操作没有完成不能读，立马可见。</li><li>弱一致性 ：系统并不保证进程或者线程的访问都会返回最新的更新过的值。但会尽可能保证在某个时间级别（比如秒级别）之后，可以让数据达到一致性状态。</li><li>最终一致性 ：弱一致性的特定形式。DNS是一个典型的最终一致性系统。如果经过一段时间后要求能访问到更新后的数据，则是最终一致性。</li></ul></li></ol><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。</p><p><strong>分布式系统的 CAP 理论，他包括以下三个属性：</strong></p><p><strong>一致性(Consistency)</strong>：分布式系统中的所有数据，同一时刻有同样的值。主要是因为并发读写才出现一致性问题。CAP不能满足的是强一致性。<br>业务代码往数据库 01 这个节点写入记录 A，数据库 01 把 A 记录同步到数据库 02，业务代码再从数据库 02 中读出的记录也是 A。那么两个数据库存放的数据就是一致的。</p><p><strong>可用性(Availability)</strong>：分布式系统中一部分节点出现故障，分布式系统仍旧可以响应用户的请求。任何一个节点的不稳定都可能影响可用性<br>假设数据库 01 和 02 同时存放记录 A，由于数据库 01 挂掉了，业务代码不能从中获取数据。<br>那么业务代码可以从数据库 02 中获取记录 A。也就是在节点出现问题的时候，还保证数据的可用性。<br>淘宝系统5个9，就是极高可用性，从全年停机时间来看不超过5分钟。</p><p><strong>分区容错性(Partition tolerance)</strong>：假设两个数据库节点分别在两个区，而两个区的通讯发生了问题。就不能达成数据一致，这就是分区的情况，我就需要从 C 和 A 之间做出选择。<br>是选择可用性(A)，获取其中一个区的数据。还是选择一致性(C)，等待两个区的数据同步了再去获取数据。</p><ul><li><p>CA ：一般不用，分布式分区是必然的，所以舍弃P不行。</p></li><li><p>CP ：不保证可用性，但是保证强一致性，如果系统出错了可能会一直阻塞，影响用户体验。</p></li></ul><p>注册中心不能因为自身原因破坏服务的连通性。在 CAP 的权衡中，注册中心的可用性比数据强一致性更宝贵，所以整体设计更应该偏向 AP，而非 CP，数据不一致在可接受范围，而P下舍弃A却完全违反了注册中心不能因为自身的任何原因破坏服务本身的可连通性的原则。</p><p>ZooKeeper是个追求最终一致性，可用性，其实也即是（AP，因为发生脑裂时，不需要保证强一致性，有时候刚好需要同一个机房下面调用）的，<strong>即任何时刻对ZooKeeper的访问请求能得到一致的数据结果</strong>，同时系统对网络分割具备容错性。<strong>但是它不能保证每次服务请求的可用性</strong>，也就是在极端环境下，ZooKeeper可能会丢弃一些请求，消费者程序需要重新请求才能获得结果。ZooKeeper是分布式协调服务，它的职责是保证数据在其管辖下的所有服务之间保持同步、一致。所以就不难理解为什么ZooKeeper被设计成CP而不是AP特性的了。</p><ul><li>AP ：需要好的用户体验，立马返回。12306，淘宝下单，买的时候还有，下单失败。最终一致性的保证。</li></ul><h3 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h3><p>ACID是传统数据库常用的设计理念，追求强一致性模型。BASE支持的是大型分布式系统，提出通过牺牲强一致性获得高可用性。</p><p>BASE是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency）。<br>其实就是用来CAP的AP，但是P就是弄了软状态，保证虽然出错了，但是我有一个出错状态，来决定下一步的操作。</p><ul><li><p>基本可用（Basically Available）</p><ul><li>基本可用是指分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。</li><li>电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。这就是损失部分可用性的体现。</li><li>降级就是一个页面很多模块，牺牲部分模块的可用性，比如就不调用广告模块了，那么系统就会有更多的能力去处理核心业务。</li></ul></li><li><p>软状态（ Soft State）</p><ul><li>软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。</li><li>分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时就是软状态的体现。</li><li>mysql replication的异步复制也是一种体现。</li></ul></li><li><p>最终一致性（ Eventual Consistency）</p><ul><li>最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。</li><li>弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</li></ul></li></ul><h3 id="分布式事务（有效的解决分布式的一致性问题）"><a href="#分布式事务（有效的解决分布式的一致性问题）" class="headerlink" title="分布式事务（有效的解决分布式的一致性问题）"></a>分布式事务（有效的解决分布式的一致性问题）</h3><p>常见的分布式解决方案有：</p><p>最大努力通知型事务<br>可靠消息一致性事务<br>TCC事务</p><p>在分布式系统中，为了保证数据的高可用，通常，我们会将数据保留多个副本(replica)，这些副本会放置在不同的物理的机器上。为了对用户提供正确的增\删\改\差等语义，我们需要保证这些放置在不同物理机器上的副本是一致的。</p><p>为了解决这种分布式一致性问题，提出了一些协议和算法。二阶提交协议、三阶提交协议和Paxos算法。</p><p>分布式系统要求一致性，单个节点通过事务可以保证一致性，但是多个节点的一致性怎么保证呢。处理一个全局事务<br>四个：应用程序，常见的事务管理器是交易中间件，常见的资源管理器是数据库，常见的通信资源管理器是消息中间件。</p><h4 id="两阶段提交协议"><a href="#两阶段提交协议" class="headerlink" title="两阶段提交协议"></a>两阶段提交协议</h4><p>两阶段提交主要保证了分布式事务的原子性：即所有结点要么全做要么全不做</p><p>二阶段提交的算法思路可以概括为：参与者将操作成败通知协调者，再由协调者根据所有参与者的反馈情报决定各参与者是否要提交操作还是中止操作。</p><p>第一阶段：准备阶段(投票阶段)和第二阶段：提交阶段（执行阶段）。</p><p>在提交阶段如果协调者和参与者都挂了，会发生数据不一致，即使选举出新的协调者，也无法进行。</p><h4 id="三阶段提交"><a href="#三阶段提交" class="headerlink" title="三阶段提交"></a>三阶段提交</h4><p>在doCommit阶段</p><h4 id="paxos算法"><a href="#paxos算法" class="headerlink" title="paxos算法"></a>paxos算法</h4><p>通过引入抢占式访问权来取代互斥访问权。acceptor有权让任意proposer的访问权失效，然后将访问权发放给其他的proposer。</p><p>在方案二中，proposer向acceptor发出的每次请求都要带一个编号（epoch），且编号间要存在全序关系。一旦acceptor接收到proposer的请求中包含一个更大的epoch的时候，马上让旧的epoch失效，不再接受他们提交的取值。然后给新的epoch发放访问权，让他可以设置var变量的值。</p><p>在确保旧的epoch已经失效后，并且旧的epoch没有设置var变量的值，新的epoch会提交自己的值。<br>当旧的epoch已经设置过var变量的取值，那么新的epoch应该认同旧的epoch设置过的值，并不在提交新的值。</p><h4 id="脑裂问题"><a href="#脑裂问题" class="headerlink" title="脑裂问题"></a>脑裂问题</h4><p>就是比如有两个机房，一共一个Leader，机房1有4台机器，Leader在机房1中，机房2中有3台机器。</p><p>那么两个机房是通过网络进行消息传输的，如果网络连接断开，两个机房都产生了Leader，就发生了脑裂，被分成两个集群，独立对外提供服务，造成数据不一致，可以通过过半机制来保证。</p><p>当连接断开时，需要选举出新的Leader，在领导者选举的过程中，如果某台zkServer获得了<strong>超过半数</strong>的选票。比如7/2=3，也就是至少要有4个，那么机房1肯定可以，但是机房2是无法选出新的Leader，所以避免了脑裂。</p><p><a href="https://juejin.im/post/5d36c2f25188257f6a209d37">https://juejin.im/post/5d36c2f25188257f6a209d37</a></p><h4 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h4><ul><li><a href="https://database.51cto.com/art/201909/602634.htm">https://database.51cto.com/art/201909/602634.htm</a></li></ul><p>TCC是try-confirm-cancel的单词首字母缩写，是一个类2PC的柔性事务解决方案，由支付宝提出后得到广泛的实践。是一个保证最终一致性的柔性事务解决方案。</p><p><strong>TCC(Try，Confirm，Cancel)</strong><br>对于一些要求高一致性的分布式事务，例如：支付系统，交易系统，我们会采用 TCC。<br>它包括，Try 尝试，Confirm 确认，Cancel 取消。看下面一个例子能否帮助大家理解。<br>假设我们有一个转账服务，需要把“A 银行”“A 账户”中的钱分别转到“B银行”“B 账户”和“C 银行”“C 账户”中去。<br>假设这三个银行都有各自的转账服务，那么这次转账事务就形成了一次分布式事务。</p><p>首先是 Try 阶段，主要检测资源是否可用，例如检查账户余额是否足够，缓存，数据库，队列是否可用等等。<br>并不执行具体的逻辑。如上图，这里从“A 账户”转出之前要检查，账户的总金额是否大于 100，并且记录转出金额和剩余金额。<br>或者有一个字段，用来表示冻结多少库存，不能直接将库存扣除，应当冻结库存，将库存减去后，将减去的值保存在已冻结的字段中。<br>比如：用户积分原本是1000，现在要增加100个积分，可以保持积分为1000不变，在一个预增加字段里，设置一个100，表示有100个积分准备增加。</p><p>然后就是confirm阶段 ：订单服务中的CONFIRM操作，是将订单状态更新为支付成功这样的确定状态。有数据库中间件可以感知各个服务状态变化。<br>同时积分服务将积分变更为增加积分之后的值，修改预增加的值为0，积分值修改为原值+预增加的100分的和。</p><p>CANCEL阶段 ：接着TRY阶段的业务情景来说。<br>订单服务中，当支付失败，CANCEL操作需要更改订单状态为支付失败。<br>积分服务要将预增加的100个积分扣除。</p><p><strong>TCC 可靠性</strong><br>TCC 通过记录事务处理日志来保证可靠性。一旦 Try，Confirm，Cancel 操作的时候服务挂掉或者出现异常，TCC 会提供重试机制。另外如果服务存在异步的情况可以采用消息队列的方式通信保持事务一致。</p><p>对于TCC型事务，跨系统的调用均是基于服务间的直接调用，即很大程度上是同步调用。基于TCC方案能够保证主子事务同时成功，同时失败。</p><h4 id="最大努力通知型事务"><a href="#最大努力通知型事务" class="headerlink" title="最大努力通知型事务"></a>最大努力通知型事务</h4><p>是为解决跨网络、跨服务之间的柔性事务的另一种解决方案。</p><ul><li>业务活动的主动方，在完成本地操作之后，向被动方发送消息（<strong>通知操作</strong>），这个过程允许消息丢失，主动方会重试（<strong>体现了最大努力特点</strong>），并且主动方要提供一个接口，当主动方重试次数达到一定时，被动方主动查询。这些接口都要实现幂等。</li></ul><h4 id="可靠消息最终一致性事务1-原理及实现（利用消息队列）"><a href="#可靠消息最终一致性事务1-原理及实现（利用消息队列）" class="headerlink" title="可靠消息最终一致性事务1-原理及实现（利用消息队列）"></a>可靠消息最终一致性事务1-原理及实现（利用消息队列）</h4><p>对于TCC型事务，跨系统的调用均是基于服务间的直接调用，即很大程度上是同步调用。基于TCC方案能够保证主子事务同时成功，同时失败。</p><p>但实际开发中，由于多方面的考虑，我们会将服务拆分为异步方式，一般是基于MQ进行服务间的解耦，服务发起方执行完本地业务操作后发送一条消息给到消息中间件（RocketMQ、RabbitMQ），被动方服务从MQ中消费该消息并进行业务处理，从而形成业务上的闭环。</p><p>业务主动方本地事务提交失败，业务被动方不会收到消息的投递。<br>只要业务主动方本地事务执行成功，那么消息服务一定会投递消息给下游的业务被动方（定时任务扫描消息状态，防止中间网络传输消息丢失），并最终保证业务被动方一定能成功消费该消息（消费成功或失败，即最终一定会有一个最终态）。<br>这个机制就是基于消息中间件的异步流程中的最终一致性保证方案。</p><h2 id="dubbo面试"><a href="#dubbo面试" class="headerlink" title="dubbo面试"></a>dubbo面试</h2><ul><li><a href="https://www.cnblogs.com/hongdada/p/8572513.html">https://www.cnblogs.com/hongdada/p/8572513.html</a></li></ul><ol><li>介绍一下dubbo中的角色</li></ol><ol start="2"><li>服务治理的基本原理</li></ol><ol start="3"><li>注册中心辨析，为什么使用zk不用redis</li></ol><ol start="4"><li>dubbo的负载均衡</li></ol><ol start="5"><li>问：如果这个时候有服务器突然下线，如何保证负责的稳定性</li></ol><ol start="6"><li>问：如果大量集群因网络波动出现问题，如何解决，维持稳定性</li></ol><ol start="7"><li>注册中心挂了可以继续通信吗？</li></ol><p>可以，因为刚开始初始化的时候，消费者会将提供者的地址等信息拉取到本地缓存，所以注册中心挂了可以继续通信。</p><ol start="8"><li>Zookeeper集群的脑裂问题处理 - 运维总结</li></ol><p><a href="https://cloud.tencent.com/developer/article/1534343">https://cloud.tencent.com/developer/article/1534343</a></p><ol start="9"><li>rpc中序列化的作用</li></ol><h2 id="zookeeper是什么？zk的性能瓶颈怎么克服？"><a href="#zookeeper是什么？zk的性能瓶颈怎么克服？" class="headerlink" title="zookeeper是什么？zk的性能瓶颈怎么克服？"></a>zookeeper是什么？zk的性能瓶颈怎么克服？</h2><p>注册中心不能因为自身原因破坏服务的连通性。在 CAP 的权衡中，注册中心的可用性比数据强一致性更宝贵，所以整体设计更应该偏向 AP，而非 CP，数据不一致在可接受范围，而P下舍弃A却完全违反了注册中心不能因为自身的任何原因破坏服务本身的可连通性的原则。</p><p>ZooKeeper保证CP，因为zk有一个leader选举，有时候会很慢。可用性不行。</p><p>ZooKeeper是个追求最终一致性，可用性，其实也即是（AP，因为发生脑裂时，不需要保证强一致性，有时候刚好需要同一个机房下面调用）的，<strong>即任何时刻对ZooKeeper的访问请求能得到一致的数据结果</strong>，同时系统对网络分割具备容错性。<strong>但是它不能保证每次服务请求的可用性</strong>，也就是在极端环境下，ZooKeeper可能会丢弃一些请求，消费者程序需要重新请求才能获得结果。ZooKeeper是分布式协调服务，它的职责是保证数据在其管辖下的所有服务之间保持同步、一致。所以就不难理解为什么ZooKeeper被设计成CP而不是AP特性的了。</p><p>我们知道 ZooKeeper 的 ZAB 协议对每一个写请求，会在每个ZooKeeper节点上保持写一个事务日志，同时再加上定期的将内存数据镜像（Snapshot）到磁盘来保证数据的一致性和持久性，以及宕机之后的数据可恢复，这是非常好的特性，但是我们要问，在服务发现场景中，其最核心的数据-实时的健康的服务的地址列表真的需要数据持久化么？，不需要。<br>服务调用发起方更关注的是其要调用的服务的实时的地址列表和实时健康状态，每次发起调用时，并不关心要调用的服务的历史服务地址列表、过去的健康状态。<br>但是又需要存储服务的元信息，所以也需要。</p><p><strong>在实践中，注册中心不能因为自身的任何原因破坏服务之间本身的可连通性</strong>。服务调用（请求响应流）链路应该是弱依赖注册中心，必须仅在服务发布，机器上下线，服务扩缩容等必要时才依赖注册中心。</p><p>难以承受的异常处理。</p><p>在粗粒度分布式锁，分布式选主，主备高可用切换等不需要高TPS 支持的场景下有不可替代的作用，而这些需求往往多集中在大数据、离线任务等相关的业务领域，因为大数据领域，讲究分割数据集，并且大部分时间分任务多进程/线程并行处理这些数据集，但是总是有一些点上需要<strong>将这些任务和进程统一协调，这时候就是 ZooKeeper 发挥巨大作用的用武之地</strong>。</p><p>但是在交易场景交易链路上，在主业务数据存取，大规模服务发现、大规模健康监测等方面有天然的短板，应该竭力避免在这些场景下引入 ZooKeeper。</p><p><strong>使用redis进群克服zk性能瓶颈</strong></p><p><a href="https://www.cnblogs.com/wely/p/6198649.html">https://www.cnblogs.com/wely/p/6198649.html</a><br><a href="https://www.cnblogs.com/wely/">https://www.cnblogs.com/wely/</a></p><h2 id="Spring源码分析-1"><a href="#Spring源码分析-1" class="headerlink" title="Spring源码分析"></a>Spring源码分析</h2><p><a href="https://www.cnblogs.com/java-chen-hao/p/11046190.html">https://www.cnblogs.com/java-chen-hao/p/11046190.html</a></p><h2 id="过滤器和拦截器的区别"><a href="#过滤器和拦截器的区别" class="headerlink" title="过滤器和拦截器的区别"></a>过滤器和拦截器的区别</h2><ul><li><p>过滤器</p><ul><li>依赖于servlet容器。在实现上基于函数回调，可以对几乎所有请求进行过滤。</li><li>比如：在过滤器中修改字符编码；在过滤器中修改HttpServletRequest的一些参数，包括：过滤低俗文字、危险字符等。</li></ul></li><li><p>拦截器</p><ul><li>依赖于web框架，在SpringMVC中就是依赖于SpringMVC框架。在实现上基于反射机制。属于AOP的一种实现。只能对controller请求进行拦截，对其他的比如静态资源访问就不行。</li></ul></li><li><p>区别</p><ul><li>过滤器只能用在Web程序中。拦截器可以用在Web程序，Application等。</li><li>Filter的执行由Servlet容器回调完成，而拦截器通常通过反射的方式来执行。</li><li>拦截器可以访问spring容器里的对象。</li><li>拦截器可以被多次调用，过滤器只能在刚访问时被调用一次。</li></ul></li></ul><img src="https://images2017.cnblogs.com/blog/330611/201710/330611-20171023144517066-24770749.png"><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><ol><li><p>数据存储结构</p><ul><li>关系型 ：一般都有固定的表结构，不是很容易扩展（可以通过数据库中间件）</li><li>非关系型 ：基于文档的，k-v的，基于图的，数据格式灵活。</li></ul></li><li><p>数据一致性</p><ul><li><p>MySQL保证强一致性。</p></li><li><p>非关系型数据库一般强调的是数据最终一致性，而不没有像ACID一样强调数据的强一致性，从非关系型数据库中读到的有可能还是处于一个中间态的数据，因此如果你的业务对于数据的一致性要求很高，那么非关系型数据库并不一个很好的选择。</p></li><li><p>NoSQL的基本需求就是支持分布式存储，严格一致性与可用性需要互相取舍，由此延伸出了CAP理论来定义分布式存储遇到的问题。</p></li></ul></li><li><p>扩展性</p><ul><li>关系型扩展稍微麻烦一些，并且读写性能差。</li></ul></li></ol><h2 id="头条三次面试总结"><a href="#头条三次面试总结" class="headerlink" title="头条三次面试总结"></a>头条三次面试总结</h2><ol><li><p>非关系型和关系型区别。为什么。</p></li><li><p>redis为什么不保证原子性，为什么要这样设计。</p></li><li><p>redis的一致性，为什么这样设计。一致性是什么。</p><ul><li>原子性 ：命令入队出错（命令不符合规范 get 没有key），事务不被执行，如果命令执行出错（rpush 字符串键），整个事务继续执行。<ul><li>作者认为不支持事务回滚是因为这种复杂的功能和redis追求简单高效的设计主旨不符合。redis的事务执行时错误通常都是编程错误产生的，这种错误只会出现在开发环境中。</li></ul></li><li>一致性 ：入队错误不执行事务，不影响一致性，执行错误出错的命令不会做修改，不会影响，服务器停机，有RDB和AOF可以保证。</li><li>隔离性 ：单线程执行事务。</li><li>持久性 ：AOF每次都刷新磁盘可以，其他的不能保证。</li></ul></li><li><p>银行家算法</p></li><li><p>线程死锁条件。</p></li><li><p>进程通信方式，项目中用到了哪些。</p></li><li><p>最小生成树算法。</p></li><li><p>克鲁斯卡尔算法的回路怎么判断</p><ul><li>加边法来说，加的这个边的两个节点不能都在已用列表（时间O(n2)），使用hash思想（空间O(n)，时间O(1)），还有没有别的。</li></ul></li><li><p>1000w个整数，如何最快排序–桶排序（O(n)）</p></li><li><p>实现一个队列（链表实现，可用性好，等等）</p></li><li><p>如何复用线程</p></li><li><p>Java的线程池的corePoolSize是怎么设计的。自己实现一个。</p></li><li><p>阻塞队列的优点，为什么线程池要用阻塞队列，不用普通的。</p><ul><li><p>当队列为空的时候，消费线程会阻塞，等待队列不为空；当队列满了的时候，生产线程就会阻塞，直到队列不满。阻塞队列的出现使得程序员不需要关心这些细节，比如什么时候阻塞线程，什么时候唤醒线程，这些都由阻塞队列完成了。</p></li><li><p><a href="https://wiki.jikexueyuan.com/project/java-concurrent/blocking-queues.html">https://wiki.jikexueyuan.com/project/java-concurrent/blocking-queues.html</a></p></li></ul></li></ol><ol start="8"><li>图书馆入队列接口，set结构为了保证一个人只能进队列一次，但是如果前面进set成功了，后面List没进去怎么办，虽然你设置进不去删除set，但是如果删除也失败了呢。怎么办。<ul><li>使用rocketMQ那种事务机制来保证，设置一个第三个状态。</li><li>砍掉set，在出队列过程进行判断。</li><li>利用nginx的限流操作防止刷接口。</li><li>利用redis特性–超时机制，set元素设置超时时间，就避免了短时间内这个人不会一直刷接口，还能保证进队列，但是在出队列时要判重。</li></ul></li><li>二叉树中的最大路径和的(leetcode124加强版)，在选择了当前节点后，不能选择父亲节点和两个亲孩子节点。</li></ol><p>这边好几个公司都约我hr面了，如果字节这边稳的话，我就不面了。</p><h2 id="Spring工厂"><a href="#Spring工厂" class="headerlink" title="Spring工厂"></a>Spring工厂</h2><p>Spring提供了BeanFactoryPostProcessor的容器拓展机制,该机制允许我们在容器实例化相应对象之前,对注册到容器的BeanDefinition所保存的信息做相应的修改.</p><p>那我们有哪些实际场景有运用到这个拓展呢?</p><p>比如我们配置数据库信息,经常用到占位符</p><pre><code>$&#123;jdbc.url&#125;</code></pre><p>当BeanFactory在第一阶段加载完成所有配置信息时,保存的对象的属性信息还只是以占位符的形式存在.这个解析的工作是在PropertySourcesPlaceholderConfigurer中做的</p><p><a href="http://cmsblogs.com/?p=5318">http://cmsblogs.com/?p=5318</a></p><h2 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h2><p>缓存性能高了</p><p>ioc机制，扩展点自适应<br>就是容器嘛，ExtensionFactory，下面有AdaptiveExtensionFactory用了@Adaptive标注，这是一个典型的适配器模式。通过适配器获得另外的两个ExtensionFactory实现类。主要就是为了获取目标对象。</p><p>objectFactory是dubbo用于IOC和AOP的工厂，而他真正产生作用的地方就是injectExtension(T)，我们可以注意到objectFactory实际上就是ExtensionFactory的自适应扩展点。<br>objectFactoty实际上就是AdaptiveExtensionFactoy适配工厂类。所以在dubbo一个内部的bean的注入一定是通过SpiExtensionFactory实现的。而类似于服务的发布则交由spring统一管理.</p><p>SpiExtensionFactory负责加载扩展点的自适应扩展点对象。<br>通过spring容器加载扩展点实例。</p><p>这个注解可以用于接口的某个子类上，也可以用于接口方法上。<br>如果用在方法上，则表示Dubbo会为该接口自动生成一个子类，并且按照一定的格式重写该方法，而其余没有标注@Adaptive注解的方法将会默认抛出异常。</p><p>通过ExtensionLoader.getExtensionLoader(FruitGranter.class)方法获取了一个FruitGranter对应的ExtensionLoader对象，然后调用其getAdaptiveExtension()方法获取其为FruitGranter接口构造的子类实例，这里的子类实际上就是ExtensionLoader通过一定的规则为FruitGranter接口编写的子类代码，然后通过javassist或jdk编译加载这段代码，加载完成之后通过反射构造其实例，最后将其实例返回。在上面我们调用该实例，也就是granter对象的watering()方法时，该方法内部就会通过url对象指定的参数来选择具体的实例。</p><p>加载标注有@Adaptive注解的接口，如果不存在，则不支持Adaptive机制；<br>为目标接口按照一定的模板生成子类代码，并且编译生成的代码，然后通过反射生成该类的对象；<br>结合生成的对象实例，通过传入的URL对象，获取指定key的配置，然后加载该key对应的类对象，最终将调用委托给该类对象进行。</p><ol><li>标注了@Activate注解的类，该注解的主要作用是将某个实现子类标注为自动激活，也就是在加载实例的时候也会加载该类的对象；</li></ol><p>如果某个子类标注了@Adaptive注解，那么就会使用该子类所自定义的Adaptive机制，如果没有子类标注了该注解，那么就会使用下面的createAdaptiveExtensionClass()方式来创建一个目标类class对象<br>为目标接口生成子类代码，以字符串形式表示，使用jdk或者javassit编译得到class对象。</p><h2 id="集群容错"><a href="#集群容错" class="headerlink" title="集群容错"></a>集群容错</h2><ul><li>在Directory中找出本次集群中的全部invokers</li><li>在Router中,将上一步的全部invokers挑选出能正常执行的invokers</li><li>在LoadBalance中,将上一步的能正常的执行invokers中,根据配置的负载均衡策略,挑选出需要执行的invoker</li></ul><p><strong>directory</strong></p><ul><li><p>directory接口的实现类,他主要有两个实现类,一个是StaticDirectory,一个是RegistryDirectory</p></li><li><p>Directory 代表多个 Invoker，可以把它看成 List<Invoker> ,但与 List 不同的是，它的值可能是动态变化的，比如注册中心推送变更</Invoker></p></li><li><p>其实从StaticDirectory中的Static关键词来看,就知道,这个其实是不会动态变化的,从下图知道,他的Invoker是通过构造函数传入,StaticDirectory用得比较少,主要用在服务对多注册中心的引用。</p></li><li><p>下面就是RegistryDirectory了，实现了这个NotifyListener中的notify方法就是注册中心的回调,也就是它之所以能根据注册中心动态变化的根源所在，变化也即是在回调方法里面变化的，也就是注册中心有变化,则更新methodInvokerMap和urlInvokerMap的值</p></li></ul><p><strong>路由Router：</strong></p><ul><li><p>其实Router在应用隔离,读写分离,灰度发布中都有它的影子.因此本篇用灰度发布的例子来做前期的铺垫</p></li><li><p>他有三个实现类,分别是ConditionRouter,MockInvokersSelector,ScriptRouter</p></li><li><p>ScriptEngine类的eval方法就能很好处理这类字符串表达式的问题。</p></li><li><p>ConditionRouter(条件路由),条件路由主要就是根据dubbo管理控制台配置的路由规则来过滤相关的invoker,当我们对路由规则点击启用的时候,就会触发RegistryDirectory类的notify方法</p></li></ul><p><strong>Cluster</strong></p><ul><li><p>Cluster 将 Directory 中的多个 Invoker 伪装成一个 Invoker，对上层透明，伪装过程包含了容错逻辑，调用失败后，重试另一个。就是应对出错情况采取的策略。</p></li><li><p>failover ：失败去重试别的机器</p></li><li><p>failfast ：通常用于非幂等性的写操作，比如新增记录。</p></li><li><p>MockClusterWrapper ：本地伪装通常用于服务降级，比如某验权服务，当服务提供方全部挂掉后，客户端不抛出异常，而是通过 Mock 数据返回授权失败</p></li><li><p>Failback ：失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。使用了scheduleThreadPool。</p></li><li><p>failsafe ：失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</p></li></ul><p><strong>LoadBalance</strong></p><ul><li><p>RandomLoadBalance(随机)<br>总权重为10(1+2+3+4),那么怎么做到按权重随机呢?根据10随机出一个整数,假如为随机出来的是2.然后依次和权重相减,比如2(随机数)-1(A的权重) = 1,然后1(上一步计算的结果)-2(B的权重) = -1,此时-1 &lt; 0,那么则调用B,其他的以此类推。</p></li><li><p>RoundRobinLoadBalance(轮询)</p></li><li><p>LeastActiveLoadBalance(最少活跃数)<br>活跃数指调用前后计数差。使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。<br>一部分是活跃数和权重的统计,另一部分是选择invoker.也就是他把最小活跃数的invoker统计到leastIndexs数组中,如果权重一致(这个一致的规则参考上面的随机算法)或者总权重为0,则均等随机调用,如果不同,则从leastIndexs数组中按照权重比例调用(还是和随机算法中的那个依次相减的思路一样)</p></li><li><p>ConsistentHashLoadBalance(一致性哈希)</p></li></ul><h2 id="dubbo服务暴露原理"><a href="#dubbo服务暴露原理" class="headerlink" title="dubbo服务暴露原理"></a>dubbo服务暴露原理</h2><p><a href="https://www.jianshu.com/p/1c53767359c6">https://www.jianshu.com/p/1c53767359c6</a><br><img src="https://upload-images.jianshu.io/upload_images/1041678-b2cba7364e442bed.png"></p><p>服务发布过程中做了哪些事</p><p>dubbo都有哪些协议,他们之间有什么特点,缺省值是什么</p><p>什么是本地暴露和远程暴露,他们的区别</p><ul><li>步骤<ul><li>暴露本地服务</li><li>暴露远程服务</li><li>启动netty</li><li>连接zookeeper</li><li>到zookeeper注册</li><li>监听zookeeper</li></ul></li></ul><p>监听spring容器初始化完成，调用onApplicationContext事件，然后执行doExport–&gt; doExportUrls–&gt; </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doExportUrls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    获取注册中心的urls    List<span class="token operator">&lt;</span>URL<span class="token operator">></span> registryURLs <span class="token operator">=</span> <span class="token function">loadRegistries</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dubbo支持多种协议<span class="token punctuation">,</span>默认使用的是dubbo协议    <span class="token keyword">for</span> <span class="token punctuation">(</span>ProtocolConfig protocolConfig <span class="token operator">:</span> protocols<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">doExportUrlsFor1Protocol</span><span class="token punctuation">(</span>protocolConfig<span class="token punctuation">,</span> registryURLs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之所以有暴露本地服务，因为可能出现自己调用自己的情况，通过本地会快很多。</p><p>本地暴露是暴露在JVM中,不需要网络通信.本地暴露的url是以injvm开头的<br>放在了exporterMap里面。</p><p>远程暴露是将ip,端口等信息暴露给远程客户端,调用时需要网络通信.远程暴的url是以registry开头的</p><p>zookeeper连接。</p><img src="https://upload-images.jianshu.io/upload_images/1041678-1cfeb7ffd6d8371e.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp"><p><strong>服务降级</strong></p><p>从no mock(正常情况),force:direct mock(屏蔽),fail-mock(容错)三种情况我们也可以看出,普通情况是直接调用,容错的情况是调用失败后,返回一个设置的值.而屏蔽就很暴力了,直接连调用都不调用,就直接返回一个之前设置的值.<br>主要是MockClusterInvoker这个类</p><p><strong>服务引用</strong><br>生成代理类，然后调用远程方法，获取结果，序列化。</p><p><strong>服务调用</strong></p><p>Dubbo 实现同步和异步调用比较关键的一点就在于由谁调用 ResponseFuture 的 get 方法。同步调用模式下，由框架自身调用 ResponseFuture 的 get 方法。异步调用模式下，则由用户调用该方法。<br>当服务消费者还未接收到调用结果时，用户线程调用 get 方法会被阻塞住。同步调用模式下，框架获得 DefaultFuture 对象后，会立即调用 get 方法进行等待。而异步模式下则是将该对象封装到 FutureAdapter 实例中，并将 FutureAdapter 实例设置到 RpcContext 中，供用户使用。FutureAdapter 是一个适配器，用于将 Dubbo 中的 ResponseFuture 与 JDK 中的 Future 进行适配。这样当用户线程调用 Future 的 get 方法时，经过 FutureAdapter 适配，最终会调用 ResponseFuture 实现类对象的 get 方法，也就是 DefaultFuture 的 get 方法。</p><h2 id="dubbo面试题"><a href="#dubbo面试题" class="headerlink" title="dubbo面试题"></a>dubbo面试题</h2><ol><li><p>默认使用的是什么通信框架，还有别的选择吗?<br>默认也推荐使用netty框架，还有mina以及基于servlet等方式</p></li><li><p>服务调用是阻塞的吗？<br>默认是阻塞的，可以异步调用，没有返回值的可以这么做。</p></li><li><p>一般使用什么注册中心？还有别的选择吗？<br>推荐使用zookeeper注册中心，还有Multicast、Redis和Simple等。</p><ul><li>组播 ：受网络结构限制，只适合小规模应用或开发阶段使用。提供者启动时广播自己的地址。消费方启动时广播订阅请求。提供方收到订阅请求时，单播自己的地址给订阅者，如果设置了unicast=false，则广播给订阅者。</li><li>Redis ：通过心跳的方式检测脏数据，服务器时间必须相同，并且对服务器有一定压力。</li></ul></li><li><p>默认使用什么序列化框架，你知道的还有哪些？<br>默认使用Hessian序列化，还有Duddo、FastJson、Java自带序列化。</p><ul><li>hessian是一种跨语言的高效二进制的序列化方式。</li><li>java序列化：主要是采用JDK自带的java序列化实现，性能很不理想。</li></ul></li><li><p>服务提供者能实现失效踢出是什么原理？<br>服务失效踢出基于zookeeper的临时节点原理。<br>zk有一种ZNODE类型Ephemeral，这种类型的节点具有的特征就是生命和session一样长，服务提供者向注册中心注册后就会创建Ephemeral类型的ZNODE，同时通过心跳保持会话，并缓存信息（以防注册中心挂后可以恢复现场）。 </p></li><li><p>服务上线怎么不影响旧版本？<br>采用多版本开发，不影响旧版本。</p></li><li><p>说说核心的配置有哪些？<br> 核心配置有<br> dubbo:service/<br> dubbo:reference/<br> dubbo:protocol/<br> dubbo:registry/<br> dubbo:application/<br> dubbo:provider/<br> dubbo:consumer/<br> dubbo:method/</p></li><li><p>dubbo推荐用什么协议？<br>默认使用dubbo协议。<br>Dubbo缺省协议采用单一长连接和NIO异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。<br>还有http，rmi等。</p></li><li><p>dubbo和dubbox之间的区别？<br>dubbox是当当网基于dubbo上做了一些扩展，如加了服务可restful调用，更新了开源组件等。</p></li><li><p>Dubbo在安全机制方面是如何解决的<br>Dubbo通过Token令牌防止用户绕过注册中心直连，然后在注册中心上管理授权。Dubbo还提供服务黑白名单，来控制服务所允许的调用方</p></li><li><p>zookeeper是什么</p><ul><li>分布式应用程序协调服务</li><li>Zookeeper 将全量的数据存储在内存中，以此来提高服务器吞吐、减少延迟的目的。</li><li>节点类型 ：在Zookeeper中，node可以分为持久节点和临时节点和顺序节点三大类。持久节点，持久顺序节点，临时节点，临时顺序节点</li></ul></li></ol><p>持久节点<br>所谓持久节点,是指在节点创建后,就一直存在,直到有删除操作来主动清除这个节点,也就是说不会因为创建该节点的客户端会话失效而消失</p><p>临时节点<br>临时节点的生命周期和客户端会话绑定,也就是说,如果客户端会话失效,那么这个节点就会自动被清除掉</p><p>ZK 中我们让所有的机其都注册一个临时节点,我们判断一个机器是否可用,我们只需要判断这个节点在ZK中是否存在就可以了,不需要直接去连接需要检查的机器,降低系统的复杂度</p><p>作用 ：</p><ul><li><p>分布式服务注册与订阅。</p></li><li><p>分布式配置中心 ：发布与订阅模型，即所谓的配置中心，顾名思义就是发布者将数据发布到ZK节点上，供订阅者获取数据，实现配置信息的集中式管理和动态更新。</p></li><li><p>分布式锁 ：分布式锁，这个主要得益于ZooKeeper为我们保证了数据的强一致性。锁服务可以分为两类，一个是保持独占，另一个是控制时序。通常把zk上的一个node看做一把锁。</p></li></ul><h2 id="Minor-GC-，Full-GC-触发条件"><a href="#Minor-GC-，Full-GC-触发条件" class="headerlink" title="Minor GC ，Full GC 触发条件"></a>Minor GC ，Full GC 触发条件</h2><p>Minor GC触发条件：当Eden区满时，触发Minor GC。</p><p>Full GC触发条件：</p><p>（1）调用System.gc时，系统建议执行Full GC，但是不必然执行</p><p>（2）老年代空间不足</p><p>（3）方法去空间不足</p><p>（4）通过Minor GC后进入老年代的平均大小大于老年代的可用内存</p><p>（5）由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul><li><a href="https://my.oschina.net/zhangxufeng">https://my.oschina.net/zhangxufeng</a></li><li><a href="https://my.oschina.net/yaohonv/blog/1606807">https://my.oschina.net/yaohonv/blog/1606807</a></li><li><a href="https://www.cnblogs.com/wely/default.html?page=2">https://www.cnblogs.com/wely/default.html?page=2</a></li></ul><p><a href="https://segmentfault.com/a/1190000019896723">https://segmentfault.com/a/1190000019896723</a></p><h2 id="idea快捷键"><a href="#idea快捷键" class="headerlink" title="idea快捷键"></a>idea快捷键</h2><p>alt + shift + 上下键 ：当前行上移或下移。<br>shift + enter ：新建一个行</p><h2 id="Spring源码阅读"><a href="#Spring源码阅读" class="headerlink" title="Spring源码阅读"></a>Spring源码阅读</h2><ol><li>BeanFactoryAware接口实现类在自动装配时不能被注入BeanFactory对象的依赖：</li><li>ApplicationContextAware接口实现类中的ApplicationContext对象的依赖同理：</li></ol><p>这样的做法使得ApplicationContextAware和BeanFactoryAware中的ApplicationContext或BeanFactory依赖在自动装配时被忽略，而统一由框架设置依赖，如ApplicationContextAware接口的设置会在ApplicationContextAwareProcessor类中完成：</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
